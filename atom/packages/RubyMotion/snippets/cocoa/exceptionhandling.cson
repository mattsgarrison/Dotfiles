'.source.rubymotion':
  'NSStackTraceKey (NSString*)':
    'prefix': 'NSStackTraceKey'
    'body': 'NSStackTraceKey'
  'NSUncaughtRuntimeErrorException (NSString*)':
    'prefix': 'NSUncaughtRuntimeErrorException'
    'body': 'NSUncaughtRuntimeErrorException'
  'NSUncaughtSystemExceptionException (NSString*)':
    'prefix': 'NSUncaughtSystemExceptionException'
    'body': 'NSUncaughtSystemExceptionException'
  'NSHandleOtherExceptionMask (512)':
    'prefix': 'NSHandleOtherExceptionMask'
    'body': 'NSHandleOtherExceptionMask'
  'NSHandleTopLevelExceptionMask (128)':
    'prefix': 'NSHandleTopLevelExceptionMask'
    'body': 'NSHandleTopLevelExceptionMask'
  'NSHandleUncaughtExceptionMask (2)':
    'prefix': 'NSHandleUncaughtExceptionMask'
    'body': 'NSHandleUncaughtExceptionMask'
  'NSHandleUncaughtRuntimeErrorMask (32)':
    'prefix': 'NSHandleUncaughtRuntimeErrorMask'
    'body': 'NSHandleUncaughtRuntimeErrorMask'
  'NSHandleUncaughtSystemExceptionMask (8)':
    'prefix': 'NSHandleUncaughtSystemExceptionMask'
    'body': 'NSHandleUncaughtSystemExceptionMask'
  'NSHangOnEveryExceptionMask (31)':
    'prefix': 'NSHangOnEveryExceptionMask'
    'body': 'NSHangOnEveryExceptionMask'
  'NSHangOnOtherExceptionMask (16)':
    'prefix': 'NSHangOnOtherExceptionMask'
    'body': 'NSHangOnOtherExceptionMask'
  'NSHangOnTopLevelExceptionMask (8)':
    'prefix': 'NSHangOnTopLevelExceptionMask'
    'body': 'NSHangOnTopLevelExceptionMask'
  'NSHangOnUncaughtExceptionMask (1)':
    'prefix': 'NSHangOnUncaughtExceptionMask'
    'body': 'NSHangOnUncaughtExceptionMask'
  'NSHangOnUncaughtRuntimeErrorMask (4)':
    'prefix': 'NSHangOnUncaughtRuntimeErrorMask'
    'body': 'NSHangOnUncaughtRuntimeErrorMask'
  'NSHangOnUncaughtSystemExceptionMask (2)':
    'prefix': 'NSHangOnUncaughtSystemExceptionMask'
    'body': 'NSHangOnUncaughtSystemExceptionMask'
  'NSLogAndHandleEveryExceptionMask (1023)':
    'prefix': 'NSLogAndHandleEveryExceptionMask'
    'body': 'NSLogAndHandleEveryExceptionMask'
  'NSLogOtherExceptionMask (256)':
    'prefix': 'NSLogOtherExceptionMask'
    'body': 'NSLogOtherExceptionMask'
  'NSLogTopLevelExceptionMask (64)':
    'prefix': 'NSLogTopLevelExceptionMask'
    'body': 'NSLogTopLevelExceptionMask'
  'NSLogUncaughtExceptionMask (1)':
    'prefix': 'NSLogUncaughtExceptionMask'
    'body': 'NSLogUncaughtExceptionMask'
  'NSLogUncaughtRuntimeErrorMask (16)':
    'prefix': 'NSLogUncaughtRuntimeErrorMask'
    'body': 'NSLogUncaughtRuntimeErrorMask'
  'NSLogUncaughtSystemExceptionMask (4)':
    'prefix': 'NSLogUncaughtSystemExceptionMask'
    'body': 'NSLogUncaughtSystemExceptionMask'
  'NSExceptionHandlerResume':
    'prefix': 'NSExceptionHandlerResume'
    'body': 'NSExceptionHandlerResume()'
  'NSExceptionHandler.defaultExceptionHandler':
    'prefix': 'defaultExceptionHandler'
    'body': 'defaultExceptionHandler()'
  'delegate':
    'prefix': 'delegate'
    'body': 'delegate()'
  'exceptionHandlingMask':
    'prefix': 'exceptionHandlingMask'
    'body': 'exceptionHandlingMask()'
  'exceptionHangingMask':
    'prefix': 'exceptionHangingMask'
    'body': 'exceptionHangingMask()'
  'setDelegate:':
    'prefix': 'setDelegate:'
    'body': 'setDelegate(${1:id anObject})'
  'setExceptionHandlingMask:':
    'prefix': 'setExceptionHandlingMask:'
    'body': 'setExceptionHandlingMask(${1:NSUInteger aMask})'
  'setExceptionHangingMask:':
    'prefix': 'setExceptionHangingMask:'
    'body': 'setExceptionHangingMask(${1:NSUInteger aMask})'
  'exceptionHandler:shouldHandleException:mask:':
    'prefix': 'exceptionHandler:shouldHandleException:mask:'
    'body': 'exceptionHandler(${1:NSExceptionHandler* sender}, shouldHandleException:${2:NSException* exception}, mask:${3:NSUInteger aMask})'
  'exceptionHandler:shouldLogException:mask:':
    'prefix': 'exceptionHandler:shouldLogException:mask:'
    'body': 'exceptionHandler(${1:NSExceptionHandler* sender}, shouldLogException:${2:NSException* exception}, mask:${3:NSUInteger aMask})'
  'exceptionHandler:shouldHandleException:mask:':
    'prefix': 'exceptionHandler:shouldHandleException:mask:'
    'body': 'exceptionHandler(${1:NSExceptionHandler* sender}, shouldHandleException:${2:NSException* exception}, mask:${3:NSUInteger aMask})'
  'exceptionHandler:shouldLogException:mask:':
    'prefix': 'exceptionHandler:shouldLogException:mask:'
    'body': 'exceptionHandler(${1:NSExceptionHandler* sender}, shouldLogException:${2:NSException* exception}, mask:${3:NSUInteger aMask})'
