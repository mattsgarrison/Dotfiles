'.source.rubymotion':
  'MKAnnotationCalloutInfoDidChangeNotification (NSString*)':
    'prefix': 'MKAnnotationCalloutInfoDidChangeNotification'
    'body': 'MKAnnotationCalloutInfoDidChangeNotification'
  'MKErrorDomain (NSString*)':
    'prefix': 'MKErrorDomain'
    'body': 'MKErrorDomain'
  'MKLaunchOptionsCameraKey (NSString*)':
    'prefix': 'MKLaunchOptionsCameraKey'
    'body': 'MKLaunchOptionsCameraKey'
  'MKLaunchOptionsDirectionsModeDriving (NSString*)':
    'prefix': 'MKLaunchOptionsDirectionsModeDriving'
    'body': 'MKLaunchOptionsDirectionsModeDriving'
  'MKLaunchOptionsDirectionsModeKey (NSString*)':
    'prefix': 'MKLaunchOptionsDirectionsModeKey'
    'body': 'MKLaunchOptionsDirectionsModeKey'
  'MKLaunchOptionsDirectionsModeWalking (NSString*)':
    'prefix': 'MKLaunchOptionsDirectionsModeWalking'
    'body': 'MKLaunchOptionsDirectionsModeWalking'
  'MKLaunchOptionsMapCenterKey (NSString*)':
    'prefix': 'MKLaunchOptionsMapCenterKey'
    'body': 'MKLaunchOptionsMapCenterKey'
  'MKLaunchOptionsMapSpanKey (NSString*)':
    'prefix': 'MKLaunchOptionsMapSpanKey'
    'body': 'MKLaunchOptionsMapSpanKey'
  'MKLaunchOptionsMapTypeKey (NSString*)':
    'prefix': 'MKLaunchOptionsMapTypeKey'
    'body': 'MKLaunchOptionsMapTypeKey'
  'MKLaunchOptionsShowsTrafficKey (NSString*)':
    'prefix': 'MKLaunchOptionsShowsTrafficKey'
    'body': 'MKLaunchOptionsShowsTrafficKey'
  'MKMapRectNull (MKMapRect)':
    'prefix': 'MKMapRectNull'
    'body': 'MKMapRectNull'
  'MKMapRectWorld (MKMapRect)':
    'prefix': 'MKMapRectWorld'
    'body': 'MKMapRectWorld'
  'MKMapSizeWorld (MKMapSize)':
    'prefix': 'MKMapSizeWorld'
    'body': 'MKMapSizeWorld'
  'MKAnnotationViewDragStateCanceling (3)':
    'prefix': 'MKAnnotationViewDragStateCanceling'
    'body': 'MKAnnotationViewDragStateCanceling'
  'MKAnnotationViewDragStateDragging (2)':
    'prefix': 'MKAnnotationViewDragStateDragging'
    'body': 'MKAnnotationViewDragStateDragging'
  'MKAnnotationViewDragStateEnding (4)':
    'prefix': 'MKAnnotationViewDragStateEnding'
    'body': 'MKAnnotationViewDragStateEnding'
  'MKAnnotationViewDragStateNone (0)':
    'prefix': 'MKAnnotationViewDragStateNone'
    'body': 'MKAnnotationViewDragStateNone'
  'MKAnnotationViewDragStateStarting (1)':
    'prefix': 'MKAnnotationViewDragStateStarting'
    'body': 'MKAnnotationViewDragStateStarting'
  'MKDirectionsTransportTypeAny (268435455)':
    'prefix': 'MKDirectionsTransportTypeAny'
    'body': 'MKDirectionsTransportTypeAny'
  'MKDirectionsTransportTypeAutomobile (1)':
    'prefix': 'MKDirectionsTransportTypeAutomobile'
    'body': 'MKDirectionsTransportTypeAutomobile'
  'MKDirectionsTransportTypeWalking (2)':
    'prefix': 'MKDirectionsTransportTypeWalking'
    'body': 'MKDirectionsTransportTypeWalking'
  'MKDistanceFormatterUnitStyleAbbreviated (1)':
    'prefix': 'MKDistanceFormatterUnitStyleAbbreviated'
    'body': 'MKDistanceFormatterUnitStyleAbbreviated'
  'MKDistanceFormatterUnitStyleDefault (0)':
    'prefix': 'MKDistanceFormatterUnitStyleDefault'
    'body': 'MKDistanceFormatterUnitStyleDefault'
  'MKDistanceFormatterUnitStyleFull (2)':
    'prefix': 'MKDistanceFormatterUnitStyleFull'
    'body': 'MKDistanceFormatterUnitStyleFull'
  'MKDistanceFormatterUnitsDefault (0)':
    'prefix': 'MKDistanceFormatterUnitsDefault'
    'body': 'MKDistanceFormatterUnitsDefault'
  'MKDistanceFormatterUnitsImperial (2)':
    'prefix': 'MKDistanceFormatterUnitsImperial'
    'body': 'MKDistanceFormatterUnitsImperial'
  'MKDistanceFormatterUnitsImperialWithYards (3)':
    'prefix': 'MKDistanceFormatterUnitsImperialWithYards'
    'body': 'MKDistanceFormatterUnitsImperialWithYards'
  'MKDistanceFormatterUnitsMetric (1)':
    'prefix': 'MKDistanceFormatterUnitsMetric'
    'body': 'MKDistanceFormatterUnitsMetric'
  'MKErrorDirectionsNotFound (5)':
    'prefix': 'MKErrorDirectionsNotFound'
    'body': 'MKErrorDirectionsNotFound'
  'MKErrorLoadingThrottled (3)':
    'prefix': 'MKErrorLoadingThrottled'
    'body': 'MKErrorLoadingThrottled'
  'MKErrorPlacemarkNotFound (4)':
    'prefix': 'MKErrorPlacemarkNotFound'
    'body': 'MKErrorPlacemarkNotFound'
  'MKErrorServerFailure (2)':
    'prefix': 'MKErrorServerFailure'
    'body': 'MKErrorServerFailure'
  'MKErrorUnknown (1)':
    'prefix': 'MKErrorUnknown'
    'body': 'MKErrorUnknown'
  'MKMapTypeHybrid (2)':
    'prefix': 'MKMapTypeHybrid'
    'body': 'MKMapTypeHybrid'
  'MKMapTypeSatellite (1)':
    'prefix': 'MKMapTypeSatellite'
    'body': 'MKMapTypeSatellite'
  'MKMapTypeStandard (0)':
    'prefix': 'MKMapTypeStandard'
    'body': 'MKMapTypeStandard'
  'MKOverlayLevelAboveLabels (1)':
    'prefix': 'MKOverlayLevelAboveLabels'
    'body': 'MKOverlayLevelAboveLabels'
  'MKOverlayLevelAboveRoads (0)':
    'prefix': 'MKOverlayLevelAboveRoads'
    'body': 'MKOverlayLevelAboveRoads'
  'MKPinAnnotationColorGreen (1)':
    'prefix': 'MKPinAnnotationColorGreen'
    'body': 'MKPinAnnotationColorGreen'
  'MKPinAnnotationColorPurple (2)':
    'prefix': 'MKPinAnnotationColorPurple'
    'body': 'MKPinAnnotationColorPurple'
  'MKPinAnnotationColorRed (0)':
    'prefix': 'MKPinAnnotationColorRed'
    'body': 'MKPinAnnotationColorRed'
  'MKUserTrackingModeFollow (1)':
    'prefix': 'MKUserTrackingModeFollow'
    'body': 'MKUserTrackingModeFollow'
  'MKUserTrackingModeFollowWithHeading (2)':
    'prefix': 'MKUserTrackingModeFollowWithHeading'
    'body': 'MKUserTrackingModeFollowWithHeading'
  'MKUserTrackingModeNone (0)':
    'prefix': 'MKUserTrackingModeNone'
    'body': 'MKUserTrackingModeNone'
  'MKCoordinateForMapPoint':
    'prefix': 'MKCoordinateForMapPoint'
    'body': 'MKCoordinateForMapPoint(${1:MKMapPoint mapPoint})'
  'MKCoordinateRegionForMapRect':
    'prefix': 'MKCoordinateRegionForMapRect'
    'body': 'MKCoordinateRegionForMapRect(${1:MKMapRect rect})'
  'MKCoordinateRegionMake':
    'prefix': 'MKCoordinateRegionMake'
    'body': 'MKCoordinateRegionMake(${1:CLLocationCoordinate2D centerCoordinate}, ${2:MKCoordinateSpan span})'
  'MKCoordinateRegionMakeWithDistance':
    'prefix': 'MKCoordinateRegionMakeWithDistance'
    'body': 'MKCoordinateRegionMakeWithDistance(${1:CLLocationCoordinate2D centerCoordinate}, ${2:CLLocationDistance latitudinalMeters}, ${3:CLLocationDistance longitudinalMeters})'
  'MKCoordinateSpanMake':
    'prefix': 'MKCoordinateSpanMake'
    'body': 'MKCoordinateSpanMake(${1:CLLocationDegrees latitudeDelta}, ${2:CLLocationDegrees longitudeDelta})'
  'MKMapPointEqualToPoint':
    'prefix': 'MKMapPointEqualToPoint'
    'body': 'MKMapPointEqualToPoint(${1:MKMapPoint point1}, ${2:MKMapPoint point2})'
  'MKMapPointForCoordinate':
    'prefix': 'MKMapPointForCoordinate'
    'body': 'MKMapPointForCoordinate(${1:CLLocationCoordinate2D coordinate})'
  'MKMapPointMake':
    'prefix': 'MKMapPointMake'
    'body': 'MKMapPointMake(${1:double x}, ${2:double y})'
  'MKMapPointsPerMeterAtLatitude':
    'prefix': 'MKMapPointsPerMeterAtLatitude'
    'body': 'MKMapPointsPerMeterAtLatitude(${1:CLLocationDegrees latitude})'
  'MKMapRectContainsPoint':
    'prefix': 'MKMapRectContainsPoint'
    'body': 'MKMapRectContainsPoint(${1:MKMapRect rect}, ${2:MKMapPoint point})'
  'MKMapRectContainsRect':
    'prefix': 'MKMapRectContainsRect'
    'body': 'MKMapRectContainsRect(${1:MKMapRect rect1}, ${2:MKMapRect rect2})'
  'MKMapRectDivide':
    'prefix': 'MKMapRectDivide'
    'body': 'MKMapRectDivide(${1:MKMapRect rect}, ${2:MKMapRect* slice}, ${3:MKMapRect* remainder}, ${4:double amount}, ${5:CGRectEdge edge})'
  'MKMapRectEqualToRect':
    'prefix': 'MKMapRectEqualToRect'
    'body': 'MKMapRectEqualToRect(${1:MKMapRect rect1}, ${2:MKMapRect rect2})'
  'MKMapRectGetHeight':
    'prefix': 'MKMapRectGetHeight'
    'body': 'MKMapRectGetHeight(${1:MKMapRect rect})'
  'MKMapRectGetMaxX':
    'prefix': 'MKMapRectGetMaxX'
    'body': 'MKMapRectGetMaxX(${1:MKMapRect rect})'
  'MKMapRectGetMaxY':
    'prefix': 'MKMapRectGetMaxY'
    'body': 'MKMapRectGetMaxY(${1:MKMapRect rect})'
  'MKMapRectGetMidX':
    'prefix': 'MKMapRectGetMidX'
    'body': 'MKMapRectGetMidX(${1:MKMapRect rect})'
  'MKMapRectGetMidY':
    'prefix': 'MKMapRectGetMidY'
    'body': 'MKMapRectGetMidY(${1:MKMapRect rect})'
  'MKMapRectGetMinX':
    'prefix': 'MKMapRectGetMinX'
    'body': 'MKMapRectGetMinX(${1:MKMapRect rect})'
  'MKMapRectGetMinY':
    'prefix': 'MKMapRectGetMinY'
    'body': 'MKMapRectGetMinY(${1:MKMapRect rect})'
  'MKMapRectGetWidth':
    'prefix': 'MKMapRectGetWidth'
    'body': 'MKMapRectGetWidth(${1:MKMapRect rect})'
  'MKMapRectInset':
    'prefix': 'MKMapRectInset'
    'body': 'MKMapRectInset(${1:MKMapRect rect}, ${2:double dx}, ${3:double dy})'
  'MKMapRectIntersection':
    'prefix': 'MKMapRectIntersection'
    'body': 'MKMapRectIntersection(${1:MKMapRect rect1}, ${2:MKMapRect rect2})'
  'MKMapRectIntersectsRect':
    'prefix': 'MKMapRectIntersectsRect'
    'body': 'MKMapRectIntersectsRect(${1:MKMapRect rect1}, ${2:MKMapRect rect2})'
  'MKMapRectIsEmpty':
    'prefix': 'MKMapRectIsEmpty'
    'body': 'MKMapRectIsEmpty(${1:MKMapRect rect})'
  'MKMapRectIsNull':
    'prefix': 'MKMapRectIsNull'
    'body': 'MKMapRectIsNull(${1:MKMapRect rect})'
  'MKMapRectMake':
    'prefix': 'MKMapRectMake'
    'body': 'MKMapRectMake(${1:double x}, ${2:double y}, ${3:double width}, ${4:double height})'
  'MKMapRectOffset':
    'prefix': 'MKMapRectOffset'
    'body': 'MKMapRectOffset(${1:MKMapRect rect}, ${2:double dx}, ${3:double dy})'
  'MKMapRectRemainder':
    'prefix': 'MKMapRectRemainder'
    'body': 'MKMapRectRemainder(${1:MKMapRect rect})'
  'MKMapRectSpans180thMeridian':
    'prefix': 'MKMapRectSpans180thMeridian'
    'body': 'MKMapRectSpans180thMeridian(${1:MKMapRect rect})'
  'MKMapRectUnion':
    'prefix': 'MKMapRectUnion'
    'body': 'MKMapRectUnion(${1:MKMapRect rect1}, ${2:MKMapRect rect2})'
  'MKMapSizeEqualToSize':
    'prefix': 'MKMapSizeEqualToSize'
    'body': 'MKMapSizeEqualToSize(${1:MKMapSize size1}, ${2:MKMapSize size2})'
  'MKMapSizeMake':
    'prefix': 'MKMapSizeMake'
    'body': 'MKMapSizeMake(${1:double width}, ${2:double height})'
  'MKMetersBetweenMapPoints':
    'prefix': 'MKMetersBetweenMapPoints'
    'body': 'MKMetersBetweenMapPoints(${1:MKMapPoint a}, ${2:MKMapPoint b})'
  'MKMetersPerMapPointAtLatitude':
    'prefix': 'MKMetersPerMapPointAtLatitude'
    'body': 'MKMetersPerMapPointAtLatitude(${1:CLLocationDegrees latitude})'
  'MKRoadWidthAtZoomScale':
    'prefix': 'MKRoadWidthAtZoomScale'
    'body': 'MKRoadWidthAtZoomScale(${1:MKZoomScale zoomScale})'
  'MKStringFromMapPoint':
    'prefix': 'MKStringFromMapPoint'
    'body': 'MKStringFromMapPoint(${1:MKMapPoint point})'
  'MKStringFromMapRect':
    'prefix': 'MKStringFromMapRect'
    'body': 'MKStringFromMapRect(${1:MKMapRect rect})'
  'MKStringFromMapSize':
    'prefix': 'MKStringFromMapSize'
    'body': 'MKStringFromMapSize(${1:MKMapSize size})'
  'annotation':
    'prefix': 'annotation'
    'body': 'annotation()'
  'calloutOffset':
    'prefix': 'calloutOffset'
    'body': 'calloutOffset()'
  'canShowCallout':
    'prefix': 'canShowCallout'
    'body': 'canShowCallout()'
  'centerOffset':
    'prefix': 'centerOffset'
    'body': 'centerOffset()'
  'dragState':
    'prefix': 'dragState'
    'body': 'dragState()'
  'image':
    'prefix': 'image'
    'body': 'image()'
  'initWithAnnotation:reuseIdentifier:':
    'prefix': 'initWithAnnotation:reuseIdentifier:'
    'body': 'initWithAnnotation(${1:id annotation}, reuseIdentifier:${2:NSString* reuseIdentifier})'
  'isDraggable':
    'prefix': 'isDraggable'
    'body': 'isDraggable()'
  'isEnabled':
    'prefix': 'isEnabled'
    'body': 'isEnabled()'
  'isHighlighted':
    'prefix': 'isHighlighted'
    'body': 'isHighlighted()'
  'isSelected':
    'prefix': 'isSelected'
    'body': 'isSelected()'
  'leftCalloutAccessoryView':
    'prefix': 'leftCalloutAccessoryView'
    'body': 'leftCalloutAccessoryView()'
  'prepareForReuse':
    'prefix': 'prepareForReuse'
    'body': 'prepareForReuse()'
  'reuseIdentifier':
    'prefix': 'reuseIdentifier'
    'body': 'reuseIdentifier()'
  'rightCalloutAccessoryView':
    'prefix': 'rightCalloutAccessoryView'
    'body': 'rightCalloutAccessoryView()'
  'setAnnotation:':
    'prefix': 'setAnnotation:'
    'body': 'setAnnotation(${1:id annotation})'
  'setCalloutOffset:':
    'prefix': 'setCalloutOffset:'
    'body': 'setCalloutOffset(${1:CGPoint calloutOffset})'
  'setCanShowCallout:':
    'prefix': 'setCanShowCallout:'
    'body': 'setCanShowCallout(${1:BOOL canShowCallout})'
  'setCenterOffset:':
    'prefix': 'setCenterOffset:'
    'body': 'setCenterOffset(${1:CGPoint centerOffset})'
  'setDragState:':
    'prefix': 'setDragState:'
    'body': 'setDragState(${1:MKAnnotationViewDragState dragState})'
  'setDragState:animated:':
    'prefix': 'setDragState:animated:'
    'body': 'setDragState(${1:MKAnnotationViewDragState newDragState}, animated:${2:BOOL animated})'
  'setDraggable:':
    'prefix': 'setDraggable:'
    'body': 'setDraggable(${1:BOOL draggable})'
  'setEnabled:':
    'prefix': 'setEnabled:'
    'body': 'setEnabled(${1:BOOL enabled})'
  'setHighlighted:':
    'prefix': 'setHighlighted:'
    'body': 'setHighlighted(${1:BOOL highlighted})'
  'setImage:':
    'prefix': 'setImage:'
    'body': 'setImage(${1:UIImage* image})'
  'setLeftCalloutAccessoryView:':
    'prefix': 'setLeftCalloutAccessoryView:'
    'body': 'setLeftCalloutAccessoryView(${1:UIView* leftCalloutAccessoryView})'
  'setRightCalloutAccessoryView:':
    'prefix': 'setRightCalloutAccessoryView:'
    'body': 'setRightCalloutAccessoryView(${1:UIView* rightCalloutAccessoryView})'
  'setSelected:':
    'prefix': 'setSelected:'
    'body': 'setSelected(${1:BOOL selected})'
  'setSelected:animated:':
    'prefix': 'setSelected:animated:'
    'body': 'setSelected(${1:BOOL selected}, animated:${2:BOOL animated})'
  'boundingMapRect':
    'prefix': 'boundingMapRect'
    'body': 'boundingMapRect()'
  'MKCircle.circleWithCenterCoordinate:radius:':
    'prefix': 'circleWithCenterCoordinate:radius:'
    'body': 'MKCircle.circleWithCenterCoordinate(${1:CLLocationCoordinate2D coord}, radius:${2:CLLocationDistance radius})'
  'MKCircle.circleWithMapRect:':
    'prefix': 'circleWithMapRect:'
    'body': 'MKCircle.circleWithMapRect(${1:MKMapRect mapRect})'
  'coordinate':
    'prefix': 'coordinate'
    'body': 'coordinate()'
  'radius':
    'prefix': 'radius'
    'body': 'radius()'
  'circle':
    'prefix': 'circle'
    'body': 'circle()'
  'initWithCircle:':
    'prefix': 'initWithCircle:'
    'body': 'initWithCircle(${1:MKCircle* circle})'
  'circle':
    'prefix': 'circle'
    'body': 'circle()'
  'initWithCircle:':
    'prefix': 'initWithCircle:'
    'body': 'initWithCircle(${1:MKCircle* circle})'
  'calculateDirectionsWithCompletionHandler:':
    'prefix': 'calculateDirectionsWithCompletionHandler:'
    'body': 'calculateDirectionsWithCompletionHandler(${1:MKDirectionsHandler completionHandler})'
  'calculateETAWithCompletionHandler:':
    'prefix': 'calculateETAWithCompletionHandler:'
    'body': 'calculateETAWithCompletionHandler(${1:MKETAHandler completionHandler})'
  'cancel':
    'prefix': 'cancel'
    'body': 'cancel()'
  'initWithRequest:':
    'prefix': 'initWithRequest:'
    'body': 'initWithRequest(${1:MKDirectionsRequest* request})'
  'isCalculating':
    'prefix': 'isCalculating'
    'body': 'isCalculating()'
  'arrivalDate':
    'prefix': 'arrivalDate'
    'body': 'arrivalDate()'
  'departureDate':
    'prefix': 'departureDate'
    'body': 'departureDate()'
  'destination':
    'prefix': 'destination'
    'body': 'destination()'
  'initWithContentsOfURL:':
    'prefix': 'initWithContentsOfURL:'
    'body': 'initWithContentsOfURL(${1:NSURL* url})'
  'MKDirectionsRequest.isDirectionsRequestURL:':
    'prefix': 'isDirectionsRequestURL:'
    'body': 'MKDirectionsRequest.isDirectionsRequestURL(${1:NSURL* url})'
  'requestsAlternateRoutes':
    'prefix': 'requestsAlternateRoutes'
    'body': 'requestsAlternateRoutes()'
  'setArrivalDate:':
    'prefix': 'setArrivalDate:'
    'body': 'setArrivalDate(${1:NSDate* arrivalDate})'
  'setDepartureDate:':
    'prefix': 'setDepartureDate:'
    'body': 'setDepartureDate(${1:NSDate* departureDate})'
  'setDestination:':
    'prefix': 'setDestination:'
    'body': 'setDestination(${1:MKMapItem* destination})'
  'setRequestsAlternateRoutes:':
    'prefix': 'setRequestsAlternateRoutes:'
    'body': 'setRequestsAlternateRoutes(${1:BOOL requestsAlternateRoutes})'
  'setSource:':
    'prefix': 'setSource:'
    'body': 'setSource(${1:MKMapItem* source})'
  'setTransportType:':
    'prefix': 'setTransportType:'
    'body': 'setTransportType(${1:MKDirectionsTransportType transportType})'
  'source':
    'prefix': 'source'
    'body': 'source()'
  'transportType':
    'prefix': 'transportType'
    'body': 'transportType()'
  'destination':
    'prefix': 'destination'
    'body': 'destination()'
  'routes':
    'prefix': 'routes'
    'body': 'routes()'
  'source':
    'prefix': 'source'
    'body': 'source()'
  'distanceFromString:':
    'prefix': 'distanceFromString:'
    'body': 'distanceFromString(${1:NSString* distance})'
  'locale':
    'prefix': 'locale'
    'body': 'locale()'
  'setLocale:':
    'prefix': 'setLocale:'
    'body': 'setLocale(${1:NSLocale* locale})'
  'setUnitStyle:':
    'prefix': 'setUnitStyle:'
    'body': 'setUnitStyle(${1:MKDistanceFormatterUnitStyle unitStyle})'
  'setUnits:':
    'prefix': 'setUnits:'
    'body': 'setUnits(${1:MKDistanceFormatterUnits units})'
  'stringFromDistance:':
    'prefix': 'stringFromDistance:'
    'body': 'stringFromDistance(${1:CLLocationDistance distance})'
  'unitStyle':
    'prefix': 'unitStyle'
    'body': 'unitStyle()'
  'units':
    'prefix': 'units'
    'body': 'units()'
  'destination':
    'prefix': 'destination'
    'body': 'destination()'
  'expectedTravelTime':
    'prefix': 'expectedTravelTime'
    'body': 'expectedTravelTime()'
  'source':
    'prefix': 'source'
    'body': 'source()'
  'MKGeodesicPolyline.polylineWithCoordinates:count:':
    'prefix': 'polylineWithCoordinates:count:'
    'body': 'MKGeodesicPolyline.polylineWithCoordinates(${1:CLLocationCoordinate2D* coords}, count:${2:NSUInteger count})'
  'MKGeodesicPolyline.polylineWithPoints:count:':
    'prefix': 'polylineWithPoints:count:'
    'body': 'MKGeodesicPolyline.polylineWithPoints(${1:MKMapPoint* points}, count:${2:NSUInteger count})'
  'cancel':
    'prefix': 'cancel'
    'body': 'cancel()'
  'initWithRequest:':
    'prefix': 'initWithRequest:'
    'body': 'initWithRequest(${1:MKLocalSearchRequest* request})'
  'isSearching':
    'prefix': 'isSearching'
    'body': 'isSearching()'
  'startWithCompletionHandler:':
    'prefix': 'startWithCompletionHandler:'
    'body': 'startWithCompletionHandler(${1:MKLocalSearchCompletionHandler completionHandler})'
  'naturalLanguageQuery':
    'prefix': 'naturalLanguageQuery'
    'body': 'naturalLanguageQuery()'
  'region':
    'prefix': 'region'
    'body': 'region()'
  'setNaturalLanguageQuery:':
    'prefix': 'setNaturalLanguageQuery:'
    'body': 'setNaturalLanguageQuery(${1:NSString* naturalLanguageQuery})'
  'setRegion:':
    'prefix': 'setRegion:'
    'body': 'setRegion(${1:MKCoordinateRegion region})'
  'boundingRegion':
    'prefix': 'boundingRegion'
    'body': 'boundingRegion()'
  'mapItems':
    'prefix': 'mapItems'
    'body': 'mapItems()'
  'altitude':
    'prefix': 'altitude'
    'body': 'altitude()'
  'MKMapCamera.camera':
    'prefix': 'camera'
    'body': 'MKMapCamera.camera()'
  'MKMapCamera.cameraLookingAtCenterCoordinate:fromEyeCoordinate:eyeAltitude:':
    'prefix': 'cameraLookingAtCenterCoordinate:fromEyeCoordinate:eyeAltitude:'
    'body': 'MKMapCamera.cameraLookingAtCenterCoordinate(${1:CLLocationCoordinate2D centerCoordinate}, fromEyeCoordinate:${2:CLLocationCoordinate2D eyeCoordinate}, eyeAltitude:${3:CLLocationDistance eyeAltitude})'
  'centerCoordinate':
    'prefix': 'centerCoordinate'
    'body': 'centerCoordinate()'
  'heading':
    'prefix': 'heading'
    'body': 'heading()'
  'pitch':
    'prefix': 'pitch'
    'body': 'pitch()'
  'setAltitude:':
    'prefix': 'setAltitude:'
    'body': 'setAltitude(${1:CLLocationDistance altitude})'
  'setCenterCoordinate:':
    'prefix': 'setCenterCoordinate:'
    'body': 'setCenterCoordinate(${1:CLLocationCoordinate2D centerCoordinate})'
  'setHeading:':
    'prefix': 'setHeading:'
    'body': 'setHeading(${1:CLLocationDirection heading})'
  'setPitch:':
    'prefix': 'setPitch:'
    'body': 'setPitch(${1:CGFloat pitch})'
  'initWithPlacemark:':
    'prefix': 'initWithPlacemark:'
    'body': 'initWithPlacemark(${1:MKPlacemark* placemark})'
  'isCurrentLocation':
    'prefix': 'isCurrentLocation'
    'body': 'isCurrentLocation()'
  'MKMapItem.mapItemForCurrentLocation':
    'prefix': 'mapItemForCurrentLocation'
    'body': 'MKMapItem.mapItemForCurrentLocation()'
  'name':
    'prefix': 'name'
    'body': 'name()'
  'openInMapsWithLaunchOptions:':
    'prefix': 'openInMapsWithLaunchOptions:'
    'body': 'openInMapsWithLaunchOptions(${1:NSDictionary* launchOptions})'
  'MKMapItem.openMapsWithItems:launchOptions:':
    'prefix': 'openMapsWithItems:launchOptions:'
    'body': 'MKMapItem.openMapsWithItems(${1:NSArray* mapItems}, launchOptions:${2:NSDictionary* launchOptions})'
  'phoneNumber':
    'prefix': 'phoneNumber'
    'body': 'phoneNumber()'
  'placemark':
    'prefix': 'placemark'
    'body': 'placemark()'
  'setName:':
    'prefix': 'setName:'
    'body': 'setName(${1:NSString* name})'
  'setPhoneNumber:':
    'prefix': 'setPhoneNumber:'
    'body': 'setPhoneNumber(${1:NSString* phoneNumber})'
  'setUrl:':
    'prefix': 'setUrl:'
    'body': 'setUrl(${1:NSURL* url})'
  'url':
    'prefix': 'url'
    'body': 'url()'
  'image':
    'prefix': 'image'
    'body': 'image()'
  'pointForCoordinate:':
    'prefix': 'pointForCoordinate:'
    'body': 'pointForCoordinate(${1:CLLocationCoordinate2D coordinate})'
  'camera':
    'prefix': 'camera'
    'body': 'camera()'
  'mapRect':
    'prefix': 'mapRect'
    'body': 'mapRect()'
  'mapType':
    'prefix': 'mapType'
    'body': 'mapType()'
  'region':
    'prefix': 'region'
    'body': 'region()'
  'scale':
    'prefix': 'scale'
    'body': 'scale()'
  'setCamera:':
    'prefix': 'setCamera:'
    'body': 'setCamera(${1:MKMapCamera* camera})'
  'setMapRect:':
    'prefix': 'setMapRect:'
    'body': 'setMapRect(${1:MKMapRect mapRect})'
  'setMapType:':
    'prefix': 'setMapType:'
    'body': 'setMapType(${1:MKMapType mapType})'
  'setRegion:':
    'prefix': 'setRegion:'
    'body': 'setRegion(${1:MKCoordinateRegion region})'
  'setScale:':
    'prefix': 'setScale:'
    'body': 'setScale(${1:CGFloat scale})'
  'setShowsBuildings:':
    'prefix': 'setShowsBuildings:'
    'body': 'setShowsBuildings(${1:BOOL showsBuildings})'
  'setShowsPointsOfInterest:':
    'prefix': 'setShowsPointsOfInterest:'
    'body': 'setShowsPointsOfInterest(${1:BOOL showsPointsOfInterest})'
  'setSize:':
    'prefix': 'setSize:'
    'body': 'setSize(${1:CGSize size})'
  'showsBuildings':
    'prefix': 'showsBuildings'
    'body': 'showsBuildings()'
  'showsPointsOfInterest':
    'prefix': 'showsPointsOfInterest'
    'body': 'showsPointsOfInterest()'
  'size':
    'prefix': 'size'
    'body': 'size()'
  'cancel':
    'prefix': 'cancel'
    'body': 'cancel()'
  'initWithOptions:':
    'prefix': 'initWithOptions:'
    'body': 'initWithOptions(${1:MKMapSnapshotOptions* options})'
  'isLoading':
    'prefix': 'isLoading'
    'body': 'isLoading()'
  'startWithCompletionHandler:':
    'prefix': 'startWithCompletionHandler:'
    'body': 'startWithCompletionHandler(${1:MKMapSnapshotCompletionHandler completionHandler})'
  'startWithQueue:completionHandler:':
    'prefix': 'startWithQueue:completionHandler:'
    'body': 'startWithQueue(${1:dispatch_queue_t queue}, completionHandler:${2:MKMapSnapshotCompletionHandler completionHandler})'
  'addAnnotation:':
    'prefix': 'addAnnotation:'
    'body': 'addAnnotation(${1:id annotation})'
  'addAnnotations:':
    'prefix': 'addAnnotations:'
    'body': 'addAnnotations(${1:NSArray* annotations})'
  'addOverlay:':
    'prefix': 'addOverlay:'
    'body': 'addOverlay(${1:id overlay})'
  'addOverlay:level:':
    'prefix': 'addOverlay:level:'
    'body': 'addOverlay(${1:id overlay}, level:${2:MKOverlayLevel level})'
  'addOverlays:':
    'prefix': 'addOverlays:'
    'body': 'addOverlays(${1:NSArray* overlays})'
  'addOverlays:level:':
    'prefix': 'addOverlays:level:'
    'body': 'addOverlays(${1:NSArray* overlays}, level:${2:MKOverlayLevel level})'
  'annotationVisibleRect':
    'prefix': 'annotationVisibleRect'
    'body': 'annotationVisibleRect()'
  'annotations':
    'prefix': 'annotations'
    'body': 'annotations()'
  'annotationsInMapRect:':
    'prefix': 'annotationsInMapRect:'
    'body': 'annotationsInMapRect(${1:MKMapRect mapRect})'
  'camera':
    'prefix': 'camera'
    'body': 'camera()'
  'centerCoordinate':
    'prefix': 'centerCoordinate'
    'body': 'centerCoordinate()'
  'convertCoordinate:toPointToView:':
    'prefix': 'convertCoordinate:toPointToView:'
    'body': 'convertCoordinate(${1:CLLocationCoordinate2D coordinate}, toPointToView:${2:UIView* view})'
  'convertPoint:toCoordinateFromView:':
    'prefix': 'convertPoint:toCoordinateFromView:'
    'body': 'convertPoint(${1:CGPoint point}, toCoordinateFromView:${2:UIView* view})'
  'convertRect:toRegionFromView:':
    'prefix': 'convertRect:toRegionFromView:'
    'body': 'convertRect(${1:CGRect rect}, toRegionFromView:${2:UIView* view})'
  'convertRegion:toRectToView:':
    'prefix': 'convertRegion:toRectToView:'
    'body': 'convertRegion(${1:MKCoordinateRegion region}, toRectToView:${2:UIView* view})'
  'delegate':
    'prefix': 'delegate'
    'body': 'delegate()'
  'dequeueReusableAnnotationViewWithIdentifier:':
    'prefix': 'dequeueReusableAnnotationViewWithIdentifier:'
    'body': 'dequeueReusableAnnotationViewWithIdentifier(${1:NSString* identifier})'
  'deselectAnnotation:animated:':
    'prefix': 'deselectAnnotation:animated:'
    'body': 'deselectAnnotation(${1:id annotation}, animated:${2:BOOL animated})'
  'exchangeOverlay:withOverlay:':
    'prefix': 'exchangeOverlay:withOverlay:'
    'body': 'exchangeOverlay(${1:id overlay1}, withOverlay:${2:id overlay2})'
  'exchangeOverlayAtIndex:withOverlayAtIndex:':
    'prefix': 'exchangeOverlayAtIndex:withOverlayAtIndex:'
    'body': 'exchangeOverlayAtIndex(${1:NSUInteger index1}, withOverlayAtIndex:${2:NSUInteger index2})'
  'insertOverlay:aboveOverlay:':
    'prefix': 'insertOverlay:aboveOverlay:'
    'body': 'insertOverlay(${1:id overlay}, aboveOverlay:${2:id sibling})'
  'insertOverlay:atIndex:':
    'prefix': 'insertOverlay:atIndex:'
    'body': 'insertOverlay(${1:id overlay}, atIndex:${2:NSUInteger index})'
  'insertOverlay:atIndex:level:':
    'prefix': 'insertOverlay:atIndex:level:'
    'body': 'insertOverlay(${1:id overlay}, atIndex:${2:NSUInteger index}, level:${3:MKOverlayLevel level})'
  'insertOverlay:belowOverlay:':
    'prefix': 'insertOverlay:belowOverlay:'
    'body': 'insertOverlay(${1:id overlay}, belowOverlay:${2:id sibling})'
  'isPitchEnabled':
    'prefix': 'isPitchEnabled'
    'body': 'isPitchEnabled()'
  'isRotateEnabled':
    'prefix': 'isRotateEnabled'
    'body': 'isRotateEnabled()'
  'isScrollEnabled':
    'prefix': 'isScrollEnabled'
    'body': 'isScrollEnabled()'
  'isUserLocationVisible':
    'prefix': 'isUserLocationVisible'
    'body': 'isUserLocationVisible()'
  'isZoomEnabled':
    'prefix': 'isZoomEnabled'
    'body': 'isZoomEnabled()'
  'mapRectThatFits:':
    'prefix': 'mapRectThatFits:'
    'body': 'mapRectThatFits(${1:MKMapRect mapRect})'
  'mapRectThatFits:edgePadding:':
    'prefix': 'mapRectThatFits:edgePadding:'
    'body': 'mapRectThatFits(${1:MKMapRect mapRect}, edgePadding:${2:UIEdgeInsets insets})'
  'mapType':
    'prefix': 'mapType'
    'body': 'mapType()'
  'overlays':
    'prefix': 'overlays'
    'body': 'overlays()'
  'overlaysInLevel:':
    'prefix': 'overlaysInLevel:'
    'body': 'overlaysInLevel(${1:MKOverlayLevel level})'
  'region':
    'prefix': 'region'
    'body': 'region()'
  'regionThatFits:':
    'prefix': 'regionThatFits:'
    'body': 'regionThatFits(${1:MKCoordinateRegion region})'
  'removeAnnotation:':
    'prefix': 'removeAnnotation:'
    'body': 'removeAnnotation(${1:id annotation})'
  'removeAnnotations:':
    'prefix': 'removeAnnotations:'
    'body': 'removeAnnotations(${1:NSArray* annotations})'
  'removeOverlay:':
    'prefix': 'removeOverlay:'
    'body': 'removeOverlay(${1:id overlay})'
  'removeOverlays:':
    'prefix': 'removeOverlays:'
    'body': 'removeOverlays(${1:NSArray* overlays})'
  'rendererForOverlay:':
    'prefix': 'rendererForOverlay:'
    'body': 'rendererForOverlay(${1:id overlay})'
  'selectAnnotation:animated:':
    'prefix': 'selectAnnotation:animated:'
    'body': 'selectAnnotation(${1:id annotation}, animated:${2:BOOL animated})'
  'selectedAnnotations':
    'prefix': 'selectedAnnotations'
    'body': 'selectedAnnotations()'
  'setCamera:':
    'prefix': 'setCamera:'
    'body': 'setCamera(${1:MKMapCamera* camera})'
  'setCamera:animated:':
    'prefix': 'setCamera:animated:'
    'body': 'setCamera(${1:MKMapCamera* camera}, animated:${2:BOOL animated})'
  'setCenterCoordinate:':
    'prefix': 'setCenterCoordinate:'
    'body': 'setCenterCoordinate(${1:CLLocationCoordinate2D centerCoordinate})'
  'setCenterCoordinate:animated:':
    'prefix': 'setCenterCoordinate:animated:'
    'body': 'setCenterCoordinate(${1:CLLocationCoordinate2D coordinate}, animated:${2:BOOL animated})'
  'setDelegate:':
    'prefix': 'setDelegate:'
    'body': 'setDelegate(${1:id delegate})'
  'setMapType:':
    'prefix': 'setMapType:'
    'body': 'setMapType(${1:MKMapType mapType})'
  'setPitchEnabled:':
    'prefix': 'setPitchEnabled:'
    'body': 'setPitchEnabled(${1:BOOL pitchEnabled})'
  'setRegion:':
    'prefix': 'setRegion:'
    'body': 'setRegion(${1:MKCoordinateRegion region})'
  'setRegion:animated:':
    'prefix': 'setRegion:animated:'
    'body': 'setRegion(${1:MKCoordinateRegion region}, animated:${2:BOOL animated})'
  'setRotateEnabled:':
    'prefix': 'setRotateEnabled:'
    'body': 'setRotateEnabled(${1:BOOL rotateEnabled})'
  'setScrollEnabled:':
    'prefix': 'setScrollEnabled:'
    'body': 'setScrollEnabled(${1:BOOL scrollEnabled})'
  'setSelectedAnnotations:':
    'prefix': 'setSelectedAnnotations:'
    'body': 'setSelectedAnnotations(${1:NSArray* selectedAnnotations})'
  'setShowsBuildings:':
    'prefix': 'setShowsBuildings:'
    'body': 'setShowsBuildings(${1:BOOL showsBuildings})'
  'setShowsPointsOfInterest:':
    'prefix': 'setShowsPointsOfInterest:'
    'body': 'setShowsPointsOfInterest(${1:BOOL showsPointsOfInterest})'
  'setShowsUserLocation:':
    'prefix': 'setShowsUserLocation:'
    'body': 'setShowsUserLocation(${1:BOOL showsUserLocation})'
  'setUserTrackingMode:':
    'prefix': 'setUserTrackingMode:'
    'body': 'setUserTrackingMode(${1:MKUserTrackingMode userTrackingMode})'
  'setUserTrackingMode:animated:':
    'prefix': 'setUserTrackingMode:animated:'
    'body': 'setUserTrackingMode(${1:MKUserTrackingMode mode}, animated:${2:BOOL animated})'
  'setVisibleMapRect:':
    'prefix': 'setVisibleMapRect:'
    'body': 'setVisibleMapRect(${1:MKMapRect visibleMapRect})'
  'setVisibleMapRect:animated:':
    'prefix': 'setVisibleMapRect:animated:'
    'body': 'setVisibleMapRect(${1:MKMapRect mapRect}, animated:${2:BOOL animate})'
  'setVisibleMapRect:edgePadding:animated:':
    'prefix': 'setVisibleMapRect:edgePadding:animated:'
    'body': 'setVisibleMapRect(${1:MKMapRect mapRect}, edgePadding:${2:UIEdgeInsets insets}, animated:${3:BOOL animate})'
  'setZoomEnabled:':
    'prefix': 'setZoomEnabled:'
    'body': 'setZoomEnabled(${1:BOOL zoomEnabled})'
  'showAnnotations:animated:':
    'prefix': 'showAnnotations:animated:'
    'body': 'showAnnotations(${1:NSArray* annotations}, animated:${2:BOOL animated})'
  'showsBuildings':
    'prefix': 'showsBuildings'
    'body': 'showsBuildings()'
  'showsPointsOfInterest':
    'prefix': 'showsPointsOfInterest'
    'body': 'showsPointsOfInterest()'
  'showsUserLocation':
    'prefix': 'showsUserLocation'
    'body': 'showsUserLocation()'
  'userLocation':
    'prefix': 'userLocation'
    'body': 'userLocation()'
  'userTrackingMode':
    'prefix': 'userTrackingMode'
    'body': 'userTrackingMode()'
  'viewForAnnotation:':
    'prefix': 'viewForAnnotation:'
    'body': 'viewForAnnotation(${1:id annotation})'
  'viewForOverlay:':
    'prefix': 'viewForOverlay:'
    'body': 'viewForOverlay(${1:id overlay})'
  'visibleMapRect':
    'prefix': 'visibleMapRect'
    'body': 'visibleMapRect()'
  'getCoordinates:range:':
    'prefix': 'getCoordinates:range:'
    'body': 'getCoordinates(${1:CLLocationCoordinate2D* coords}, range:${2:NSRange range})'
  'pointCount':
    'prefix': 'pointCount'
    'body': 'pointCount()'
  'points':
    'prefix': 'points'
    'body': 'points()'
  'applyFillPropertiesToContext:atZoomScale:':
    'prefix': 'applyFillPropertiesToContext:atZoomScale:'
    'body': 'applyFillPropertiesToContext(${1:CGContextRef context}, atZoomScale:${2:MKZoomScale zoomScale})'
  'applyStrokePropertiesToContext:atZoomScale:':
    'prefix': 'applyStrokePropertiesToContext:atZoomScale:'
    'body': 'applyStrokePropertiesToContext(${1:CGContextRef context}, atZoomScale:${2:MKZoomScale zoomScale})'
  'createPath':
    'prefix': 'createPath'
    'body': 'createPath()'
  'fillColor':
    'prefix': 'fillColor'
    'body': 'fillColor()'
  'fillPath:inContext:':
    'prefix': 'fillPath:inContext:'
    'body': 'fillPath(${1:CGPathRef path}, inContext:${2:CGContextRef context})'
  'invalidatePath':
    'prefix': 'invalidatePath'
    'body': 'invalidatePath()'
  'lineCap':
    'prefix': 'lineCap'
    'body': 'lineCap()'
  'lineDashPattern':
    'prefix': 'lineDashPattern'
    'body': 'lineDashPattern()'
  'lineDashPhase':
    'prefix': 'lineDashPhase'
    'body': 'lineDashPhase()'
  'lineJoin':
    'prefix': 'lineJoin'
    'body': 'lineJoin()'
  'lineWidth':
    'prefix': 'lineWidth'
    'body': 'lineWidth()'
  'miterLimit':
    'prefix': 'miterLimit'
    'body': 'miterLimit()'
  'path':
    'prefix': 'path'
    'body': 'path()'
  'setFillColor:':
    'prefix': 'setFillColor:'
    'body': 'setFillColor(${1:UIColor* fillColor})'
  'setLineCap:':
    'prefix': 'setLineCap:'
    'body': 'setLineCap(${1:CGLineCap lineCap})'
  'setLineDashPattern:':
    'prefix': 'setLineDashPattern:'
    'body': 'setLineDashPattern(${1:NSArray* lineDashPattern})'
  'setLineDashPhase:':
    'prefix': 'setLineDashPhase:'
    'body': 'setLineDashPhase(${1:CGFloat lineDashPhase})'
  'setLineJoin:':
    'prefix': 'setLineJoin:'
    'body': 'setLineJoin(${1:CGLineJoin lineJoin})'
  'setLineWidth:':
    'prefix': 'setLineWidth:'
    'body': 'setLineWidth(${1:CGFloat lineWidth})'
  'setMiterLimit:':
    'prefix': 'setMiterLimit:'
    'body': 'setMiterLimit(${1:CGFloat miterLimit})'
  'setPath:':
    'prefix': 'setPath:'
    'body': 'setPath(${1:CGPathRef path})'
  'setStrokeColor:':
    'prefix': 'setStrokeColor:'
    'body': 'setStrokeColor(${1:UIColor* strokeColor})'
  'strokeColor':
    'prefix': 'strokeColor'
    'body': 'strokeColor()'
  'strokePath:inContext:':
    'prefix': 'strokePath:inContext:'
    'body': 'strokePath(${1:CGPathRef path}, inContext:${2:CGContextRef context})'
  'applyFillPropertiesToContext:atZoomScale:':
    'prefix': 'applyFillPropertiesToContext:atZoomScale:'
    'body': 'applyFillPropertiesToContext(${1:CGContextRef context}, atZoomScale:${2:MKZoomScale zoomScale})'
  'applyStrokePropertiesToContext:atZoomScale:':
    'prefix': 'applyStrokePropertiesToContext:atZoomScale:'
    'body': 'applyStrokePropertiesToContext(${1:CGContextRef context}, atZoomScale:${2:MKZoomScale zoomScale})'
  'createPath':
    'prefix': 'createPath'
    'body': 'createPath()'
  'fillColor':
    'prefix': 'fillColor'
    'body': 'fillColor()'
  'fillPath:inContext:':
    'prefix': 'fillPath:inContext:'
    'body': 'fillPath(${1:CGPathRef path}, inContext:${2:CGContextRef context})'
  'invalidatePath':
    'prefix': 'invalidatePath'
    'body': 'invalidatePath()'
  'lineCap':
    'prefix': 'lineCap'
    'body': 'lineCap()'
  'lineDashPattern':
    'prefix': 'lineDashPattern'
    'body': 'lineDashPattern()'
  'lineDashPhase':
    'prefix': 'lineDashPhase'
    'body': 'lineDashPhase()'
  'lineJoin':
    'prefix': 'lineJoin'
    'body': 'lineJoin()'
  'lineWidth':
    'prefix': 'lineWidth'
    'body': 'lineWidth()'
  'miterLimit':
    'prefix': 'miterLimit'
    'body': 'miterLimit()'
  'path':
    'prefix': 'path'
    'body': 'path()'
  'setFillColor:':
    'prefix': 'setFillColor:'
    'body': 'setFillColor(${1:UIColor* fillColor})'
  'setLineCap:':
    'prefix': 'setLineCap:'
    'body': 'setLineCap(${1:CGLineCap lineCap})'
  'setLineDashPattern:':
    'prefix': 'setLineDashPattern:'
    'body': 'setLineDashPattern(${1:NSArray* lineDashPattern})'
  'setLineDashPhase:':
    'prefix': 'setLineDashPhase:'
    'body': 'setLineDashPhase(${1:CGFloat lineDashPhase})'
  'setLineJoin:':
    'prefix': 'setLineJoin:'
    'body': 'setLineJoin(${1:CGLineJoin lineJoin})'
  'setLineWidth:':
    'prefix': 'setLineWidth:'
    'body': 'setLineWidth(${1:CGFloat lineWidth})'
  'setMiterLimit:':
    'prefix': 'setMiterLimit:'
    'body': 'setMiterLimit(${1:CGFloat miterLimit})'
  'setPath:':
    'prefix': 'setPath:'
    'body': 'setPath(${1:CGPathRef path})'
  'setStrokeColor:':
    'prefix': 'setStrokeColor:'
    'body': 'setStrokeColor(${1:UIColor* strokeColor})'
  'strokeColor':
    'prefix': 'strokeColor'
    'body': 'strokeColor()'
  'strokePath:inContext:':
    'prefix': 'strokePath:inContext:'
    'body': 'strokePath(${1:CGPathRef path}, inContext:${2:CGContextRef context})'
  'alpha':
    'prefix': 'alpha'
    'body': 'alpha()'
  'canDrawMapRect:zoomScale:':
    'prefix': 'canDrawMapRect:zoomScale:'
    'body': 'canDrawMapRect(${1:MKMapRect mapRect}, zoomScale:${2:MKZoomScale zoomScale})'
  'contentScaleFactor':
    'prefix': 'contentScaleFactor'
    'body': 'contentScaleFactor()'
  'drawMapRect:zoomScale:inContext:':
    'prefix': 'drawMapRect:zoomScale:inContext:'
    'body': 'drawMapRect(${1:MKMapRect mapRect}, zoomScale:${2:MKZoomScale zoomScale}, inContext:${3:CGContextRef context})'
  'initWithOverlay:':
    'prefix': 'initWithOverlay:'
    'body': 'initWithOverlay(${1:id overlay})'
  'mapPointForPoint:':
    'prefix': 'mapPointForPoint:'
    'body': 'mapPointForPoint(${1:CGPoint point})'
  'mapRectForRect:':
    'prefix': 'mapRectForRect:'
    'body': 'mapRectForRect(${1:CGRect rect})'
  'overlay':
    'prefix': 'overlay'
    'body': 'overlay()'
  'pointForMapPoint:':
    'prefix': 'pointForMapPoint:'
    'body': 'pointForMapPoint(${1:MKMapPoint mapPoint})'
  'rectForMapRect:':
    'prefix': 'rectForMapRect:'
    'body': 'rectForMapRect(${1:MKMapRect mapRect})'
  'setAlpha:':
    'prefix': 'setAlpha:'
    'body': 'setAlpha(${1:CGFloat alpha})'
  'setNeedsDisplay':
    'prefix': 'setNeedsDisplay'
    'body': 'setNeedsDisplay()'
  'setNeedsDisplayInMapRect:':
    'prefix': 'setNeedsDisplayInMapRect:'
    'body': 'setNeedsDisplayInMapRect(${1:MKMapRect mapRect})'
  'setNeedsDisplayInMapRect:zoomScale:':
    'prefix': 'setNeedsDisplayInMapRect:zoomScale:'
    'body': 'setNeedsDisplayInMapRect(${1:MKMapRect mapRect}, zoomScale:${2:MKZoomScale zoomScale})'
  'canDrawMapRect:zoomScale:':
    'prefix': 'canDrawMapRect:zoomScale:'
    'body': 'canDrawMapRect(${1:MKMapRect mapRect}, zoomScale:${2:MKZoomScale zoomScale})'
  'drawMapRect:zoomScale:inContext:':
    'prefix': 'drawMapRect:zoomScale:inContext:'
    'body': 'drawMapRect(${1:MKMapRect mapRect}, zoomScale:${2:MKZoomScale zoomScale}, inContext:${3:CGContextRef context})'
  'initWithOverlay:':
    'prefix': 'initWithOverlay:'
    'body': 'initWithOverlay(${1:id overlay})'
  'mapPointForPoint:':
    'prefix': 'mapPointForPoint:'
    'body': 'mapPointForPoint(${1:CGPoint point})'
  'mapRectForRect:':
    'prefix': 'mapRectForRect:'
    'body': 'mapRectForRect(${1:CGRect rect})'
  'overlay':
    'prefix': 'overlay'
    'body': 'overlay()'
  'pointForMapPoint:':
    'prefix': 'pointForMapPoint:'
    'body': 'pointForMapPoint(${1:MKMapPoint mapPoint})'
  'rectForMapRect:':
    'prefix': 'rectForMapRect:'
    'body': 'rectForMapRect(${1:MKMapRect mapRect})'
  'setNeedsDisplayInMapRect:':
    'prefix': 'setNeedsDisplayInMapRect:'
    'body': 'setNeedsDisplayInMapRect(${1:MKMapRect mapRect})'
  'setNeedsDisplayInMapRect:zoomScale:':
    'prefix': 'setNeedsDisplayInMapRect:zoomScale:'
    'body': 'setNeedsDisplayInMapRect(${1:MKMapRect mapRect}, zoomScale:${2:MKZoomScale zoomScale})'
  'animatesDrop':
    'prefix': 'animatesDrop'
    'body': 'animatesDrop()'
  'pinColor':
    'prefix': 'pinColor'
    'body': 'pinColor()'
  'setAnimatesDrop:':
    'prefix': 'setAnimatesDrop:'
    'body': 'setAnimatesDrop(${1:BOOL animatesDrop})'
  'setPinColor:':
    'prefix': 'setPinColor:'
    'body': 'setPinColor(${1:MKPinAnnotationColor pinColor})'
  'countryCode':
    'prefix': 'countryCode'
    'body': 'countryCode()'
  'initWithCoordinate:addressDictionary:':
    'prefix': 'initWithCoordinate:addressDictionary:'
    'body': 'initWithCoordinate(${1:CLLocationCoordinate2D coordinate}, addressDictionary:${2:NSDictionary* addressDictionary})'
  'coordinate':
    'prefix': 'coordinate'
    'body': 'coordinate()'
  'setCoordinate:':
    'prefix': 'setCoordinate:'
    'body': 'setCoordinate(${1:CLLocationCoordinate2D coordinate})'
  'interiorPolygons':
    'prefix': 'interiorPolygons'
    'body': 'interiorPolygons()'
  'MKPolygon.polygonWithCoordinates:count:':
    'prefix': 'polygonWithCoordinates:count:'
    'body': 'MKPolygon.polygonWithCoordinates(${1:CLLocationCoordinate2D* coords}, count:${2:NSUInteger count})'
  'MKPolygon.polygonWithCoordinates:count:interiorPolygons:':
    'prefix': 'polygonWithCoordinates:count:interiorPolygons:'
    'body': 'MKPolygon.polygonWithCoordinates(${1:CLLocationCoordinate2D* coords}, count:${2:NSUInteger count}, interiorPolygons:${3:NSArray* interiorPolygons})'
  'MKPolygon.polygonWithPoints:count:':
    'prefix': 'polygonWithPoints:count:'
    'body': 'MKPolygon.polygonWithPoints(${1:MKMapPoint* points}, count:${2:NSUInteger count})'
  'MKPolygon.polygonWithPoints:count:interiorPolygons:':
    'prefix': 'polygonWithPoints:count:interiorPolygons:'
    'body': 'MKPolygon.polygonWithPoints(${1:MKMapPoint* points}, count:${2:NSUInteger count}, interiorPolygons:${3:NSArray* interiorPolygons})'
  'initWithPolygon:':
    'prefix': 'initWithPolygon:'
    'body': 'initWithPolygon(${1:MKPolygon* polygon})'
  'polygon':
    'prefix': 'polygon'
    'body': 'polygon()'
  'initWithPolygon:':
    'prefix': 'initWithPolygon:'
    'body': 'initWithPolygon(${1:MKPolygon* polygon})'
  'polygon':
    'prefix': 'polygon'
    'body': 'polygon()'
  'MKPolyline.polylineWithCoordinates:count:':
    'prefix': 'polylineWithCoordinates:count:'
    'body': 'MKPolyline.polylineWithCoordinates(${1:CLLocationCoordinate2D* coords}, count:${2:NSUInteger count})'
  'MKPolyline.polylineWithPoints:count:':
    'prefix': 'polylineWithPoints:count:'
    'body': 'MKPolyline.polylineWithPoints(${1:MKMapPoint* points}, count:${2:NSUInteger count})'
  'initWithPolyline:':
    'prefix': 'initWithPolyline:'
    'body': 'initWithPolyline(${1:MKPolyline* polyline})'
  'polyline':
    'prefix': 'polyline'
    'body': 'polyline()'
  'initWithPolyline:':
    'prefix': 'initWithPolyline:'
    'body': 'initWithPolyline(${1:MKPolyline* polyline})'
  'polyline':
    'prefix': 'polyline'
    'body': 'polyline()'
  'cancel':
    'prefix': 'cancel'
    'body': 'cancel()'
  'coordinate':
    'prefix': 'coordinate'
    'body': 'coordinate()'
  'delegate':
    'prefix': 'delegate'
    'body': 'delegate()'
  'initWithCoordinate:':
    'prefix': 'initWithCoordinate:'
    'body': 'initWithCoordinate(${1:CLLocationCoordinate2D coordinate})'
  'isQuerying':
    'prefix': 'isQuerying'
    'body': 'isQuerying()'
  'placemark':
    'prefix': 'placemark'
    'body': 'placemark()'
  'setDelegate:':
    'prefix': 'setDelegate:'
    'body': 'setDelegate(${1:id delegate})'
  'start':
    'prefix': 'start'
    'body': 'start()'
  'advisoryNotices':
    'prefix': 'advisoryNotices'
    'body': 'advisoryNotices()'
  'distance':
    'prefix': 'distance'
    'body': 'distance()'
  'expectedTravelTime':
    'prefix': 'expectedTravelTime'
    'body': 'expectedTravelTime()'
  'name':
    'prefix': 'name'
    'body': 'name()'
  'polyline':
    'prefix': 'polyline'
    'body': 'polyline()'
  'steps':
    'prefix': 'steps'
    'body': 'steps()'
  'transportType':
    'prefix': 'transportType'
    'body': 'transportType()'
  'distance':
    'prefix': 'distance'
    'body': 'distance()'
  'instructions':
    'prefix': 'instructions'
    'body': 'instructions()'
  'notice':
    'prefix': 'notice'
    'body': 'notice()'
  'polyline':
    'prefix': 'polyline'
    'body': 'polyline()'
  'transportType':
    'prefix': 'transportType'
    'body': 'transportType()'
  'setSubtitle:':
    'prefix': 'setSubtitle:'
    'body': 'setSubtitle(${1:NSString* subtitle})'
  'setTitle:':
    'prefix': 'setTitle:'
    'body': 'setTitle(${1:NSString* title})'
  'subtitle':
    'prefix': 'subtitle'
    'body': 'subtitle()'
  'title':
    'prefix': 'title'
    'body': 'title()'
  'URLForTilePath:':
    'prefix': 'URLForTilePath:'
    'body': 'URLForTilePath(${1:MKTileOverlayPath path})'
  'URLTemplate':
    'prefix': 'URLTemplate'
    'body': 'URLTemplate()'
  'canReplaceMapContent':
    'prefix': 'canReplaceMapContent'
    'body': 'canReplaceMapContent()'
  'initWithURLTemplate:':
    'prefix': 'initWithURLTemplate:'
    'body': 'initWithURLTemplate(${1:NSString* URLTemplate})'
  'isGeometryFlipped':
    'prefix': 'isGeometryFlipped'
    'body': 'isGeometryFlipped()'
  'loadTileAtPath:result:':
    'prefix': 'loadTileAtPath:result:'
    'body': 'loadTileAtPath(${1:MKTileOverlayPath path}, result:${2:void (^)(NSData *, NSError *) result})'
  'maximumZ':
    'prefix': 'maximumZ'
    'body': 'maximumZ()'
  'minimumZ':
    'prefix': 'minimumZ'
    'body': 'minimumZ()'
  'setCanReplaceMapContent:':
    'prefix': 'setCanReplaceMapContent:'
    'body': 'setCanReplaceMapContent(${1:BOOL canReplaceMapContent})'
  'setGeometryFlipped:':
    'prefix': 'setGeometryFlipped:'
    'body': 'setGeometryFlipped(${1:BOOL geometryFlipped})'
  'setMaximumZ:':
    'prefix': 'setMaximumZ:'
    'body': 'setMaximumZ(${1:NSInteger maximumZ})'
  'setMinimumZ:':
    'prefix': 'setMinimumZ:'
    'body': 'setMinimumZ(${1:NSInteger minimumZ})'
  'setTileSize:':
    'prefix': 'setTileSize:'
    'body': 'setTileSize(${1:CGSize tileSize})'
  'tileSize':
    'prefix': 'tileSize'
    'body': 'tileSize()'
  'initWithTileOverlay:':
    'prefix': 'initWithTileOverlay:'
    'body': 'initWithTileOverlay(${1:MKTileOverlay* overlay})'
  'reloadData':
    'prefix': 'reloadData'
    'body': 'reloadData()'
  'heading':
    'prefix': 'heading'
    'body': 'heading()'
  'isUpdating':
    'prefix': 'isUpdating'
    'body': 'isUpdating()'
  'location':
    'prefix': 'location'
    'body': 'location()'
  'setSubtitle:':
    'prefix': 'setSubtitle:'
    'body': 'setSubtitle(${1:NSString* subtitle})'
  'setTitle:':
    'prefix': 'setTitle:'
    'body': 'setTitle(${1:NSString* title})'
  'subtitle':
    'prefix': 'subtitle'
    'body': 'subtitle()'
  'title':
    'prefix': 'title'
    'body': 'title()'
  'initWithMapView:':
    'prefix': 'initWithMapView:'
    'body': 'initWithMapView(${1:MKMapView* mapView})'
  'mapView':
    'prefix': 'mapView'
    'body': 'mapView()'
  'setMapView:':
    'prefix': 'setMapView:'
    'body': 'setMapView(${1:MKMapView* mapView})'
  'boundingMapRect':
    'prefix': 'boundingMapRect'
    'body': 'boundingMapRect()'
  'canReplaceMapContent':
    'prefix': 'canReplaceMapContent'
    'body': 'canReplaceMapContent()'
  'coordinate':
    'prefix': 'coordinate'
    'body': 'coordinate()'
  'intersectsMapRect:':
    'prefix': 'intersectsMapRect:'
    'body': 'intersectsMapRect(${1:MKMapRect mapRect})'
  'mapView:annotationView:calloutAccessoryControlTapped:':
    'prefix': 'mapView:annotationView:calloutAccessoryControlTapped:'
    'body': 'mapView(${1:MKMapView* mapView}, annotationView:${2:MKAnnotationView* view}, calloutAccessoryControlTapped:${3:UIControl* control})'
  'mapView:annotationView:didChangeDragState:fromOldState:':
    'prefix': 'mapView:annotationView:didChangeDragState:fromOldState:'
    'body': 'mapView(${1:MKMapView* mapView}, annotationView:${2:MKAnnotationView* view}, didChangeDragState:${3:MKAnnotationViewDragState newState}, fromOldState:${4:MKAnnotationViewDragState oldState})'
  'mapView:didAddAnnotationViews:':
    'prefix': 'mapView:didAddAnnotationViews:'
    'body': 'mapView(${1:MKMapView* mapView}, didAddAnnotationViews:${2:NSArray* views})'
  'mapView:didAddOverlayRenderers:':
    'prefix': 'mapView:didAddOverlayRenderers:'
    'body': 'mapView(${1:MKMapView* mapView}, didAddOverlayRenderers:${2:NSArray* renderers})'
  'mapView:didAddOverlayViews:':
    'prefix': 'mapView:didAddOverlayViews:'
    'body': 'mapView(${1:MKMapView* mapView}, didAddOverlayViews:${2:NSArray* overlayViews})'
  'mapView:didChangeUserTrackingMode:animated:':
    'prefix': 'mapView:didChangeUserTrackingMode:animated:'
    'body': 'mapView(${1:MKMapView* mapView}, didChangeUserTrackingMode:${2:MKUserTrackingMode mode}, animated:${3:BOOL animated})'
  'mapView:didDeselectAnnotationView:':
    'prefix': 'mapView:didDeselectAnnotationView:'
    'body': 'mapView(${1:MKMapView* mapView}, didDeselectAnnotationView:${2:MKAnnotationView* view})'
  'mapView:didFailToLocateUserWithError:':
    'prefix': 'mapView:didFailToLocateUserWithError:'
    'body': 'mapView(${1:MKMapView* mapView}, didFailToLocateUserWithError:${2:NSError* error})'
  'mapView:didSelectAnnotationView:':
    'prefix': 'mapView:didSelectAnnotationView:'
    'body': 'mapView(${1:MKMapView* mapView}, didSelectAnnotationView:${2:MKAnnotationView* view})'
  'mapView:didUpdateUserLocation:':
    'prefix': 'mapView:didUpdateUserLocation:'
    'body': 'mapView(${1:MKMapView* mapView}, didUpdateUserLocation:${2:MKUserLocation* userLocation})'
  'mapView:regionDidChangeAnimated:':
    'prefix': 'mapView:regionDidChangeAnimated:'
    'body': 'mapView(${1:MKMapView* mapView}, regionDidChangeAnimated:${2:BOOL animated})'
  'mapView:regionWillChangeAnimated:':
    'prefix': 'mapView:regionWillChangeAnimated:'
    'body': 'mapView(${1:MKMapView* mapView}, regionWillChangeAnimated:${2:BOOL animated})'
  'mapView:rendererForOverlay:':
    'prefix': 'mapView:rendererForOverlay:'
    'body': 'mapView(${1:MKMapView* mapView}, rendererForOverlay:${2:id overlay})'
  'mapView:viewForAnnotation:':
    'prefix': 'mapView:viewForAnnotation:'
    'body': 'mapView(${1:MKMapView* mapView}, viewForAnnotation:${2:id annotation})'
  'mapView:viewForOverlay:':
    'prefix': 'mapView:viewForOverlay:'
    'body': 'mapView(${1:MKMapView* mapView}, viewForOverlay:${2:id overlay})'
  'mapViewDidFailLoadingMap:withError:':
    'prefix': 'mapViewDidFailLoadingMap:withError:'
    'body': 'mapViewDidFailLoadingMap(${1:MKMapView* mapView}, withError:${2:NSError* error})'
  'mapViewDidFinishLoadingMap:':
    'prefix': 'mapViewDidFinishLoadingMap:'
    'body': 'mapViewDidFinishLoadingMap(${1:MKMapView* mapView})'
  'mapViewDidFinishRenderingMap:fullyRendered:':
    'prefix': 'mapViewDidFinishRenderingMap:fullyRendered:'
    'body': 'mapViewDidFinishRenderingMap(${1:MKMapView* mapView}, fullyRendered:${2:BOOL fullyRendered})'
  'mapViewDidStopLocatingUser:':
    'prefix': 'mapViewDidStopLocatingUser:'
    'body': 'mapViewDidStopLocatingUser(${1:MKMapView* mapView})'
  'mapViewWillStartLoadingMap:':
    'prefix': 'mapViewWillStartLoadingMap:'
    'body': 'mapViewWillStartLoadingMap(${1:MKMapView* mapView})'
  'mapViewWillStartLocatingUser:':
    'prefix': 'mapViewWillStartLocatingUser:'
    'body': 'mapViewWillStartLocatingUser(${1:MKMapView* mapView})'
  'mapViewWillStartRenderingMap:':
    'prefix': 'mapViewWillStartRenderingMap:'
    'body': 'mapViewWillStartRenderingMap(${1:MKMapView* mapView})'
  'reverseGeocoder:didFailWithError:':
    'prefix': 'reverseGeocoder:didFailWithError:'
    'body': 'reverseGeocoder(${1:MKReverseGeocoder* geocoder}, didFailWithError:${2:NSError* error})'
  'reverseGeocoder:didFindPlacemark:':
    'prefix': 'reverseGeocoder:didFindPlacemark:'
    'body': 'reverseGeocoder(${1:MKReverseGeocoder* geocoder}, didFindPlacemark:${2:MKPlacemark* placemark})'
  'setCoordinate:':
    'prefix': 'setCoordinate:'
    'body': 'setCoordinate(${1:CLLocationCoordinate2D newCoordinate})'
  'subtitle':
    'prefix': 'subtitle'
    'body': 'subtitle()'
  'title':
    'prefix': 'title'
    'body': 'title()'
  'MKCoordinateSpanValue':
    'prefix': 'MKCoordinateSpanValue'
    'body': 'MKCoordinateSpanValue()'
  'MKCoordinateValue':
    'prefix': 'MKCoordinateValue'
    'body': 'MKCoordinateValue()'
  'NSValue.valueWithMKCoordinate:':
    'prefix': 'valueWithMKCoordinate:'
    'body': 'NSValue.valueWithMKCoordinate(${1:CLLocationCoordinate2D coordinate})'
  'NSValue.valueWithMKCoordinateSpan:':
    'prefix': 'valueWithMKCoordinateSpan:'
    'body': 'NSValue.valueWithMKCoordinateSpan(${1:MKCoordinateSpan span})'
  'coordinate':
    'prefix': 'coordinate'
    'body': 'coordinate()'
  'setCoordinate:':
    'prefix': 'setCoordinate:'
    'body': 'setCoordinate(${1:CLLocationCoordinate2D newCoordinate})'
  'subtitle':
    'prefix': 'subtitle'
    'body': 'subtitle()'
  'title':
    'prefix': 'title'
    'body': 'title()'
  'mapView:annotationView:calloutAccessoryControlTapped:':
    'prefix': 'mapView:annotationView:calloutAccessoryControlTapped:'
    'body': 'mapView(${1:MKMapView* mapView}, annotationView:${2:MKAnnotationView* view}, calloutAccessoryControlTapped:${3:UIControl* control})'
  'mapView:annotationView:didChangeDragState:fromOldState:':
    'prefix': 'mapView:annotationView:didChangeDragState:fromOldState:'
    'body': 'mapView(${1:MKMapView* mapView}, annotationView:${2:MKAnnotationView* view}, didChangeDragState:${3:MKAnnotationViewDragState newState}, fromOldState:${4:MKAnnotationViewDragState oldState})'
  'mapView:didAddAnnotationViews:':
    'prefix': 'mapView:didAddAnnotationViews:'
    'body': 'mapView(${1:MKMapView* mapView}, didAddAnnotationViews:${2:NSArray* views})'
  'mapView:didAddOverlayRenderers:':
    'prefix': 'mapView:didAddOverlayRenderers:'
    'body': 'mapView(${1:MKMapView* mapView}, didAddOverlayRenderers:${2:NSArray* renderers})'
  'mapView:didAddOverlayViews:':
    'prefix': 'mapView:didAddOverlayViews:'
    'body': 'mapView(${1:MKMapView* mapView}, didAddOverlayViews:${2:NSArray* overlayViews})'
  'mapView:didChangeUserTrackingMode:animated:':
    'prefix': 'mapView:didChangeUserTrackingMode:animated:'
    'body': 'mapView(${1:MKMapView* mapView}, didChangeUserTrackingMode:${2:MKUserTrackingMode mode}, animated:${3:BOOL animated})'
  'mapView:didDeselectAnnotationView:':
    'prefix': 'mapView:didDeselectAnnotationView:'
    'body': 'mapView(${1:MKMapView* mapView}, didDeselectAnnotationView:${2:MKAnnotationView* view})'
  'mapView:didFailToLocateUserWithError:':
    'prefix': 'mapView:didFailToLocateUserWithError:'
    'body': 'mapView(${1:MKMapView* mapView}, didFailToLocateUserWithError:${2:NSError* error})'
  'mapView:didSelectAnnotationView:':
    'prefix': 'mapView:didSelectAnnotationView:'
    'body': 'mapView(${1:MKMapView* mapView}, didSelectAnnotationView:${2:MKAnnotationView* view})'
  'mapView:didUpdateUserLocation:':
    'prefix': 'mapView:didUpdateUserLocation:'
    'body': 'mapView(${1:MKMapView* mapView}, didUpdateUserLocation:${2:MKUserLocation* userLocation})'
  'mapView:regionDidChangeAnimated:':
    'prefix': 'mapView:regionDidChangeAnimated:'
    'body': 'mapView(${1:MKMapView* mapView}, regionDidChangeAnimated:${2:BOOL animated})'
  'mapView:regionWillChangeAnimated:':
    'prefix': 'mapView:regionWillChangeAnimated:'
    'body': 'mapView(${1:MKMapView* mapView}, regionWillChangeAnimated:${2:BOOL animated})'
  'mapView:rendererForOverlay:':
    'prefix': 'mapView:rendererForOverlay:'
    'body': 'mapView(${1:MKMapView* mapView}, rendererForOverlay:${2:id overlay})'
  'mapView:viewForAnnotation:':
    'prefix': 'mapView:viewForAnnotation:'
    'body': 'mapView(${1:MKMapView* mapView}, viewForAnnotation:${2:id annotation})'
  'mapView:viewForOverlay:':
    'prefix': 'mapView:viewForOverlay:'
    'body': 'mapView(${1:MKMapView* mapView}, viewForOverlay:${2:id overlay})'
  'mapViewDidFailLoadingMap:withError:':
    'prefix': 'mapViewDidFailLoadingMap:withError:'
    'body': 'mapViewDidFailLoadingMap(${1:MKMapView* mapView}, withError:${2:NSError* error})'
  'mapViewDidFinishLoadingMap:':
    'prefix': 'mapViewDidFinishLoadingMap:'
    'body': 'mapViewDidFinishLoadingMap(${1:MKMapView* mapView})'
  'mapViewDidFinishRenderingMap:fullyRendered:':
    'prefix': 'mapViewDidFinishRenderingMap:fullyRendered:'
    'body': 'mapViewDidFinishRenderingMap(${1:MKMapView* mapView}, fullyRendered:${2:BOOL fullyRendered})'
  'mapViewDidStopLocatingUser:':
    'prefix': 'mapViewDidStopLocatingUser:'
    'body': 'mapViewDidStopLocatingUser(${1:MKMapView* mapView})'
  'mapViewWillStartLoadingMap:':
    'prefix': 'mapViewWillStartLoadingMap:'
    'body': 'mapViewWillStartLoadingMap(${1:MKMapView* mapView})'
  'mapViewWillStartLocatingUser:':
    'prefix': 'mapViewWillStartLocatingUser:'
    'body': 'mapViewWillStartLocatingUser(${1:MKMapView* mapView})'
  'mapViewWillStartRenderingMap:':
    'prefix': 'mapViewWillStartRenderingMap:'
    'body': 'mapViewWillStartRenderingMap(${1:MKMapView* mapView})'
  'boundingMapRect':
    'prefix': 'boundingMapRect'
    'body': 'boundingMapRect()'
  'canReplaceMapContent':
    'prefix': 'canReplaceMapContent'
    'body': 'canReplaceMapContent()'
  'coordinate':
    'prefix': 'coordinate'
    'body': 'coordinate()'
  'intersectsMapRect:':
    'prefix': 'intersectsMapRect:'
    'body': 'intersectsMapRect(${1:MKMapRect mapRect})'
  'reverseGeocoder:didFailWithError:':
    'prefix': 'reverseGeocoder:didFailWithError:'
    'body': 'reverseGeocoder(${1:MKReverseGeocoder* geocoder}, didFailWithError:${2:NSError* error})'
  'reverseGeocoder:didFindPlacemark:':
    'prefix': 'reverseGeocoder:didFindPlacemark:'
    'body': 'reverseGeocoder(${1:MKReverseGeocoder* geocoder}, didFindPlacemark:${2:MKPlacemark* placemark})'
