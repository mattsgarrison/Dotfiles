'.source.rubymotion':
  'EKErrorDomain (NSString*)':
    'prefix': 'EKErrorDomain'
    'body': 'EKErrorDomain'
  'EKEventStoreChangedNotification (NSString*)':
    'prefix': 'EKEventStoreChangedNotification'
    'body': 'EKEventStoreChangedNotification'
  'EKAlarmProximityEnter (1)':
    'prefix': 'EKAlarmProximityEnter'
    'body': 'EKAlarmProximityEnter'
  'EKAlarmProximityLeave (2)':
    'prefix': 'EKAlarmProximityLeave'
    'body': 'EKAlarmProximityLeave'
  'EKAlarmProximityNone (0)':
    'prefix': 'EKAlarmProximityNone'
    'body': 'EKAlarmProximityNone'
  'EKAuthorizationStatusAuthorized (3)':
    'prefix': 'EKAuthorizationStatusAuthorized'
    'body': 'EKAuthorizationStatusAuthorized'
  'EKAuthorizationStatusDenied (2)':
    'prefix': 'EKAuthorizationStatusDenied'
    'body': 'EKAuthorizationStatusDenied'
  'EKAuthorizationStatusNotDetermined (0)':
    'prefix': 'EKAuthorizationStatusNotDetermined'
    'body': 'EKAuthorizationStatusNotDetermined'
  'EKAuthorizationStatusRestricted (1)':
    'prefix': 'EKAuthorizationStatusRestricted'
    'body': 'EKAuthorizationStatusRestricted'
  'EKCalendarEventAvailabilityBusy (1)':
    'prefix': 'EKCalendarEventAvailabilityBusy'
    'body': 'EKCalendarEventAvailabilityBusy'
  'EKCalendarEventAvailabilityFree (2)':
    'prefix': 'EKCalendarEventAvailabilityFree'
    'body': 'EKCalendarEventAvailabilityFree'
  'EKCalendarEventAvailabilityNone (0)':
    'prefix': 'EKCalendarEventAvailabilityNone'
    'body': 'EKCalendarEventAvailabilityNone'
  'EKCalendarEventAvailabilityTentative (4)':
    'prefix': 'EKCalendarEventAvailabilityTentative'
    'body': 'EKCalendarEventAvailabilityTentative'
  'EKCalendarEventAvailabilityUnavailable (8)':
    'prefix': 'EKCalendarEventAvailabilityUnavailable'
    'body': 'EKCalendarEventAvailabilityUnavailable'
  'EKCalendarTypeBirthday (4)':
    'prefix': 'EKCalendarTypeBirthday'
    'body': 'EKCalendarTypeBirthday'
  'EKCalendarTypeCalDAV (1)':
    'prefix': 'EKCalendarTypeCalDAV'
    'body': 'EKCalendarTypeCalDAV'
  'EKCalendarTypeExchange (2)':
    'prefix': 'EKCalendarTypeExchange'
    'body': 'EKCalendarTypeExchange'
  'EKCalendarTypeLocal (0)':
    'prefix': 'EKCalendarTypeLocal'
    'body': 'EKCalendarTypeLocal'
  'EKCalendarTypeSubscription (3)':
    'prefix': 'EKCalendarTypeSubscription'
    'body': 'EKCalendarTypeSubscription'
  'EKEntityMaskEvent (1)':
    'prefix': 'EKEntityMaskEvent'
    'body': 'EKEntityMaskEvent'
  'EKEntityMaskReminder (2)':
    'prefix': 'EKEntityMaskReminder'
    'body': 'EKEntityMaskReminder'
  'EKEntityTypeEvent (0)':
    'prefix': 'EKEntityTypeEvent'
    'body': 'EKEntityTypeEvent'
  'EKEntityTypeReminder (1)':
    'prefix': 'EKEntityTypeReminder'
    'body': 'EKEntityTypeReminder'
  'EKErrorAlarmGreaterThanRecurrence (8)':
    'prefix': 'EKErrorAlarmGreaterThanRecurrence'
    'body': 'EKErrorAlarmGreaterThanRecurrence'
  'EKErrorAlarmProximityNotSupported (21)':
    'prefix': 'EKErrorAlarmProximityNotSupported'
    'body': 'EKErrorAlarmProximityNotSupported'
  'EKErrorCalendarDoesNotAllowEvents (22)':
    'prefix': 'EKErrorCalendarDoesNotAllowEvents'
    'body': 'EKErrorCalendarDoesNotAllowEvents'
  'EKErrorCalendarDoesNotAllowReminders (23)':
    'prefix': 'EKErrorCalendarDoesNotAllowReminders'
    'body': 'EKErrorCalendarDoesNotAllowReminders'
  'EKErrorCalendarHasNoSource (14)':
    'prefix': 'EKErrorCalendarHasNoSource'
    'body': 'EKErrorCalendarHasNoSource'
  'EKErrorCalendarIsImmutable (16)':
    'prefix': 'EKErrorCalendarIsImmutable'
    'body': 'EKErrorCalendarIsImmutable'
  'EKErrorCalendarReadOnly (6)':
    'prefix': 'EKErrorCalendarReadOnly'
    'body': 'EKErrorCalendarReadOnly'
  'EKErrorCalendarSourceCannotBeModified (15)':
    'prefix': 'EKErrorCalendarSourceCannotBeModified'
    'body': 'EKErrorCalendarSourceCannotBeModified'
  'EKErrorDatesInverted (4)':
    'prefix': 'EKErrorDatesInverted'
    'body': 'EKErrorDatesInverted'
  'EKErrorDurationGreaterThanRecurrence (7)':
    'prefix': 'EKErrorDurationGreaterThanRecurrence'
    'body': 'EKErrorDurationGreaterThanRecurrence'
  'EKErrorEventNotMutable (0)':
    'prefix': 'EKErrorEventNotMutable'
    'body': 'EKErrorEventNotMutable'
  'EKErrorInternalFailure (5)':
    'prefix': 'EKErrorInternalFailure'
    'body': 'EKErrorInternalFailure'
  'EKErrorInvalidEntityType (26)':
    'prefix': 'EKErrorInvalidEntityType'
    'body': 'EKErrorInvalidEntityType'
  'EKErrorInvalidSpan (13)':
    'prefix': 'EKErrorInvalidSpan'
    'body': 'EKErrorInvalidSpan'
  'EKErrorInvitesCannotBeMoved (12)':
    'prefix': 'EKErrorInvitesCannotBeMoved'
    'body': 'EKErrorInvitesCannotBeMoved'
  'EKErrorLast (27)':
    'prefix': 'EKErrorLast'
    'body': 'EKErrorLast'
  'EKErrorNoCalendar (1)':
    'prefix': 'EKErrorNoCalendar'
    'body': 'EKErrorNoCalendar'
  'EKErrorNoEndDate (3)':
    'prefix': 'EKErrorNoEndDate'
    'body': 'EKErrorNoEndDate'
  'EKErrorNoStartDate (2)':
    'prefix': 'EKErrorNoStartDate'
    'body': 'EKErrorNoStartDate'
  'EKErrorObjectBelongsToDifferentStore (11)':
    'prefix': 'EKErrorObjectBelongsToDifferentStore'
    'body': 'EKErrorObjectBelongsToDifferentStore'
  'EKErrorPriorityIsInvalid (25)':
    'prefix': 'EKErrorPriorityIsInvalid'
    'body': 'EKErrorPriorityIsInvalid'
  'EKErrorRecurringReminderRequiresDueDate (18)':
    'prefix': 'EKErrorRecurringReminderRequiresDueDate'
    'body': 'EKErrorRecurringReminderRequiresDueDate'
  'EKErrorReminderLocationsNotSupported (20)':
    'prefix': 'EKErrorReminderLocationsNotSupported'
    'body': 'EKErrorReminderLocationsNotSupported'
  'EKErrorSourceDoesNotAllowCalendarAddDelete (17)':
    'prefix': 'EKErrorSourceDoesNotAllowCalendarAddDelete'
    'body': 'EKErrorSourceDoesNotAllowCalendarAddDelete'
  'EKErrorSourceDoesNotAllowReminders (24)':
    'prefix': 'EKErrorSourceDoesNotAllowReminders'
    'body': 'EKErrorSourceDoesNotAllowReminders'
  'EKErrorStartDateCollidesWithOtherOccurrence (10)':
    'prefix': 'EKErrorStartDateCollidesWithOtherOccurrence'
    'body': 'EKErrorStartDateCollidesWithOtherOccurrence'
  'EKErrorStartDateTooFarInFuture (9)':
    'prefix': 'EKErrorStartDateTooFarInFuture'
    'body': 'EKErrorStartDateTooFarInFuture'
  'EKErrorStructuredLocationsNotSupported (19)':
    'prefix': 'EKErrorStructuredLocationsNotSupported'
    'body': 'EKErrorStructuredLocationsNotSupported'
  'EKEventAvailabilityBusy (0)':
    'prefix': 'EKEventAvailabilityBusy'
    'body': 'EKEventAvailabilityBusy'
  'EKEventAvailabilityFree (1)':
    'prefix': 'EKEventAvailabilityFree'
    'body': 'EKEventAvailabilityFree'
  'EKEventAvailabilityNotSupported (-1)':
    'prefix': 'EKEventAvailabilityNotSupported'
    'body': 'EKEventAvailabilityNotSupported'
  'EKEventAvailabilityTentative (2)':
    'prefix': 'EKEventAvailabilityTentative'
    'body': 'EKEventAvailabilityTentative'
  'EKEventAvailabilityUnavailable (3)':
    'prefix': 'EKEventAvailabilityUnavailable'
    'body': 'EKEventAvailabilityUnavailable'
  'EKEventStatusCanceled (3)':
    'prefix': 'EKEventStatusCanceled'
    'body': 'EKEventStatusCanceled'
  'EKEventStatusConfirmed (1)':
    'prefix': 'EKEventStatusConfirmed'
    'body': 'EKEventStatusConfirmed'
  'EKEventStatusNone (0)':
    'prefix': 'EKEventStatusNone'
    'body': 'EKEventStatusNone'
  'EKEventStatusTentative (2)':
    'prefix': 'EKEventStatusTentative'
    'body': 'EKEventStatusTentative'
  'EKFriday (6)':
    'prefix': 'EKFriday'
    'body': 'EKFriday'
  'EKMonday (2)':
    'prefix': 'EKMonday'
    'body': 'EKMonday'
  'EKParticipantRoleChair (3)':
    'prefix': 'EKParticipantRoleChair'
    'body': 'EKParticipantRoleChair'
  'EKParticipantRoleNonParticipant (4)':
    'prefix': 'EKParticipantRoleNonParticipant'
    'body': 'EKParticipantRoleNonParticipant'
  'EKParticipantRoleOptional (2)':
    'prefix': 'EKParticipantRoleOptional'
    'body': 'EKParticipantRoleOptional'
  'EKParticipantRoleRequired (1)':
    'prefix': 'EKParticipantRoleRequired'
    'body': 'EKParticipantRoleRequired'
  'EKParticipantRoleUnknown (0)':
    'prefix': 'EKParticipantRoleUnknown'
    'body': 'EKParticipantRoleUnknown'
  'EKParticipantStatusAccepted (2)':
    'prefix': 'EKParticipantStatusAccepted'
    'body': 'EKParticipantStatusAccepted'
  'EKParticipantStatusCompleted (6)':
    'prefix': 'EKParticipantStatusCompleted'
    'body': 'EKParticipantStatusCompleted'
  'EKParticipantStatusDeclined (3)':
    'prefix': 'EKParticipantStatusDeclined'
    'body': 'EKParticipantStatusDeclined'
  'EKParticipantStatusDelegated (5)':
    'prefix': 'EKParticipantStatusDelegated'
    'body': 'EKParticipantStatusDelegated'
  'EKParticipantStatusInProcess (7)':
    'prefix': 'EKParticipantStatusInProcess'
    'body': 'EKParticipantStatusInProcess'
  'EKParticipantStatusPending (1)':
    'prefix': 'EKParticipantStatusPending'
    'body': 'EKParticipantStatusPending'
  'EKParticipantStatusTentative (4)':
    'prefix': 'EKParticipantStatusTentative'
    'body': 'EKParticipantStatusTentative'
  'EKParticipantStatusUnknown (0)':
    'prefix': 'EKParticipantStatusUnknown'
    'body': 'EKParticipantStatusUnknown'
  'EKParticipantTypeGroup (4)':
    'prefix': 'EKParticipantTypeGroup'
    'body': 'EKParticipantTypeGroup'
  'EKParticipantTypePerson (1)':
    'prefix': 'EKParticipantTypePerson'
    'body': 'EKParticipantTypePerson'
  'EKParticipantTypeResource (3)':
    'prefix': 'EKParticipantTypeResource'
    'body': 'EKParticipantTypeResource'
  'EKParticipantTypeRoom (2)':
    'prefix': 'EKParticipantTypeRoom'
    'body': 'EKParticipantTypeRoom'
  'EKParticipantTypeUnknown (0)':
    'prefix': 'EKParticipantTypeUnknown'
    'body': 'EKParticipantTypeUnknown'
  'EKRecurrenceFrequencyDaily (0)':
    'prefix': 'EKRecurrenceFrequencyDaily'
    'body': 'EKRecurrenceFrequencyDaily'
  'EKRecurrenceFrequencyMonthly (2)':
    'prefix': 'EKRecurrenceFrequencyMonthly'
    'body': 'EKRecurrenceFrequencyMonthly'
  'EKRecurrenceFrequencyWeekly (1)':
    'prefix': 'EKRecurrenceFrequencyWeekly'
    'body': 'EKRecurrenceFrequencyWeekly'
  'EKRecurrenceFrequencyYearly (3)':
    'prefix': 'EKRecurrenceFrequencyYearly'
    'body': 'EKRecurrenceFrequencyYearly'
  'EKSaturday (7)':
    'prefix': 'EKSaturday'
    'body': 'EKSaturday'
  'EKSourceTypeBirthdays (5)':
    'prefix': 'EKSourceTypeBirthdays'
    'body': 'EKSourceTypeBirthdays'
  'EKSourceTypeCalDAV (2)':
    'prefix': 'EKSourceTypeCalDAV'
    'body': 'EKSourceTypeCalDAV'
  'EKSourceTypeExchange (1)':
    'prefix': 'EKSourceTypeExchange'
    'body': 'EKSourceTypeExchange'
  'EKSourceTypeLocal (0)':
    'prefix': 'EKSourceTypeLocal'
    'body': 'EKSourceTypeLocal'
  'EKSourceTypeMobileMe (3)':
    'prefix': 'EKSourceTypeMobileMe'
    'body': 'EKSourceTypeMobileMe'
  'EKSourceTypeSubscribed (4)':
    'prefix': 'EKSourceTypeSubscribed'
    'body': 'EKSourceTypeSubscribed'
  'EKSpanFutureEvents (1)':
    'prefix': 'EKSpanFutureEvents'
    'body': 'EKSpanFutureEvents'
  'EKSpanThisEvent (0)':
    'prefix': 'EKSpanThisEvent'
    'body': 'EKSpanThisEvent'
  'EKSunday (1)':
    'prefix': 'EKSunday'
    'body': 'EKSunday'
  'EKThursday (5)':
    'prefix': 'EKThursday'
    'body': 'EKThursday'
  'EKTuesday (3)':
    'prefix': 'EKTuesday'
    'body': 'EKTuesday'
  'EKWednesday (4)':
    'prefix': 'EKWednesday'
    'body': 'EKWednesday'
  'absoluteDate':
    'prefix': 'absoluteDate'
    'body': 'absoluteDate()'
  'EKAlarm.alarmWithAbsoluteDate:':
    'prefix': 'alarmWithAbsoluteDate:'
    'body': 'EKAlarm.alarmWithAbsoluteDate(${1:NSDate* date})'
  'EKAlarm.alarmWithRelativeOffset:':
    'prefix': 'alarmWithRelativeOffset:'
    'body': 'EKAlarm.alarmWithRelativeOffset(${1:NSTimeInterval offset})'
  'proximity':
    'prefix': 'proximity'
    'body': 'proximity()'
  'relativeOffset':
    'prefix': 'relativeOffset'
    'body': 'relativeOffset()'
  'setAbsoluteDate:':
    'prefix': 'setAbsoluteDate:'
    'body': 'setAbsoluteDate(${1:NSDate* absoluteDate})'
  'setProximity:':
    'prefix': 'setProximity:'
    'body': 'setProximity(${1:EKAlarmProximity proximity})'
  'setRelativeOffset:':
    'prefix': 'setRelativeOffset:'
    'body': 'setRelativeOffset(${1:NSTimeInterval relativeOffset})'
  'setStructuredLocation:':
    'prefix': 'setStructuredLocation:'
    'body': 'setStructuredLocation(${1:EKStructuredLocation* structuredLocation})'
  'structuredLocation':
    'prefix': 'structuredLocation'
    'body': 'structuredLocation()'
  'CGColor':
    'prefix': 'CGColor'
    'body': 'CGColor()'
  'allowedEntityTypes':
    'prefix': 'allowedEntityTypes'
    'body': 'allowedEntityTypes()'
  'allowsContentModifications':
    'prefix': 'allowsContentModifications'
    'body': 'allowsContentModifications()'
  'EKCalendar.calendarForEntityType:eventStore:':
    'prefix': 'calendarForEntityType:eventStore:'
    'body': 'EKCalendar.calendarForEntityType(${1:EKEntityType entityType}, eventStore:${2:EKEventStore* eventStore})'
  'calendarIdentifier':
    'prefix': 'calendarIdentifier'
    'body': 'calendarIdentifier()'
  'EKCalendar.calendarWithEventStore:':
    'prefix': 'calendarWithEventStore:'
    'body': 'EKCalendar.calendarWithEventStore(${1:EKEventStore* eventStore})'
  'isImmutable':
    'prefix': 'isImmutable'
    'body': 'isImmutable()'
  'isSubscribed':
    'prefix': 'isSubscribed'
    'body': 'isSubscribed()'
  'setCGColor:':
    'prefix': 'setCGColor:'
    'body': 'setCGColor(${1:CGColorRef CGColor})'
  'setSource:':
    'prefix': 'setSource:'
    'body': 'setSource(${1:EKSource* source})'
  'setTitle:':
    'prefix': 'setTitle:'
    'body': 'setTitle(${1:NSString* title})'
  'source':
    'prefix': 'source'
    'body': 'source()'
  'supportedEventAvailabilities':
    'prefix': 'supportedEventAvailabilities'
    'body': 'supportedEventAvailabilities()'
  'title':
    'prefix': 'title'
    'body': 'title()'
  'type':
    'prefix': 'type'
    'body': 'type()'
  'URL':
    'prefix': 'URL'
    'body': 'URL()'
  'UUID':
    'prefix': 'UUID'
    'body': 'UUID()'
  'addAlarm:':
    'prefix': 'addAlarm:'
    'body': 'addAlarm(${1:EKAlarm* alarm})'
  'addRecurrenceRule:':
    'prefix': 'addRecurrenceRule:'
    'body': 'addRecurrenceRule(${1:EKRecurrenceRule* rule})'
  'alarms':
    'prefix': 'alarms'
    'body': 'alarms()'
  'attendees':
    'prefix': 'attendees'
    'body': 'attendees()'
  'calendar':
    'prefix': 'calendar'
    'body': 'calendar()'
  'calendarItemExternalIdentifier':
    'prefix': 'calendarItemExternalIdentifier'
    'body': 'calendarItemExternalIdentifier()'
  'calendarItemIdentifier':
    'prefix': 'calendarItemIdentifier'
    'body': 'calendarItemIdentifier()'
  'creationDate':
    'prefix': 'creationDate'
    'body': 'creationDate()'
  'hasAlarms':
    'prefix': 'hasAlarms'
    'body': 'hasAlarms()'
  'hasAttendees':
    'prefix': 'hasAttendees'
    'body': 'hasAttendees()'
  'hasNotes':
    'prefix': 'hasNotes'
    'body': 'hasNotes()'
  'hasRecurrenceRules':
    'prefix': 'hasRecurrenceRules'
    'body': 'hasRecurrenceRules()'
  'lastModifiedDate':
    'prefix': 'lastModifiedDate'
    'body': 'lastModifiedDate()'
  'location':
    'prefix': 'location'
    'body': 'location()'
  'notes':
    'prefix': 'notes'
    'body': 'notes()'
  'recurrenceRules':
    'prefix': 'recurrenceRules'
    'body': 'recurrenceRules()'
  'removeAlarm:':
    'prefix': 'removeAlarm:'
    'body': 'removeAlarm(${1:EKAlarm* alarm})'
  'removeRecurrenceRule:':
    'prefix': 'removeRecurrenceRule:'
    'body': 'removeRecurrenceRule(${1:EKRecurrenceRule* rule})'
  'setAlarms:':
    'prefix': 'setAlarms:'
    'body': 'setAlarms(${1:NSArray* alarms})'
  'setCalendar:':
    'prefix': 'setCalendar:'
    'body': 'setCalendar(${1:EKCalendar* calendar})'
  'setLocation:':
    'prefix': 'setLocation:'
    'body': 'setLocation(${1:NSString* location})'
  'setNotes:':
    'prefix': 'setNotes:'
    'body': 'setNotes(${1:NSString* notes})'
  'setRecurrenceRules:':
    'prefix': 'setRecurrenceRules:'
    'body': 'setRecurrenceRules(${1:NSArray* recurrenceRules})'
  'setTimeZone:':
    'prefix': 'setTimeZone:'
    'body': 'setTimeZone(${1:NSTimeZone* timeZone})'
  'setTitle:':
    'prefix': 'setTitle:'
    'body': 'setTitle(${1:NSString* title})'
  'setURL:':
    'prefix': 'setURL:'
    'body': 'setURL(${1:NSURL* URL})'
  'timeZone':
    'prefix': 'timeZone'
    'body': 'timeZone()'
  'title':
    'prefix': 'title'
    'body': 'title()'
  'availability':
    'prefix': 'availability'
    'body': 'availability()'
  'birthdayPersonID':
    'prefix': 'birthdayPersonID'
    'body': 'birthdayPersonID()'
  'compareStartDateWithEvent:':
    'prefix': 'compareStartDateWithEvent:'
    'body': 'compareStartDateWithEvent(${1:EKEvent* other})'
  'endDate':
    'prefix': 'endDate'
    'body': 'endDate()'
  'eventIdentifier':
    'prefix': 'eventIdentifier'
    'body': 'eventIdentifier()'
  'EKEvent.eventWithEventStore:':
    'prefix': 'eventWithEventStore:'
    'body': 'EKEvent.eventWithEventStore(${1:EKEventStore* eventStore})'
  'isAllDay':
    'prefix': 'isAllDay'
    'body': 'isAllDay()'
  'isDetached':
    'prefix': 'isDetached'
    'body': 'isDetached()'
  'organizer':
    'prefix': 'organizer'
    'body': 'organizer()'
  'refresh':
    'prefix': 'refresh'
    'body': 'refresh()'
  'setAllDay:':
    'prefix': 'setAllDay:'
    'body': 'setAllDay(${1:BOOL allDay})'
  'setAvailability:':
    'prefix': 'setAvailability:'
    'body': 'setAvailability(${1:EKEventAvailability availability})'
  'setEndDate:':
    'prefix': 'setEndDate:'
    'body': 'setEndDate(${1:NSDate* endDate})'
  'setStartDate:':
    'prefix': 'setStartDate:'
    'body': 'setStartDate(${1:NSDate* startDate})'
  'startDate':
    'prefix': 'startDate'
    'body': 'startDate()'
  'status':
    'prefix': 'status'
    'body': 'status()'
  'EKEventStore.authorizationStatusForEntityType:':
    'prefix': 'authorizationStatusForEntityType:'
    'body': 'EKEventStore.authorizationStatusForEntityType(${1:EKEntityType entityType})'
  'calendarItemWithIdentifier:':
    'prefix': 'calendarItemWithIdentifier:'
    'body': 'calendarItemWithIdentifier(${1:NSString* identifier})'
  'calendarItemsWithExternalIdentifier:':
    'prefix': 'calendarItemsWithExternalIdentifier:'
    'body': 'calendarItemsWithExternalIdentifier(${1:NSString* externalIdentifier})'
  'calendarWithIdentifier:':
    'prefix': 'calendarWithIdentifier:'
    'body': 'calendarWithIdentifier(${1:NSString* identifier})'
  'calendars':
    'prefix': 'calendars'
    'body': 'calendars()'
  'calendarsForEntityType:':
    'prefix': 'calendarsForEntityType:'
    'body': 'calendarsForEntityType(${1:EKEntityType entityType})'
  'cancelFetchRequest:':
    'prefix': 'cancelFetchRequest:'
    'body': 'cancelFetchRequest(${1:id fetchIdentifier})'
  'commit:':
    'prefix': 'commit:'
    'body': 'commit(${1:NSError** error})'
  'defaultCalendarForNewEvents':
    'prefix': 'defaultCalendarForNewEvents'
    'body': 'defaultCalendarForNewEvents()'
  'defaultCalendarForNewReminders':
    'prefix': 'defaultCalendarForNewReminders'
    'body': 'defaultCalendarForNewReminders()'
  'enumerateEventsMatchingPredicate:usingBlock:':
    'prefix': 'enumerateEventsMatchingPredicate:usingBlock:'
    'body': 'enumerateEventsMatchingPredicate(${1:NSPredicate* predicate}, usingBlock:${2:EKEventSearchCallback block})'
  'eventStoreIdentifier':
    'prefix': 'eventStoreIdentifier'
    'body': 'eventStoreIdentifier()'
  'eventWithIdentifier:':
    'prefix': 'eventWithIdentifier:'
    'body': 'eventWithIdentifier(${1:NSString* identifier})'
  'eventsMatchingPredicate:':
    'prefix': 'eventsMatchingPredicate:'
    'body': 'eventsMatchingPredicate(${1:NSPredicate* predicate})'
  'fetchRemindersMatchingPredicate:completion:':
    'prefix': 'fetchRemindersMatchingPredicate:completion:'
    'body': 'fetchRemindersMatchingPredicate(${1:NSPredicate* predicate}, completion:${2:void (^)(NSArray *) completion})'
  'predicateForCompletedRemindersWithCompletionDateStarting:ending:calendars:':
    'prefix': 'predicateForCompletedRemindersWithCompletionDateStarting:ending:calendars:'
    'body': 'predicateForCompletedRemindersWithCompletionDateStarting(${1:NSDate* startDate}, ending:${2:NSDate* endDate}, calendars:${3:NSArray* calendars})'
  'predicateForEventsWithStartDate:endDate:calendars:':
    'prefix': 'predicateForEventsWithStartDate:endDate:calendars:'
    'body': 'predicateForEventsWithStartDate(${1:NSDate* startDate}, endDate:${2:NSDate* endDate}, calendars:${3:NSArray* calendars})'
  'predicateForIncompleteRemindersWithDueDateStarting:ending:calendars:':
    'prefix': 'predicateForIncompleteRemindersWithDueDateStarting:ending:calendars:'
    'body': 'predicateForIncompleteRemindersWithDueDateStarting(${1:NSDate* startDate}, ending:${2:NSDate* endDate}, calendars:${3:NSArray* calendars})'
  'predicateForRemindersInCalendars:':
    'prefix': 'predicateForRemindersInCalendars:'
    'body': 'predicateForRemindersInCalendars(${1:NSArray* calendars})'
  'refreshSourcesIfNecessary':
    'prefix': 'refreshSourcesIfNecessary'
    'body': 'refreshSourcesIfNecessary()'
  'removeCalendar:commit:error:':
    'prefix': 'removeCalendar:commit:error:'
    'body': 'removeCalendar(${1:EKCalendar* calendar}, commit:${2:BOOL commit}, error:${3:NSError** error})'
  'removeEvent:span:commit:error:':
    'prefix': 'removeEvent:span:commit:error:'
    'body': 'removeEvent(${1:EKEvent* event}, span:${2:EKSpan span}, commit:${3:BOOL commit}, error:${4:NSError** error})'
  'removeEvent:span:error:':
    'prefix': 'removeEvent:span:error:'
    'body': 'removeEvent(${1:EKEvent* event}, span:${2:EKSpan span}, error:${3:NSError** error})'
  'removeReminder:commit:error:':
    'prefix': 'removeReminder:commit:error:'
    'body': 'removeReminder(${1:EKReminder* reminder}, commit:${2:BOOL commit}, error:${3:NSError** error})'
  'requestAccessToEntityType:completion:':
    'prefix': 'requestAccessToEntityType:completion:'
    'body': 'requestAccessToEntityType(${1:EKEntityType entityType}, completion:${2:EKEventStoreRequestAccessCompletionHandler completion})'
  'reset':
    'prefix': 'reset'
    'body': 'reset()'
  'saveCalendar:commit:error:':
    'prefix': 'saveCalendar:commit:error:'
    'body': 'saveCalendar(${1:EKCalendar* calendar}, commit:${2:BOOL commit}, error:${3:NSError** error})'
  'saveEvent:span:commit:error:':
    'prefix': 'saveEvent:span:commit:error:'
    'body': 'saveEvent(${1:EKEvent* event}, span:${2:EKSpan span}, commit:${3:BOOL commit}, error:${4:NSError** error})'
  'saveEvent:span:error:':
    'prefix': 'saveEvent:span:error:'
    'body': 'saveEvent(${1:EKEvent* event}, span:${2:EKSpan span}, error:${3:NSError** error})'
  'saveReminder:commit:error:':
    'prefix': 'saveReminder:commit:error:'
    'body': 'saveReminder(${1:EKReminder* reminder}, commit:${2:BOOL commit}, error:${3:NSError** error})'
  'sourceWithIdentifier:':
    'prefix': 'sourceWithIdentifier:'
    'body': 'sourceWithIdentifier(${1:NSString* identifier})'
  'sources':
    'prefix': 'sources'
    'body': 'sources()'
  'hasChanges':
    'prefix': 'hasChanges'
    'body': 'hasChanges()'
  'isNew':
    'prefix': 'isNew'
    'body': 'isNew()'
  'refresh':
    'prefix': 'refresh'
    'body': 'refresh()'
  'reset':
    'prefix': 'reset'
    'body': 'reset()'
  'rollback':
    'prefix': 'rollback'
    'body': 'rollback()'
  'ABRecordWithAddressBook:':
    'prefix': 'ABRecordWithAddressBook:'
    'body': 'ABRecordWithAddressBook(${1:ABAddressBookRef addressBook})'
  'URL':
    'prefix': 'URL'
    'body': 'URL()'
  'isCurrentUser':
    'prefix': 'isCurrentUser'
    'body': 'isCurrentUser()'
  'name':
    'prefix': 'name'
    'body': 'name()'
  'participantRole':
    'prefix': 'participantRole'
    'body': 'participantRole()'
  'participantStatus':
    'prefix': 'participantStatus'
    'body': 'participantStatus()'
  'participantType':
    'prefix': 'participantType'
    'body': 'participantType()'
  'dayOfTheWeek':
    'prefix': 'dayOfTheWeek'
    'body': 'dayOfTheWeek()'
  'EKRecurrenceDayOfWeek.dayOfWeek:':
    'prefix': 'dayOfWeek:'
    'body': 'EKRecurrenceDayOfWeek.dayOfWeek(${1:NSInteger dayOfTheWeek})'
  'EKRecurrenceDayOfWeek.dayOfWeek:weekNumber:':
    'prefix': 'dayOfWeek:weekNumber:'
    'body': 'EKRecurrenceDayOfWeek.dayOfWeek(${1:NSInteger dayOfTheWeek}, weekNumber:${2:NSInteger weekNumber})'
  'initWithDayOfTheWeek:weekNumber:':
    'prefix': 'initWithDayOfTheWeek:weekNumber:'
    'body': 'initWithDayOfTheWeek(${1:NSInteger dayOfTheWeek}, weekNumber:${2:NSInteger weekNumber})'
  'weekNumber':
    'prefix': 'weekNumber'
    'body': 'weekNumber()'
  'endDate':
    'prefix': 'endDate'
    'body': 'endDate()'
  'occurrenceCount':
    'prefix': 'occurrenceCount'
    'body': 'occurrenceCount()'
  'EKRecurrenceEnd.recurrenceEndWithEndDate:':
    'prefix': 'recurrenceEndWithEndDate:'
    'body': 'EKRecurrenceEnd.recurrenceEndWithEndDate(${1:NSDate* endDate})'
  'EKRecurrenceEnd.recurrenceEndWithOccurrenceCount:':
    'prefix': 'recurrenceEndWithOccurrenceCount:'
    'body': 'EKRecurrenceEnd.recurrenceEndWithOccurrenceCount(${1:NSUInteger occurrenceCount})'
  'calendarIdentifier':
    'prefix': 'calendarIdentifier'
    'body': 'calendarIdentifier()'
  'daysOfTheMonth':
    'prefix': 'daysOfTheMonth'
    'body': 'daysOfTheMonth()'
  'daysOfTheWeek':
    'prefix': 'daysOfTheWeek'
    'body': 'daysOfTheWeek()'
  'daysOfTheYear':
    'prefix': 'daysOfTheYear'
    'body': 'daysOfTheYear()'
  'firstDayOfTheWeek':
    'prefix': 'firstDayOfTheWeek'
    'body': 'firstDayOfTheWeek()'
  'frequency':
    'prefix': 'frequency'
    'body': 'frequency()'
  'initRecurrenceWithFrequency:interval:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:':
    'prefix': 'initRecurrenceWithFrequency:interval:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:'
    'body': 'initRecurrenceWithFrequency(${1:EKRecurrenceFrequency type}, interval:${2:NSInteger interval}, daysOfTheWeek:${3:NSArray* days}, daysOfTheMonth:${4:NSArray* monthDays}, monthsOfTheYear:${5:NSArray* months}, weeksOfTheYear:${6:NSArray* weeksOfTheYear}, daysOfTheYear:${7:NSArray* daysOfTheYear}, setPositions:${8:NSArray* setPositions}, end:${9:EKRecurrenceEnd* end})'
  'initRecurrenceWithFrequency:interval:end:':
    'prefix': 'initRecurrenceWithFrequency:interval:end:'
    'body': 'initRecurrenceWithFrequency(${1:EKRecurrenceFrequency type}, interval:${2:NSInteger interval}, end:${3:EKRecurrenceEnd* end})'
  'interval':
    'prefix': 'interval'
    'body': 'interval()'
  'monthsOfTheYear':
    'prefix': 'monthsOfTheYear'
    'body': 'monthsOfTheYear()'
  'recurrenceEnd':
    'prefix': 'recurrenceEnd'
    'body': 'recurrenceEnd()'
  'setPositions':
    'prefix': 'setPositions'
    'body': 'setPositions()'
  'setRecurrenceEnd:':
    'prefix': 'setRecurrenceEnd:'
    'body': 'setRecurrenceEnd(${1:EKRecurrenceEnd* recurrenceEnd})'
  'weeksOfTheYear':
    'prefix': 'weeksOfTheYear'
    'body': 'weeksOfTheYear()'
  'completionDate':
    'prefix': 'completionDate'
    'body': 'completionDate()'
  'dueDateComponents':
    'prefix': 'dueDateComponents'
    'body': 'dueDateComponents()'
  'isCompleted':
    'prefix': 'isCompleted'
    'body': 'isCompleted()'
  'priority':
    'prefix': 'priority'
    'body': 'priority()'
  'EKReminder.reminderWithEventStore:':
    'prefix': 'reminderWithEventStore:'
    'body': 'EKReminder.reminderWithEventStore(${1:EKEventStore* eventStore})'
  'setCompleted:':
    'prefix': 'setCompleted:'
    'body': 'setCompleted(${1:BOOL completed})'
  'setCompletionDate:':
    'prefix': 'setCompletionDate:'
    'body': 'setCompletionDate(${1:NSDate* completionDate})'
  'setDueDateComponents:':
    'prefix': 'setDueDateComponents:'
    'body': 'setDueDateComponents(${1:NSDateComponents* dueDateComponents})'
  'setPriority:':
    'prefix': 'setPriority:'
    'body': 'setPriority(${1:NSInteger priority})'
  'setStartDateComponents:':
    'prefix': 'setStartDateComponents:'
    'body': 'setStartDateComponents(${1:NSDateComponents* startDateComponents})'
  'startDateComponents':
    'prefix': 'startDateComponents'
    'body': 'startDateComponents()'
  'calendars':
    'prefix': 'calendars'
    'body': 'calendars()'
  'calendarsForEntityType:':
    'prefix': 'calendarsForEntityType:'
    'body': 'calendarsForEntityType(${1:EKEntityType entityType})'
  'sourceIdentifier':
    'prefix': 'sourceIdentifier'
    'body': 'sourceIdentifier()'
  'sourceType':
    'prefix': 'sourceType'
    'body': 'sourceType()'
  'title':
    'prefix': 'title'
    'body': 'title()'
  'geoLocation':
    'prefix': 'geoLocation'
    'body': 'geoLocation()'
  'EKStructuredLocation.locationWithTitle:':
    'prefix': 'locationWithTitle:'
    'body': 'EKStructuredLocation.locationWithTitle(${1:NSString* title})'
  'radius':
    'prefix': 'radius'
    'body': 'radius()'
  'setGeoLocation:':
    'prefix': 'setGeoLocation:'
    'body': 'setGeoLocation(${1:CLLocation* geoLocation})'
  'setRadius:':
    'prefix': 'setRadius:'
    'body': 'setRadius(${1:double radius})'
  'setTitle:':
    'prefix': 'setTitle:'
    'body': 'setTitle(${1:NSString* title})'
  'title':
    'prefix': 'title'
    'body': 'title()'
