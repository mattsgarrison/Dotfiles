'.source.rubymotion':
  'CLLocationDistanceMax (CLLocationDistance)':
    'prefix': 'CLLocationDistanceMax'
    'body': 'CLLocationDistanceMax'
  'CLTimeIntervalMax (NSTimeInterval)':
    'prefix': 'CLTimeIntervalMax'
    'body': 'CLTimeIntervalMax'
  'kCLDistanceFilterNone (CLLocationDistance)':
    'prefix': 'kCLDistanceFilterNone'
    'body': 'KCLDistanceFilterNone'
  'kCLErrorDomain (NSString*)':
    'prefix': 'kCLErrorDomain'
    'body': 'KCLErrorDomain'
  'kCLErrorUserInfoAlternateRegionKey (NSString*)':
    'prefix': 'kCLErrorUserInfoAlternateRegionKey'
    'body': 'KCLErrorUserInfoAlternateRegionKey'
  'kCLHeadingFilterNone (CLLocationDegrees)':
    'prefix': 'kCLHeadingFilterNone'
    'body': 'KCLHeadingFilterNone'
  'kCLLocationAccuracyBest (CLLocationAccuracy)':
    'prefix': 'kCLLocationAccuracyBest'
    'body': 'KCLLocationAccuracyBest'
  'kCLLocationAccuracyBestForNavigation (CLLocationAccuracy)':
    'prefix': 'kCLLocationAccuracyBestForNavigation'
    'body': 'KCLLocationAccuracyBestForNavigation'
  'kCLLocationAccuracyHundredMeters (CLLocationAccuracy)':
    'prefix': 'kCLLocationAccuracyHundredMeters'
    'body': 'KCLLocationAccuracyHundredMeters'
  'kCLLocationAccuracyKilometer (CLLocationAccuracy)':
    'prefix': 'kCLLocationAccuracyKilometer'
    'body': 'KCLLocationAccuracyKilometer'
  'kCLLocationAccuracyNearestTenMeters (CLLocationAccuracy)':
    'prefix': 'kCLLocationAccuracyNearestTenMeters'
    'body': 'KCLLocationAccuracyNearestTenMeters'
  'kCLLocationAccuracyThreeKilometers (CLLocationAccuracy)':
    'prefix': 'kCLLocationAccuracyThreeKilometers'
    'body': 'KCLLocationAccuracyThreeKilometers'
  'kCLLocationCoordinate2DInvalid (CLLocationCoordinate2D)':
    'prefix': 'kCLLocationCoordinate2DInvalid'
    'body': 'KCLLocationCoordinate2DInvalid'
  'CLActivityTypeAutomotiveNavigation (2)':
    'prefix': 'CLActivityTypeAutomotiveNavigation'
    'body': 'CLActivityTypeAutomotiveNavigation'
  'CLActivityTypeFitness (3)':
    'prefix': 'CLActivityTypeFitness'
    'body': 'CLActivityTypeFitness'
  'CLActivityTypeOther (1)':
    'prefix': 'CLActivityTypeOther'
    'body': 'CLActivityTypeOther'
  'CLActivityTypeOtherNavigation (4)':
    'prefix': 'CLActivityTypeOtherNavigation'
    'body': 'CLActivityTypeOtherNavigation'
  'CLDeviceOrientationFaceDown (6)':
    'prefix': 'CLDeviceOrientationFaceDown'
    'body': 'CLDeviceOrientationFaceDown'
  'CLDeviceOrientationFaceUp (5)':
    'prefix': 'CLDeviceOrientationFaceUp'
    'body': 'CLDeviceOrientationFaceUp'
  'CLDeviceOrientationLandscapeLeft (3)':
    'prefix': 'CLDeviceOrientationLandscapeLeft'
    'body': 'CLDeviceOrientationLandscapeLeft'
  'CLDeviceOrientationLandscapeRight (4)':
    'prefix': 'CLDeviceOrientationLandscapeRight'
    'body': 'CLDeviceOrientationLandscapeRight'
  'CLDeviceOrientationPortrait (1)':
    'prefix': 'CLDeviceOrientationPortrait'
    'body': 'CLDeviceOrientationPortrait'
  'CLDeviceOrientationPortraitUpsideDown (2)':
    'prefix': 'CLDeviceOrientationPortraitUpsideDown'
    'body': 'CLDeviceOrientationPortraitUpsideDown'
  'CLDeviceOrientationUnknown (0)':
    'prefix': 'CLDeviceOrientationUnknown'
    'body': 'CLDeviceOrientationUnknown'
  'CLProximityFar (3)':
    'prefix': 'CLProximityFar'
    'body': 'CLProximityFar'
  'CLProximityImmediate (1)':
    'prefix': 'CLProximityImmediate'
    'body': 'CLProximityImmediate'
  'CLProximityNear (2)':
    'prefix': 'CLProximityNear'
    'body': 'CLProximityNear'
  'CLProximityUnknown (0)':
    'prefix': 'CLProximityUnknown'
    'body': 'CLProximityUnknown'
  'CLRegionStateInside (1)':
    'prefix': 'CLRegionStateInside'
    'body': 'CLRegionStateInside'
  'CLRegionStateOutside (2)':
    'prefix': 'CLRegionStateOutside'
    'body': 'CLRegionStateOutside'
  'CLRegionStateUnknown (0)':
    'prefix': 'CLRegionStateUnknown'
    'body': 'CLRegionStateUnknown'
  'kCLAuthorizationStatusAuthorized (3)':
    'prefix': 'kCLAuthorizationStatusAuthorized'
    'body': 'KCLAuthorizationStatusAuthorized'
  'kCLAuthorizationStatusDenied (2)':
    'prefix': 'kCLAuthorizationStatusDenied'
    'body': 'KCLAuthorizationStatusDenied'
  'kCLAuthorizationStatusNotDetermined (0)':
    'prefix': 'kCLAuthorizationStatusNotDetermined'
    'body': 'KCLAuthorizationStatusNotDetermined'
  'kCLAuthorizationStatusRestricted (1)':
    'prefix': 'kCLAuthorizationStatusRestricted'
    'body': 'KCLAuthorizationStatusRestricted'
  'kCLErrorDeferredAccuracyTooLow (13)':
    'prefix': 'kCLErrorDeferredAccuracyTooLow'
    'body': 'KCLErrorDeferredAccuracyTooLow'
  'kCLErrorDeferredCanceled (15)':
    'prefix': 'kCLErrorDeferredCanceled'
    'body': 'KCLErrorDeferredCanceled'
  'kCLErrorDeferredDistanceFiltered (14)':
    'prefix': 'kCLErrorDeferredDistanceFiltered'
    'body': 'KCLErrorDeferredDistanceFiltered'
  'kCLErrorDeferredFailed (11)':
    'prefix': 'kCLErrorDeferredFailed'
    'body': 'KCLErrorDeferredFailed'
  'kCLErrorDeferredNotUpdatingLocation (12)':
    'prefix': 'kCLErrorDeferredNotUpdatingLocation'
    'body': 'KCLErrorDeferredNotUpdatingLocation'
  'kCLErrorDenied (1)':
    'prefix': 'kCLErrorDenied'
    'body': 'KCLErrorDenied'
  'kCLErrorGeocodeCanceled (10)':
    'prefix': 'kCLErrorGeocodeCanceled'
    'body': 'KCLErrorGeocodeCanceled'
  'kCLErrorGeocodeFoundNoResult (8)':
    'prefix': 'kCLErrorGeocodeFoundNoResult'
    'body': 'KCLErrorGeocodeFoundNoResult'
  'kCLErrorGeocodeFoundPartialResult (9)':
    'prefix': 'kCLErrorGeocodeFoundPartialResult'
    'body': 'KCLErrorGeocodeFoundPartialResult'
  'kCLErrorHeadingFailure (3)':
    'prefix': 'kCLErrorHeadingFailure'
    'body': 'KCLErrorHeadingFailure'
  'kCLErrorLocationUnknown (0)':
    'prefix': 'kCLErrorLocationUnknown'
    'body': 'KCLErrorLocationUnknown'
  'kCLErrorNetwork (2)':
    'prefix': 'kCLErrorNetwork'
    'body': 'KCLErrorNetwork'
  'kCLErrorRangingFailure (17)':
    'prefix': 'kCLErrorRangingFailure'
    'body': 'KCLErrorRangingFailure'
  'kCLErrorRangingUnavailable (16)':
    'prefix': 'kCLErrorRangingUnavailable'
    'body': 'KCLErrorRangingUnavailable'
  'kCLErrorRegionMonitoringDenied (4)':
    'prefix': 'kCLErrorRegionMonitoringDenied'
    'body': 'KCLErrorRegionMonitoringDenied'
  'kCLErrorRegionMonitoringFailure (5)':
    'prefix': 'kCLErrorRegionMonitoringFailure'
    'body': 'KCLErrorRegionMonitoringFailure'
  'kCLErrorRegionMonitoringResponseDelayed (7)':
    'prefix': 'kCLErrorRegionMonitoringResponseDelayed'
    'body': 'KCLErrorRegionMonitoringResponseDelayed'
  'kCLErrorRegionMonitoringSetupDelayed (6)':
    'prefix': 'kCLErrorRegionMonitoringSetupDelayed'
    'body': 'KCLErrorRegionMonitoringSetupDelayed'
  'CLLocationCoordinate2DIsValid':
    'prefix': 'CLLocationCoordinate2DIsValid'
    'body': 'CLLocationCoordinate2DIsValid(${1:CLLocationCoordinate2D coord})'
  'CLLocationCoordinate2DMake':
    'prefix': 'CLLocationCoordinate2DMake'
    'body': 'CLLocationCoordinate2DMake(${1:CLLocationDegrees latitude}, ${2:CLLocationDegrees longitude})'
  'accuracy':
    'prefix': 'accuracy'
    'body': 'accuracy()'
  'major':
    'prefix': 'major'
    'body': 'major()'
  'minor':
    'prefix': 'minor'
    'body': 'minor()'
  'proximity':
    'prefix': 'proximity'
    'body': 'proximity()'
  'proximityUUID':
    'prefix': 'proximityUUID'
    'body': 'proximityUUID()'
  'rssi':
    'prefix': 'rssi'
    'body': 'rssi()'
  'initWithProximityUUID:identifier:':
    'prefix': 'initWithProximityUUID:identifier:'
    'body': 'initWithProximityUUID(${1:NSUUID* proximityUUID}, identifier:${2:NSString* identifier})'
  'initWithProximityUUID:major:identifier:':
    'prefix': 'initWithProximityUUID:major:identifier:'
    'body': 'initWithProximityUUID(${1:NSUUID* proximityUUID}, major:${2:CLBeaconMajorValue major}, identifier:${3:NSString* identifier})'
  'initWithProximityUUID:major:minor:identifier:':
    'prefix': 'initWithProximityUUID:major:minor:identifier:'
    'body': 'initWithProximityUUID(${1:NSUUID* proximityUUID}, major:${2:CLBeaconMajorValue major}, minor:${3:CLBeaconMinorValue minor}, identifier:${4:NSString* identifier})'
  'major':
    'prefix': 'major'
    'body': 'major()'
  'minor':
    'prefix': 'minor'
    'body': 'minor()'
  'notifyEntryStateOnDisplay':
    'prefix': 'notifyEntryStateOnDisplay'
    'body': 'notifyEntryStateOnDisplay()'
  'peripheralDataWithMeasuredPower:':
    'prefix': 'peripheralDataWithMeasuredPower:'
    'body': 'peripheralDataWithMeasuredPower(${1:NSNumber* measuredPower})'
  'proximityUUID':
    'prefix': 'proximityUUID'
    'body': 'proximityUUID()'
  'setNotifyEntryStateOnDisplay:':
    'prefix': 'setNotifyEntryStateOnDisplay:'
    'body': 'setNotifyEntryStateOnDisplay(${1:BOOL notifyEntryStateOnDisplay})'
  'center':
    'prefix': 'center'
    'body': 'center()'
  'containsCoordinate:':
    'prefix': 'containsCoordinate:'
    'body': 'containsCoordinate(${1:CLLocationCoordinate2D coordinate})'
  'initWithCenter:radius:identifier:':
    'prefix': 'initWithCenter:radius:identifier:'
    'body': 'initWithCenter(${1:CLLocationCoordinate2D center}, radius:${2:CLLocationDistance radius}, identifier:${3:NSString* identifier})'
  'radius':
    'prefix': 'radius'
    'body': 'radius()'
  'cancelGeocode':
    'prefix': 'cancelGeocode'
    'body': 'cancelGeocode()'
  'geocodeAddressDictionary:completionHandler:':
    'prefix': 'geocodeAddressDictionary:completionHandler:'
    'body': 'geocodeAddressDictionary(${1:NSDictionary* addressDictionary}, completionHandler:${2:CLGeocodeCompletionHandler completionHandler})'
  'geocodeAddressString:completionHandler:':
    'prefix': 'geocodeAddressString:completionHandler:'
    'body': 'geocodeAddressString(${1:NSString* addressString}, completionHandler:${2:CLGeocodeCompletionHandler completionHandler})'
  'geocodeAddressString:inRegion:completionHandler:':
    'prefix': 'geocodeAddressString:inRegion:completionHandler:'
    'body': 'geocodeAddressString(${1:NSString* addressString}, inRegion:${2:CLRegion* region}, completionHandler:${3:CLGeocodeCompletionHandler completionHandler})'
  'isGeocoding':
    'prefix': 'isGeocoding'
    'body': 'isGeocoding()'
  'reverseGeocodeLocation:completionHandler:':
    'prefix': 'reverseGeocodeLocation:completionHandler:'
    'body': 'reverseGeocodeLocation(${1:CLLocation* location}, completionHandler:${2:CLGeocodeCompletionHandler completionHandler})'
  'description':
    'prefix': 'description'
    'body': 'description()'
  'headingAccuracy':
    'prefix': 'headingAccuracy'
    'body': 'headingAccuracy()'
  'magneticHeading':
    'prefix': 'magneticHeading'
    'body': 'magneticHeading()'
  'timestamp':
    'prefix': 'timestamp'
    'body': 'timestamp()'
  'trueHeading':
    'prefix': 'trueHeading'
    'body': 'trueHeading()'
  'x':
    'prefix': 'x'
    'body': 'x()'
  'y':
    'prefix': 'y'
    'body': 'y()'
  'z':
    'prefix': 'z'
    'body': 'z()'
  'altitude':
    'prefix': 'altitude'
    'body': 'altitude()'
  'coordinate':
    'prefix': 'coordinate'
    'body': 'coordinate()'
  'course':
    'prefix': 'course'
    'body': 'course()'
  'description':
    'prefix': 'description'
    'body': 'description()'
  'distanceFromLocation:':
    'prefix': 'distanceFromLocation:'
    'body': 'distanceFromLocation(${1:CLLocation* location})'
  'getDistanceFrom:':
    'prefix': 'getDistanceFrom:'
    'body': 'getDistanceFrom(${1:CLLocation* location})'
  'horizontalAccuracy':
    'prefix': 'horizontalAccuracy'
    'body': 'horizontalAccuracy()'
  'initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:':
    'prefix': 'initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:'
    'body': 'initWithCoordinate(${1:CLLocationCoordinate2D coordinate}, altitude:${2:CLLocationDistance altitude}, horizontalAccuracy:${3:CLLocationAccuracy hAccuracy}, verticalAccuracy:${4:CLLocationAccuracy vAccuracy}, course:${5:CLLocationDirection course}, speed:${6:CLLocationSpeed speed}, timestamp:${7:NSDate* timestamp})'
  'initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:':
    'prefix': 'initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:'
    'body': 'initWithCoordinate(${1:CLLocationCoordinate2D coordinate}, altitude:${2:CLLocationDistance altitude}, horizontalAccuracy:${3:CLLocationAccuracy hAccuracy}, verticalAccuracy:${4:CLLocationAccuracy vAccuracy}, timestamp:${5:NSDate* timestamp})'
  'initWithLatitude:longitude:':
    'prefix': 'initWithLatitude:longitude:'
    'body': 'initWithLatitude(${1:CLLocationDegrees latitude}, longitude:${2:CLLocationDegrees longitude})'
  'speed':
    'prefix': 'speed'
    'body': 'speed()'
  'timestamp':
    'prefix': 'timestamp'
    'body': 'timestamp()'
  'verticalAccuracy':
    'prefix': 'verticalAccuracy'
    'body': 'verticalAccuracy()'
  'activityType':
    'prefix': 'activityType'
    'body': 'activityType()'
  'allowDeferredLocationUpdatesUntilTraveled:timeout:':
    'prefix': 'allowDeferredLocationUpdatesUntilTraveled:timeout:'
    'body': 'allowDeferredLocationUpdatesUntilTraveled(${1:CLLocationDistance distance}, timeout:${2:NSTimeInterval timeout})'
  'CLLocationManager.authorizationStatus':
    'prefix': 'authorizationStatus'
    'body': 'CLLocationManager.authorizationStatus()'
  'CLLocationManager.deferredLocationUpdatesAvailable':
    'prefix': 'deferredLocationUpdatesAvailable'
    'body': 'CLLocationManager.deferredLocationUpdatesAvailable()'
  'delegate':
    'prefix': 'delegate'
    'body': 'delegate()'
  'desiredAccuracy':
    'prefix': 'desiredAccuracy'
    'body': 'desiredAccuracy()'
  'disallowDeferredLocationUpdates':
    'prefix': 'disallowDeferredLocationUpdates'
    'body': 'disallowDeferredLocationUpdates()'
  'dismissHeadingCalibrationDisplay':
    'prefix': 'dismissHeadingCalibrationDisplay'
    'body': 'dismissHeadingCalibrationDisplay()'
  'distanceFilter':
    'prefix': 'distanceFilter'
    'body': 'distanceFilter()'
  'heading':
    'prefix': 'heading'
    'body': 'heading()'
  'CLLocationManager.headingAvailable':
    'prefix': 'headingAvailable'
    'body': 'CLLocationManager.headingAvailable()'
  'headingAvailable':
    'prefix': 'headingAvailable'
    'body': 'headingAvailable()'
  'headingFilter':
    'prefix': 'headingFilter'
    'body': 'headingFilter()'
  'headingOrientation':
    'prefix': 'headingOrientation'
    'body': 'headingOrientation()'
  'CLLocationManager.isMonitoringAvailableForClass:':
    'prefix': 'isMonitoringAvailableForClass:'
    'body': 'CLLocationManager.isMonitoringAvailableForClass(${1:Class regionClass})'
  'CLLocationManager.isRangingAvailable':
    'prefix': 'isRangingAvailable'
    'body': 'CLLocationManager.isRangingAvailable()'
  'location':
    'prefix': 'location'
    'body': 'location()'
  'CLLocationManager.locationServicesEnabled':
    'prefix': 'locationServicesEnabled'
    'body': 'CLLocationManager.locationServicesEnabled()'
  'locationServicesEnabled':
    'prefix': 'locationServicesEnabled'
    'body': 'locationServicesEnabled()'
  'maximumRegionMonitoringDistance':
    'prefix': 'maximumRegionMonitoringDistance'
    'body': 'maximumRegionMonitoringDistance()'
  'monitoredRegions':
    'prefix': 'monitoredRegions'
    'body': 'monitoredRegions()'
  'pausesLocationUpdatesAutomatically':
    'prefix': 'pausesLocationUpdatesAutomatically'
    'body': 'pausesLocationUpdatesAutomatically()'
  'purpose':
    'prefix': 'purpose'
    'body': 'purpose()'
  'rangedRegions':
    'prefix': 'rangedRegions'
    'body': 'rangedRegions()'
  'CLLocationManager.regionMonitoringAvailable':
    'prefix': 'regionMonitoringAvailable'
    'body': 'CLLocationManager.regionMonitoringAvailable()'
  'CLLocationManager.regionMonitoringEnabled':
    'prefix': 'regionMonitoringEnabled'
    'body': 'CLLocationManager.regionMonitoringEnabled()'
  'requestStateForRegion:':
    'prefix': 'requestStateForRegion:'
    'body': 'requestStateForRegion(${1:CLRegion* region})'
  'setActivityType:':
    'prefix': 'setActivityType:'
    'body': 'setActivityType(${1:CLActivityType activityType})'
  'setDelegate:':
    'prefix': 'setDelegate:'
    'body': 'setDelegate(${1:id delegate})'
  'setDesiredAccuracy:':
    'prefix': 'setDesiredAccuracy:'
    'body': 'setDesiredAccuracy(${1:CLLocationAccuracy desiredAccuracy})'
  'setDistanceFilter:':
    'prefix': 'setDistanceFilter:'
    'body': 'setDistanceFilter(${1:CLLocationDistance distanceFilter})'
  'setHeadingFilter:':
    'prefix': 'setHeadingFilter:'
    'body': 'setHeadingFilter(${1:CLLocationDegrees headingFilter})'
  'setHeadingOrientation:':
    'prefix': 'setHeadingOrientation:'
    'body': 'setHeadingOrientation(${1:CLDeviceOrientation headingOrientation})'
  'setPausesLocationUpdatesAutomatically:':
    'prefix': 'setPausesLocationUpdatesAutomatically:'
    'body': 'setPausesLocationUpdatesAutomatically(${1:BOOL pausesLocationUpdatesAutomatically})'
  'setPurpose:':
    'prefix': 'setPurpose:'
    'body': 'setPurpose(${1:NSString* purpose})'
  'CLLocationManager.significantLocationChangeMonitoringAvailable':
    'prefix': 'significantLocationChangeMonitoringAvailable'
    'body': 'CLLocationManager.significantLocationChangeMonitoringAvailable()'
  'startMonitoringForRegion:':
    'prefix': 'startMonitoringForRegion:'
    'body': 'startMonitoringForRegion(${1:CLRegion* region})'
  'startMonitoringForRegion:desiredAccuracy:':
    'prefix': 'startMonitoringForRegion:desiredAccuracy:'
    'body': 'startMonitoringForRegion(${1:CLRegion* region}, desiredAccuracy:${2:CLLocationAccuracy accuracy})'
  'startMonitoringSignificantLocationChanges':
    'prefix': 'startMonitoringSignificantLocationChanges'
    'body': 'startMonitoringSignificantLocationChanges()'
  'startRangingBeaconsInRegion:':
    'prefix': 'startRangingBeaconsInRegion:'
    'body': 'startRangingBeaconsInRegion(${1:CLBeaconRegion* region})'
  'startUpdatingHeading':
    'prefix': 'startUpdatingHeading'
    'body': 'startUpdatingHeading()'
  'startUpdatingLocation':
    'prefix': 'startUpdatingLocation'
    'body': 'startUpdatingLocation()'
  'stopMonitoringForRegion:':
    'prefix': 'stopMonitoringForRegion:'
    'body': 'stopMonitoringForRegion(${1:CLRegion* region})'
  'stopMonitoringSignificantLocationChanges':
    'prefix': 'stopMonitoringSignificantLocationChanges'
    'body': 'stopMonitoringSignificantLocationChanges()'
  'stopRangingBeaconsInRegion:':
    'prefix': 'stopRangingBeaconsInRegion:'
    'body': 'stopRangingBeaconsInRegion(${1:CLBeaconRegion* region})'
  'stopUpdatingHeading':
    'prefix': 'stopUpdatingHeading'
    'body': 'stopUpdatingHeading()'
  'stopUpdatingLocation':
    'prefix': 'stopUpdatingLocation'
    'body': 'stopUpdatingLocation()'
  'ISOcountryCode':
    'prefix': 'ISOcountryCode'
    'body': 'ISOcountryCode()'
  'addressDictionary':
    'prefix': 'addressDictionary'
    'body': 'addressDictionary()'
  'administrativeArea':
    'prefix': 'administrativeArea'
    'body': 'administrativeArea()'
  'areasOfInterest':
    'prefix': 'areasOfInterest'
    'body': 'areasOfInterest()'
  'country':
    'prefix': 'country'
    'body': 'country()'
  'initWithPlacemark:':
    'prefix': 'initWithPlacemark:'
    'body': 'initWithPlacemark(${1:CLPlacemark* placemark})'
  'inlandWater':
    'prefix': 'inlandWater'
    'body': 'inlandWater()'
  'locality':
    'prefix': 'locality'
    'body': 'locality()'
  'location':
    'prefix': 'location'
    'body': 'location()'
  'name':
    'prefix': 'name'
    'body': 'name()'
  'ocean':
    'prefix': 'ocean'
    'body': 'ocean()'
  'postalCode':
    'prefix': 'postalCode'
    'body': 'postalCode()'
  'region':
    'prefix': 'region'
    'body': 'region()'
  'subAdministrativeArea':
    'prefix': 'subAdministrativeArea'
    'body': 'subAdministrativeArea()'
  'subLocality':
    'prefix': 'subLocality'
    'body': 'subLocality()'
  'subThoroughfare':
    'prefix': 'subThoroughfare'
    'body': 'subThoroughfare()'
  'thoroughfare':
    'prefix': 'thoroughfare'
    'body': 'thoroughfare()'
  'center':
    'prefix': 'center'
    'body': 'center()'
  'containsCoordinate:':
    'prefix': 'containsCoordinate:'
    'body': 'containsCoordinate(${1:CLLocationCoordinate2D coordinate})'
  'identifier':
    'prefix': 'identifier'
    'body': 'identifier()'
  'initCircularRegionWithCenter:radius:identifier:':
    'prefix': 'initCircularRegionWithCenter:radius:identifier:'
    'body': 'initCircularRegionWithCenter(${1:CLLocationCoordinate2D center}, radius:${2:CLLocationDistance radius}, identifier:${3:NSString* identifier})'
  'notifyOnEntry':
    'prefix': 'notifyOnEntry'
    'body': 'notifyOnEntry()'
  'notifyOnExit':
    'prefix': 'notifyOnExit'
    'body': 'notifyOnExit()'
  'radius':
    'prefix': 'radius'
    'body': 'radius()'
  'setNotifyOnEntry:':
    'prefix': 'setNotifyOnEntry:'
    'body': 'setNotifyOnEntry(${1:BOOL notifyOnEntry})'
  'setNotifyOnExit:':
    'prefix': 'setNotifyOnExit:'
    'body': 'setNotifyOnExit(${1:BOOL notifyOnExit})'
  'locationManager:didChangeAuthorizationStatus:':
    'prefix': 'locationManager:didChangeAuthorizationStatus:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didChangeAuthorizationStatus:${2:CLAuthorizationStatus status})'
  'locationManager:didDetermineState:forRegion:':
    'prefix': 'locationManager:didDetermineState:forRegion:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didDetermineState:${2:CLRegionState state}, forRegion:${3:CLRegion* region})'
  'locationManager:didEnterRegion:':
    'prefix': 'locationManager:didEnterRegion:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didEnterRegion:${2:CLRegion* region})'
  'locationManager:didExitRegion:':
    'prefix': 'locationManager:didExitRegion:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didExitRegion:${2:CLRegion* region})'
  'locationManager:didFailWithError:':
    'prefix': 'locationManager:didFailWithError:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didFailWithError:${2:NSError* error})'
  'locationManager:didFinishDeferredUpdatesWithError:':
    'prefix': 'locationManager:didFinishDeferredUpdatesWithError:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didFinishDeferredUpdatesWithError:${2:NSError* error})'
  'locationManager:didRangeBeacons:inRegion:':
    'prefix': 'locationManager:didRangeBeacons:inRegion:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didRangeBeacons:${2:NSArray* beacons}, inRegion:${3:CLBeaconRegion* region})'
  'locationManager:didStartMonitoringForRegion:':
    'prefix': 'locationManager:didStartMonitoringForRegion:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didStartMonitoringForRegion:${2:CLRegion* region})'
  'locationManager:didUpdateHeading:':
    'prefix': 'locationManager:didUpdateHeading:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didUpdateHeading:${2:CLHeading* newHeading})'
  'locationManager:didUpdateLocations:':
    'prefix': 'locationManager:didUpdateLocations:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didUpdateLocations:${2:NSArray* locations})'
  'locationManager:didUpdateToLocation:fromLocation:':
    'prefix': 'locationManager:didUpdateToLocation:fromLocation:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didUpdateToLocation:${2:CLLocation* newLocation}, fromLocation:${3:CLLocation* oldLocation})'
  'locationManager:monitoringDidFailForRegion:withError:':
    'prefix': 'locationManager:monitoringDidFailForRegion:withError:'
    'body': 'locationManager(${1:CLLocationManager* manager}, monitoringDidFailForRegion:${2:CLRegion* region}, withError:${3:NSError* error})'
  'locationManager:rangingBeaconsDidFailForRegion:withError:':
    'prefix': 'locationManager:rangingBeaconsDidFailForRegion:withError:'
    'body': 'locationManager(${1:CLLocationManager* manager}, rangingBeaconsDidFailForRegion:${2:CLBeaconRegion* region}, withError:${3:NSError* error})'
  'locationManagerDidPauseLocationUpdates:':
    'prefix': 'locationManagerDidPauseLocationUpdates:'
    'body': 'locationManagerDidPauseLocationUpdates(${1:CLLocationManager* manager})'
  'locationManagerDidResumeLocationUpdates:':
    'prefix': 'locationManagerDidResumeLocationUpdates:'
    'body': 'locationManagerDidResumeLocationUpdates(${1:CLLocationManager* manager})'
  'locationManagerShouldDisplayHeadingCalibration:':
    'prefix': 'locationManagerShouldDisplayHeadingCalibration:'
    'body': 'locationManagerShouldDisplayHeadingCalibration(${1:CLLocationManager* manager})'
  'locationManager:didChangeAuthorizationStatus:':
    'prefix': 'locationManager:didChangeAuthorizationStatus:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didChangeAuthorizationStatus:${2:CLAuthorizationStatus status})'
  'locationManager:didDetermineState:forRegion:':
    'prefix': 'locationManager:didDetermineState:forRegion:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didDetermineState:${2:CLRegionState state}, forRegion:${3:CLRegion* region})'
  'locationManager:didEnterRegion:':
    'prefix': 'locationManager:didEnterRegion:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didEnterRegion:${2:CLRegion* region})'
  'locationManager:didExitRegion:':
    'prefix': 'locationManager:didExitRegion:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didExitRegion:${2:CLRegion* region})'
  'locationManager:didFailWithError:':
    'prefix': 'locationManager:didFailWithError:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didFailWithError:${2:NSError* error})'
  'locationManager:didFinishDeferredUpdatesWithError:':
    'prefix': 'locationManager:didFinishDeferredUpdatesWithError:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didFinishDeferredUpdatesWithError:${2:NSError* error})'
  'locationManager:didRangeBeacons:inRegion:':
    'prefix': 'locationManager:didRangeBeacons:inRegion:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didRangeBeacons:${2:NSArray* beacons}, inRegion:${3:CLBeaconRegion* region})'
  'locationManager:didStartMonitoringForRegion:':
    'prefix': 'locationManager:didStartMonitoringForRegion:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didStartMonitoringForRegion:${2:CLRegion* region})'
  'locationManager:didUpdateHeading:':
    'prefix': 'locationManager:didUpdateHeading:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didUpdateHeading:${2:CLHeading* newHeading})'
  'locationManager:didUpdateLocations:':
    'prefix': 'locationManager:didUpdateLocations:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didUpdateLocations:${2:NSArray* locations})'
  'locationManager:didUpdateToLocation:fromLocation:':
    'prefix': 'locationManager:didUpdateToLocation:fromLocation:'
    'body': 'locationManager(${1:CLLocationManager* manager}, didUpdateToLocation:${2:CLLocation* newLocation}, fromLocation:${3:CLLocation* oldLocation})'
  'locationManager:monitoringDidFailForRegion:withError:':
    'prefix': 'locationManager:monitoringDidFailForRegion:withError:'
    'body': 'locationManager(${1:CLLocationManager* manager}, monitoringDidFailForRegion:${2:CLRegion* region}, withError:${3:NSError* error})'
  'locationManager:rangingBeaconsDidFailForRegion:withError:':
    'prefix': 'locationManager:rangingBeaconsDidFailForRegion:withError:'
    'body': 'locationManager(${1:CLLocationManager* manager}, rangingBeaconsDidFailForRegion:${2:CLBeaconRegion* region}, withError:${3:NSError* error})'
  'locationManagerDidPauseLocationUpdates:':
    'prefix': 'locationManagerDidPauseLocationUpdates:'
    'body': 'locationManagerDidPauseLocationUpdates(${1:CLLocationManager* manager})'
  'locationManagerDidResumeLocationUpdates:':
    'prefix': 'locationManagerDidResumeLocationUpdates:'
    'body': 'locationManagerDidResumeLocationUpdates(${1:CLLocationManager* manager})'
  'locationManagerShouldDisplayHeadingCalibration:':
    'prefix': 'locationManagerShouldDisplayHeadingCalibration:'
    'body': 'locationManagerShouldDisplayHeadingCalibration(${1:CLLocationManager* manager})'
