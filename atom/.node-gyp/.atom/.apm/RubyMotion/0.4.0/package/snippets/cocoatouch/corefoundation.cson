'.source.rubymotion':
  'kCFAbsoluteTimeIntervalSince1904 (CFTimeInterval)':
    'prefix': 'kCFAbsoluteTimeIntervalSince1904'
    'body': 'KCFAbsoluteTimeIntervalSince1904'
  'kCFAbsoluteTimeIntervalSince1970 (CFTimeInterval)':
    'prefix': 'kCFAbsoluteTimeIntervalSince1970'
    'body': 'KCFAbsoluteTimeIntervalSince1970'
  'kCFAllocatorDefault (CFAllocatorRef)':
    'prefix': 'kCFAllocatorDefault'
    'body': 'KCFAllocatorDefault'
  'kCFAllocatorMalloc (CFAllocatorRef)':
    'prefix': 'kCFAllocatorMalloc'
    'body': 'KCFAllocatorMalloc'
  'kCFAllocatorMallocZone (CFAllocatorRef)':
    'prefix': 'kCFAllocatorMallocZone'
    'body': 'KCFAllocatorMallocZone'
  'kCFAllocatorNull (CFAllocatorRef)':
    'prefix': 'kCFAllocatorNull'
    'body': 'KCFAllocatorNull'
  'kCFAllocatorSystemDefault (CFAllocatorRef)':
    'prefix': 'kCFAllocatorSystemDefault'
    'body': 'KCFAllocatorSystemDefault'
  'kCFAllocatorUseContext (CFAllocatorRef)':
    'prefix': 'kCFAllocatorUseContext'
    'body': 'KCFAllocatorUseContext'
  'kCFBooleanFalse (CFBooleanRef)':
    'prefix': 'kCFBooleanFalse'
    'body': 'KCFBooleanFalse'
  'kCFBooleanTrue (CFBooleanRef)':
    'prefix': 'kCFBooleanTrue'
    'body': 'KCFBooleanTrue'
  'kCFBuddhistCalendar (CFStringRef)':
    'prefix': 'kCFBuddhistCalendar'
    'body': 'KCFBuddhistCalendar'
  'kCFBundleDevelopmentRegionKey (CFStringRef)':
    'prefix': 'kCFBundleDevelopmentRegionKey'
    'body': 'KCFBundleDevelopmentRegionKey'
  'kCFBundleExecutableKey (CFStringRef)':
    'prefix': 'kCFBundleExecutableKey'
    'body': 'KCFBundleExecutableKey'
  'kCFBundleIdentifierKey (CFStringRef)':
    'prefix': 'kCFBundleIdentifierKey'
    'body': 'KCFBundleIdentifierKey'
  'kCFBundleInfoDictionaryVersionKey (CFStringRef)':
    'prefix': 'kCFBundleInfoDictionaryVersionKey'
    'body': 'KCFBundleInfoDictionaryVersionKey'
  'kCFBundleLocalizationsKey (CFStringRef)':
    'prefix': 'kCFBundleLocalizationsKey'
    'body': 'KCFBundleLocalizationsKey'
  'kCFBundleNameKey (CFStringRef)':
    'prefix': 'kCFBundleNameKey'
    'body': 'KCFBundleNameKey'
  'kCFBundleVersionKey (CFStringRef)':
    'prefix': 'kCFBundleVersionKey'
    'body': 'KCFBundleVersionKey'
  'kCFChineseCalendar (CFStringRef)':
    'prefix': 'kCFChineseCalendar'
    'body': 'KCFChineseCalendar'
  'kCFCopyStringBagCallBacks (CFBagCallBacks)':
    'prefix': 'kCFCopyStringBagCallBacks'
    'body': 'KCFCopyStringBagCallBacks'
  'kCFCopyStringDictionaryKeyCallBacks (CFDictionaryKeyCallBacks)':
    'prefix': 'kCFCopyStringDictionaryKeyCallBacks'
    'body': 'KCFCopyStringDictionaryKeyCallBacks'
  'kCFCopyStringSetCallBacks (CFSetCallBacks)':
    'prefix': 'kCFCopyStringSetCallBacks'
    'body': 'KCFCopyStringSetCallBacks'
  'kCFCoreFoundationVersionNumber (double)':
    'prefix': 'kCFCoreFoundationVersionNumber'
    'body': 'KCFCoreFoundationVersionNumber'
  'kCFDateFormatterAMSymbol (CFStringRef)':
    'prefix': 'kCFDateFormatterAMSymbol'
    'body': 'KCFDateFormatterAMSymbol'
  'kCFDateFormatterCalendar (CFStringRef)':
    'prefix': 'kCFDateFormatterCalendar'
    'body': 'KCFDateFormatterCalendar'
  'kCFDateFormatterCalendarName (CFStringRef)':
    'prefix': 'kCFDateFormatterCalendarName'
    'body': 'KCFDateFormatterCalendarName'
  'kCFDateFormatterDefaultDate (CFStringRef)':
    'prefix': 'kCFDateFormatterDefaultDate'
    'body': 'KCFDateFormatterDefaultDate'
  'kCFDateFormatterDefaultFormat (CFStringRef)':
    'prefix': 'kCFDateFormatterDefaultFormat'
    'body': 'KCFDateFormatterDefaultFormat'
  'kCFDateFormatterDoesRelativeDateFormattingKey (CFStringRef)':
    'prefix': 'kCFDateFormatterDoesRelativeDateFormattingKey'
    'body': 'KCFDateFormatterDoesRelativeDateFormattingKey'
  'kCFDateFormatterEraSymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterEraSymbols'
    'body': 'KCFDateFormatterEraSymbols'
  'kCFDateFormatterGregorianStartDate (CFStringRef)':
    'prefix': 'kCFDateFormatterGregorianStartDate'
    'body': 'KCFDateFormatterGregorianStartDate'
  'kCFDateFormatterIsLenient (CFStringRef)':
    'prefix': 'kCFDateFormatterIsLenient'
    'body': 'KCFDateFormatterIsLenient'
  'kCFDateFormatterLongEraSymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterLongEraSymbols'
    'body': 'KCFDateFormatterLongEraSymbols'
  'kCFDateFormatterMonthSymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterMonthSymbols'
    'body': 'KCFDateFormatterMonthSymbols'
  'kCFDateFormatterPMSymbol (CFStringRef)':
    'prefix': 'kCFDateFormatterPMSymbol'
    'body': 'KCFDateFormatterPMSymbol'
  'kCFDateFormatterQuarterSymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterQuarterSymbols'
    'body': 'KCFDateFormatterQuarterSymbols'
  'kCFDateFormatterShortMonthSymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterShortMonthSymbols'
    'body': 'KCFDateFormatterShortMonthSymbols'
  'kCFDateFormatterShortQuarterSymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterShortQuarterSymbols'
    'body': 'KCFDateFormatterShortQuarterSymbols'
  'kCFDateFormatterShortStandaloneMonthSymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterShortStandaloneMonthSymbols'
    'body': 'KCFDateFormatterShortStandaloneMonthSymbols'
  'kCFDateFormatterShortStandaloneQuarterSymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterShortStandaloneQuarterSymbols'
    'body': 'KCFDateFormatterShortStandaloneQuarterSymbols'
  'kCFDateFormatterShortStandaloneWeekdaySymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterShortStandaloneWeekdaySymbols'
    'body': 'KCFDateFormatterShortStandaloneWeekdaySymbols'
  'kCFDateFormatterShortWeekdaySymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterShortWeekdaySymbols'
    'body': 'KCFDateFormatterShortWeekdaySymbols'
  'kCFDateFormatterStandaloneMonthSymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterStandaloneMonthSymbols'
    'body': 'KCFDateFormatterStandaloneMonthSymbols'
  'kCFDateFormatterStandaloneQuarterSymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterStandaloneQuarterSymbols'
    'body': 'KCFDateFormatterStandaloneQuarterSymbols'
  'kCFDateFormatterStandaloneWeekdaySymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterStandaloneWeekdaySymbols'
    'body': 'KCFDateFormatterStandaloneWeekdaySymbols'
  'kCFDateFormatterTimeZone (CFStringRef)':
    'prefix': 'kCFDateFormatterTimeZone'
    'body': 'KCFDateFormatterTimeZone'
  'kCFDateFormatterTwoDigitStartDate (CFStringRef)':
    'prefix': 'kCFDateFormatterTwoDigitStartDate'
    'body': 'KCFDateFormatterTwoDigitStartDate'
  'kCFDateFormatterVeryShortMonthSymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterVeryShortMonthSymbols'
    'body': 'KCFDateFormatterVeryShortMonthSymbols'
  'kCFDateFormatterVeryShortStandaloneMonthSymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterVeryShortStandaloneMonthSymbols'
    'body': 'KCFDateFormatterVeryShortStandaloneMonthSymbols'
  'kCFDateFormatterVeryShortStandaloneWeekdaySymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterVeryShortStandaloneWeekdaySymbols'
    'body': 'KCFDateFormatterVeryShortStandaloneWeekdaySymbols'
  'kCFDateFormatterVeryShortWeekdaySymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterVeryShortWeekdaySymbols'
    'body': 'KCFDateFormatterVeryShortWeekdaySymbols'
  'kCFDateFormatterWeekdaySymbols (CFStringRef)':
    'prefix': 'kCFDateFormatterWeekdaySymbols'
    'body': 'KCFDateFormatterWeekdaySymbols'
  'kCFErrorDescriptionKey (CFStringRef)':
    'prefix': 'kCFErrorDescriptionKey'
    'body': 'KCFErrorDescriptionKey'
  'kCFErrorDomainCocoa (CFStringRef)':
    'prefix': 'kCFErrorDomainCocoa'
    'body': 'KCFErrorDomainCocoa'
  'kCFErrorDomainMach (CFStringRef)':
    'prefix': 'kCFErrorDomainMach'
    'body': 'KCFErrorDomainMach'
  'kCFErrorDomainOSStatus (CFStringRef)':
    'prefix': 'kCFErrorDomainOSStatus'
    'body': 'KCFErrorDomainOSStatus'
  'kCFErrorDomainPOSIX (CFStringRef)':
    'prefix': 'kCFErrorDomainPOSIX'
    'body': 'KCFErrorDomainPOSIX'
  'kCFErrorFilePathKey (CFStringRef)':
    'prefix': 'kCFErrorFilePathKey'
    'body': 'KCFErrorFilePathKey'
  'kCFErrorLocalizedDescriptionKey (CFStringRef)':
    'prefix': 'kCFErrorLocalizedDescriptionKey'
    'body': 'KCFErrorLocalizedDescriptionKey'
  'kCFErrorLocalizedFailureReasonKey (CFStringRef)':
    'prefix': 'kCFErrorLocalizedFailureReasonKey'
    'body': 'KCFErrorLocalizedFailureReasonKey'
  'kCFErrorLocalizedRecoverySuggestionKey (CFStringRef)':
    'prefix': 'kCFErrorLocalizedRecoverySuggestionKey'
    'body': 'KCFErrorLocalizedRecoverySuggestionKey'
  'kCFErrorURLKey (CFStringRef)':
    'prefix': 'kCFErrorURLKey'
    'body': 'KCFErrorURLKey'
  'kCFErrorUnderlyingErrorKey (CFStringRef)':
    'prefix': 'kCFErrorUnderlyingErrorKey'
    'body': 'KCFErrorUnderlyingErrorKey'
  'kCFGregorianCalendar (CFStringRef)':
    'prefix': 'kCFGregorianCalendar'
    'body': 'KCFGregorianCalendar'
  'kCFHebrewCalendar (CFStringRef)':
    'prefix': 'kCFHebrewCalendar'
    'body': 'KCFHebrewCalendar'
  'kCFISO8601Calendar (CFStringRef)':
    'prefix': 'kCFISO8601Calendar'
    'body': 'KCFISO8601Calendar'
  'kCFIndianCalendar (CFStringRef)':
    'prefix': 'kCFIndianCalendar'
    'body': 'KCFIndianCalendar'
  'kCFIslamicCalendar (CFStringRef)':
    'prefix': 'kCFIslamicCalendar'
    'body': 'KCFIslamicCalendar'
  'kCFIslamicCivilCalendar (CFStringRef)':
    'prefix': 'kCFIslamicCivilCalendar'
    'body': 'KCFIslamicCivilCalendar'
  'kCFJapaneseCalendar (CFStringRef)':
    'prefix': 'kCFJapaneseCalendar'
    'body': 'KCFJapaneseCalendar'
  'kCFLocaleAlternateQuotationBeginDelimiterKey (CFStringRef)':
    'prefix': 'kCFLocaleAlternateQuotationBeginDelimiterKey'
    'body': 'KCFLocaleAlternateQuotationBeginDelimiterKey'
  'kCFLocaleAlternateQuotationEndDelimiterKey (CFStringRef)':
    'prefix': 'kCFLocaleAlternateQuotationEndDelimiterKey'
    'body': 'KCFLocaleAlternateQuotationEndDelimiterKey'
  'kCFLocaleCalendar (CFStringRef)':
    'prefix': 'kCFLocaleCalendar'
    'body': 'KCFLocaleCalendar'
  'kCFLocaleCalendarIdentifier (CFStringRef)':
    'prefix': 'kCFLocaleCalendarIdentifier'
    'body': 'KCFLocaleCalendarIdentifier'
  'kCFLocaleCollationIdentifier (CFStringRef)':
    'prefix': 'kCFLocaleCollationIdentifier'
    'body': 'KCFLocaleCollationIdentifier'
  'kCFLocaleCollatorIdentifier (CFStringRef)':
    'prefix': 'kCFLocaleCollatorIdentifier'
    'body': 'KCFLocaleCollatorIdentifier'
  'kCFLocaleCountryCode (CFStringRef)':
    'prefix': 'kCFLocaleCountryCode'
    'body': 'KCFLocaleCountryCode'
  'kCFLocaleCurrencyCode (CFStringRef)':
    'prefix': 'kCFLocaleCurrencyCode'
    'body': 'KCFLocaleCurrencyCode'
  'kCFLocaleCurrencySymbol (CFStringRef)':
    'prefix': 'kCFLocaleCurrencySymbol'
    'body': 'KCFLocaleCurrencySymbol'
  'kCFLocaleCurrentLocaleDidChangeNotification (CFStringRef)':
    'prefix': 'kCFLocaleCurrentLocaleDidChangeNotification'
    'body': 'KCFLocaleCurrentLocaleDidChangeNotification'
  'kCFLocaleDecimalSeparator (CFStringRef)':
    'prefix': 'kCFLocaleDecimalSeparator'
    'body': 'KCFLocaleDecimalSeparator'
  'kCFLocaleExemplarCharacterSet (CFStringRef)':
    'prefix': 'kCFLocaleExemplarCharacterSet'
    'body': 'KCFLocaleExemplarCharacterSet'
  'kCFLocaleGroupingSeparator (CFStringRef)':
    'prefix': 'kCFLocaleGroupingSeparator'
    'body': 'KCFLocaleGroupingSeparator'
  'kCFLocaleIdentifier (CFStringRef)':
    'prefix': 'kCFLocaleIdentifier'
    'body': 'KCFLocaleIdentifier'
  'kCFLocaleLanguageCode (CFStringRef)':
    'prefix': 'kCFLocaleLanguageCode'
    'body': 'KCFLocaleLanguageCode'
  'kCFLocaleMeasurementSystem (CFStringRef)':
    'prefix': 'kCFLocaleMeasurementSystem'
    'body': 'KCFLocaleMeasurementSystem'
  'kCFLocaleQuotationBeginDelimiterKey (CFStringRef)':
    'prefix': 'kCFLocaleQuotationBeginDelimiterKey'
    'body': 'KCFLocaleQuotationBeginDelimiterKey'
  'kCFLocaleQuotationEndDelimiterKey (CFStringRef)':
    'prefix': 'kCFLocaleQuotationEndDelimiterKey'
    'body': 'KCFLocaleQuotationEndDelimiterKey'
  'kCFLocaleScriptCode (CFStringRef)':
    'prefix': 'kCFLocaleScriptCode'
    'body': 'KCFLocaleScriptCode'
  'kCFLocaleUsesMetricSystem (CFStringRef)':
    'prefix': 'kCFLocaleUsesMetricSystem'
    'body': 'KCFLocaleUsesMetricSystem'
  'kCFLocaleVariantCode (CFStringRef)':
    'prefix': 'kCFLocaleVariantCode'
    'body': 'KCFLocaleVariantCode'
  'kCFNull (CFNullRef)':
    'prefix': 'kCFNull'
    'body': 'KCFNull'
  'kCFNumberFormatterAlwaysShowDecimalSeparator (CFStringRef)':
    'prefix': 'kCFNumberFormatterAlwaysShowDecimalSeparator'
    'body': 'KCFNumberFormatterAlwaysShowDecimalSeparator'
  'kCFNumberFormatterCurrencyCode (CFStringRef)':
    'prefix': 'kCFNumberFormatterCurrencyCode'
    'body': 'KCFNumberFormatterCurrencyCode'
  'kCFNumberFormatterCurrencyDecimalSeparator (CFStringRef)':
    'prefix': 'kCFNumberFormatterCurrencyDecimalSeparator'
    'body': 'KCFNumberFormatterCurrencyDecimalSeparator'
  'kCFNumberFormatterCurrencyGroupingSeparator (CFStringRef)':
    'prefix': 'kCFNumberFormatterCurrencyGroupingSeparator'
    'body': 'KCFNumberFormatterCurrencyGroupingSeparator'
  'kCFNumberFormatterCurrencySymbol (CFStringRef)':
    'prefix': 'kCFNumberFormatterCurrencySymbol'
    'body': 'KCFNumberFormatterCurrencySymbol'
  'kCFNumberFormatterDecimalSeparator (CFStringRef)':
    'prefix': 'kCFNumberFormatterDecimalSeparator'
    'body': 'KCFNumberFormatterDecimalSeparator'
  'kCFNumberFormatterDefaultFormat (CFStringRef)':
    'prefix': 'kCFNumberFormatterDefaultFormat'
    'body': 'KCFNumberFormatterDefaultFormat'
  'kCFNumberFormatterExponentSymbol (CFStringRef)':
    'prefix': 'kCFNumberFormatterExponentSymbol'
    'body': 'KCFNumberFormatterExponentSymbol'
  'kCFNumberFormatterFormatWidth (CFStringRef)':
    'prefix': 'kCFNumberFormatterFormatWidth'
    'body': 'KCFNumberFormatterFormatWidth'
  'kCFNumberFormatterGroupingSeparator (CFStringRef)':
    'prefix': 'kCFNumberFormatterGroupingSeparator'
    'body': 'KCFNumberFormatterGroupingSeparator'
  'kCFNumberFormatterGroupingSize (CFStringRef)':
    'prefix': 'kCFNumberFormatterGroupingSize'
    'body': 'KCFNumberFormatterGroupingSize'
  'kCFNumberFormatterInfinitySymbol (CFStringRef)':
    'prefix': 'kCFNumberFormatterInfinitySymbol'
    'body': 'KCFNumberFormatterInfinitySymbol'
  'kCFNumberFormatterInternationalCurrencySymbol (CFStringRef)':
    'prefix': 'kCFNumberFormatterInternationalCurrencySymbol'
    'body': 'KCFNumberFormatterInternationalCurrencySymbol'
  'kCFNumberFormatterIsLenient (CFStringRef)':
    'prefix': 'kCFNumberFormatterIsLenient'
    'body': 'KCFNumberFormatterIsLenient'
  'kCFNumberFormatterMaxFractionDigits (CFStringRef)':
    'prefix': 'kCFNumberFormatterMaxFractionDigits'
    'body': 'KCFNumberFormatterMaxFractionDigits'
  'kCFNumberFormatterMaxIntegerDigits (CFStringRef)':
    'prefix': 'kCFNumberFormatterMaxIntegerDigits'
    'body': 'KCFNumberFormatterMaxIntegerDigits'
  'kCFNumberFormatterMaxSignificantDigits (CFStringRef)':
    'prefix': 'kCFNumberFormatterMaxSignificantDigits'
    'body': 'KCFNumberFormatterMaxSignificantDigits'
  'kCFNumberFormatterMinFractionDigits (CFStringRef)':
    'prefix': 'kCFNumberFormatterMinFractionDigits'
    'body': 'KCFNumberFormatterMinFractionDigits'
  'kCFNumberFormatterMinIntegerDigits (CFStringRef)':
    'prefix': 'kCFNumberFormatterMinIntegerDigits'
    'body': 'KCFNumberFormatterMinIntegerDigits'
  'kCFNumberFormatterMinSignificantDigits (CFStringRef)':
    'prefix': 'kCFNumberFormatterMinSignificantDigits'
    'body': 'KCFNumberFormatterMinSignificantDigits'
  'kCFNumberFormatterMinusSign (CFStringRef)':
    'prefix': 'kCFNumberFormatterMinusSign'
    'body': 'KCFNumberFormatterMinusSign'
  'kCFNumberFormatterMultiplier (CFStringRef)':
    'prefix': 'kCFNumberFormatterMultiplier'
    'body': 'KCFNumberFormatterMultiplier'
  'kCFNumberFormatterNaNSymbol (CFStringRef)':
    'prefix': 'kCFNumberFormatterNaNSymbol'
    'body': 'KCFNumberFormatterNaNSymbol'
  'kCFNumberFormatterNegativePrefix (CFStringRef)':
    'prefix': 'kCFNumberFormatterNegativePrefix'
    'body': 'KCFNumberFormatterNegativePrefix'
  'kCFNumberFormatterNegativeSuffix (CFStringRef)':
    'prefix': 'kCFNumberFormatterNegativeSuffix'
    'body': 'KCFNumberFormatterNegativeSuffix'
  'kCFNumberFormatterPaddingCharacter (CFStringRef)':
    'prefix': 'kCFNumberFormatterPaddingCharacter'
    'body': 'KCFNumberFormatterPaddingCharacter'
  'kCFNumberFormatterPaddingPosition (CFStringRef)':
    'prefix': 'kCFNumberFormatterPaddingPosition'
    'body': 'KCFNumberFormatterPaddingPosition'
  'kCFNumberFormatterPerMillSymbol (CFStringRef)':
    'prefix': 'kCFNumberFormatterPerMillSymbol'
    'body': 'KCFNumberFormatterPerMillSymbol'
  'kCFNumberFormatterPercentSymbol (CFStringRef)':
    'prefix': 'kCFNumberFormatterPercentSymbol'
    'body': 'KCFNumberFormatterPercentSymbol'
  'kCFNumberFormatterPlusSign (CFStringRef)':
    'prefix': 'kCFNumberFormatterPlusSign'
    'body': 'KCFNumberFormatterPlusSign'
  'kCFNumberFormatterPositivePrefix (CFStringRef)':
    'prefix': 'kCFNumberFormatterPositivePrefix'
    'body': 'KCFNumberFormatterPositivePrefix'
  'kCFNumberFormatterPositiveSuffix (CFStringRef)':
    'prefix': 'kCFNumberFormatterPositiveSuffix'
    'body': 'KCFNumberFormatterPositiveSuffix'
  'kCFNumberFormatterRoundingIncrement (CFStringRef)':
    'prefix': 'kCFNumberFormatterRoundingIncrement'
    'body': 'KCFNumberFormatterRoundingIncrement'
  'kCFNumberFormatterRoundingMode (CFStringRef)':
    'prefix': 'kCFNumberFormatterRoundingMode'
    'body': 'KCFNumberFormatterRoundingMode'
  'kCFNumberFormatterSecondaryGroupingSize (CFStringRef)':
    'prefix': 'kCFNumberFormatterSecondaryGroupingSize'
    'body': 'KCFNumberFormatterSecondaryGroupingSize'
  'kCFNumberFormatterUseGroupingSeparator (CFStringRef)':
    'prefix': 'kCFNumberFormatterUseGroupingSeparator'
    'body': 'KCFNumberFormatterUseGroupingSeparator'
  'kCFNumberFormatterUseSignificantDigits (CFStringRef)':
    'prefix': 'kCFNumberFormatterUseSignificantDigits'
    'body': 'KCFNumberFormatterUseSignificantDigits'
  'kCFNumberFormatterZeroSymbol (CFStringRef)':
    'prefix': 'kCFNumberFormatterZeroSymbol'
    'body': 'KCFNumberFormatterZeroSymbol'
  'kCFNumberNaN (CFNumberRef)':
    'prefix': 'kCFNumberNaN'
    'body': 'KCFNumberNaN'
  'kCFNumberNegativeInfinity (CFNumberRef)':
    'prefix': 'kCFNumberNegativeInfinity'
    'body': 'KCFNumberNegativeInfinity'
  'kCFNumberPositiveInfinity (CFNumberRef)':
    'prefix': 'kCFNumberPositiveInfinity'
    'body': 'KCFNumberPositiveInfinity'
  'kCFPersianCalendar (CFStringRef)':
    'prefix': 'kCFPersianCalendar'
    'body': 'KCFPersianCalendar'
  'kCFPlugInDynamicRegisterFunctionKey (CFStringRef)':
    'prefix': 'kCFPlugInDynamicRegisterFunctionKey'
    'body': 'KCFPlugInDynamicRegisterFunctionKey'
  'kCFPlugInDynamicRegistrationKey (CFStringRef)':
    'prefix': 'kCFPlugInDynamicRegistrationKey'
    'body': 'KCFPlugInDynamicRegistrationKey'
  'kCFPlugInFactoriesKey (CFStringRef)':
    'prefix': 'kCFPlugInFactoriesKey'
    'body': 'KCFPlugInFactoriesKey'
  'kCFPlugInTypesKey (CFStringRef)':
    'prefix': 'kCFPlugInTypesKey'
    'body': 'KCFPlugInTypesKey'
  'kCFPlugInUnloadFunctionKey (CFStringRef)':
    'prefix': 'kCFPlugInUnloadFunctionKey'
    'body': 'KCFPlugInUnloadFunctionKey'
  'kCFPreferencesAnyApplication (CFStringRef)':
    'prefix': 'kCFPreferencesAnyApplication'
    'body': 'KCFPreferencesAnyApplication'
  'kCFPreferencesAnyHost (CFStringRef)':
    'prefix': 'kCFPreferencesAnyHost'
    'body': 'KCFPreferencesAnyHost'
  'kCFPreferencesAnyUser (CFStringRef)':
    'prefix': 'kCFPreferencesAnyUser'
    'body': 'KCFPreferencesAnyUser'
  'kCFPreferencesCurrentApplication (CFStringRef)':
    'prefix': 'kCFPreferencesCurrentApplication'
    'body': 'KCFPreferencesCurrentApplication'
  'kCFPreferencesCurrentHost (CFStringRef)':
    'prefix': 'kCFPreferencesCurrentHost'
    'body': 'KCFPreferencesCurrentHost'
  'kCFPreferencesCurrentUser (CFStringRef)':
    'prefix': 'kCFPreferencesCurrentUser'
    'body': 'KCFPreferencesCurrentUser'
  'kCFRepublicOfChinaCalendar (CFStringRef)':
    'prefix': 'kCFRepublicOfChinaCalendar'
    'body': 'KCFRepublicOfChinaCalendar'
  'kCFRunLoopCommonModes (CFStringRef)':
    'prefix': 'kCFRunLoopCommonModes'
    'body': 'KCFRunLoopCommonModes'
  'kCFRunLoopDefaultMode (CFStringRef)':
    'prefix': 'kCFRunLoopDefaultMode'
    'body': 'KCFRunLoopDefaultMode'
  'kCFSocketCommandKey (CFStringRef)':
    'prefix': 'kCFSocketCommandKey'
    'body': 'KCFSocketCommandKey'
  'kCFSocketErrorKey (CFStringRef)':
    'prefix': 'kCFSocketErrorKey'
    'body': 'KCFSocketErrorKey'
  'kCFSocketNameKey (CFStringRef)':
    'prefix': 'kCFSocketNameKey'
    'body': 'KCFSocketNameKey'
  'kCFSocketRegisterCommand (CFStringRef)':
    'prefix': 'kCFSocketRegisterCommand'
    'body': 'KCFSocketRegisterCommand'
  'kCFSocketResultKey (CFStringRef)':
    'prefix': 'kCFSocketResultKey'
    'body': 'KCFSocketResultKey'
  'kCFSocketRetrieveCommand (CFStringRef)':
    'prefix': 'kCFSocketRetrieveCommand'
    'body': 'KCFSocketRetrieveCommand'
  'kCFSocketValueKey (CFStringRef)':
    'prefix': 'kCFSocketValueKey'
    'body': 'KCFSocketValueKey'
  'kCFStreamPropertyAppendToFile (CFStringRef)':
    'prefix': 'kCFStreamPropertyAppendToFile'
    'body': 'KCFStreamPropertyAppendToFile'
  'kCFStreamPropertyDataWritten (CFStringRef)':
    'prefix': 'kCFStreamPropertyDataWritten'
    'body': 'KCFStreamPropertyDataWritten'
  'kCFStreamPropertyFileCurrentOffset (CFStringRef)':
    'prefix': 'kCFStreamPropertyFileCurrentOffset'
    'body': 'KCFStreamPropertyFileCurrentOffset'
  'kCFStreamPropertySocketNativeHandle (CFStringRef)':
    'prefix': 'kCFStreamPropertySocketNativeHandle'
    'body': 'KCFStreamPropertySocketNativeHandle'
  'kCFStreamPropertySocketRemoteHostName (CFStringRef)':
    'prefix': 'kCFStreamPropertySocketRemoteHostName'
    'body': 'KCFStreamPropertySocketRemoteHostName'
  'kCFStreamPropertySocketRemotePortNumber (CFStringRef)':
    'prefix': 'kCFStreamPropertySocketRemotePortNumber'
    'body': 'KCFStreamPropertySocketRemotePortNumber'
  'kCFStringBinaryHeapCallBacks (CFBinaryHeapCallBacks)':
    'prefix': 'kCFStringBinaryHeapCallBacks'
    'body': 'KCFStringBinaryHeapCallBacks'
  'kCFStringTransformFullwidthHalfwidth (CFStringRef)':
    'prefix': 'kCFStringTransformFullwidthHalfwidth'
    'body': 'KCFStringTransformFullwidthHalfwidth'
  'kCFStringTransformHiraganaKatakana (CFStringRef)':
    'prefix': 'kCFStringTransformHiraganaKatakana'
    'body': 'KCFStringTransformHiraganaKatakana'
  'kCFStringTransformLatinArabic (CFStringRef)':
    'prefix': 'kCFStringTransformLatinArabic'
    'body': 'KCFStringTransformLatinArabic'
  'kCFStringTransformLatinCyrillic (CFStringRef)':
    'prefix': 'kCFStringTransformLatinCyrillic'
    'body': 'KCFStringTransformLatinCyrillic'
  'kCFStringTransformLatinGreek (CFStringRef)':
    'prefix': 'kCFStringTransformLatinGreek'
    'body': 'KCFStringTransformLatinGreek'
  'kCFStringTransformLatinHangul (CFStringRef)':
    'prefix': 'kCFStringTransformLatinHangul'
    'body': 'KCFStringTransformLatinHangul'
  'kCFStringTransformLatinHebrew (CFStringRef)':
    'prefix': 'kCFStringTransformLatinHebrew'
    'body': 'KCFStringTransformLatinHebrew'
  'kCFStringTransformLatinHiragana (CFStringRef)':
    'prefix': 'kCFStringTransformLatinHiragana'
    'body': 'KCFStringTransformLatinHiragana'
  'kCFStringTransformLatinKatakana (CFStringRef)':
    'prefix': 'kCFStringTransformLatinKatakana'
    'body': 'KCFStringTransformLatinKatakana'
  'kCFStringTransformLatinThai (CFStringRef)':
    'prefix': 'kCFStringTransformLatinThai'
    'body': 'KCFStringTransformLatinThai'
  'kCFStringTransformMandarinLatin (CFStringRef)':
    'prefix': 'kCFStringTransformMandarinLatin'
    'body': 'KCFStringTransformMandarinLatin'
  'kCFStringTransformStripCombiningMarks (CFStringRef)':
    'prefix': 'kCFStringTransformStripCombiningMarks'
    'body': 'KCFStringTransformStripCombiningMarks'
  'kCFStringTransformStripDiacritics (CFStringRef)':
    'prefix': 'kCFStringTransformStripDiacritics'
    'body': 'KCFStringTransformStripDiacritics'
  'kCFStringTransformToLatin (CFStringRef)':
    'prefix': 'kCFStringTransformToLatin'
    'body': 'KCFStringTransformToLatin'
  'kCFStringTransformToUnicodeName (CFStringRef)':
    'prefix': 'kCFStringTransformToUnicodeName'
    'body': 'KCFStringTransformToUnicodeName'
  'kCFStringTransformToXMLHex (CFStringRef)':
    'prefix': 'kCFStringTransformToXMLHex'
    'body': 'KCFStringTransformToXMLHex'
  'kCFTimeZoneSystemTimeZoneDidChangeNotification (CFStringRef)':
    'prefix': 'kCFTimeZoneSystemTimeZoneDidChangeNotification'
    'body': 'KCFTimeZoneSystemTimeZoneDidChangeNotification'
  'kCFTypeArrayCallBacks (CFArrayCallBacks)':
    'prefix': 'kCFTypeArrayCallBacks'
    'body': 'KCFTypeArrayCallBacks'
  'kCFTypeBagCallBacks (CFBagCallBacks)':
    'prefix': 'kCFTypeBagCallBacks'
    'body': 'KCFTypeBagCallBacks'
  'kCFTypeDictionaryKeyCallBacks (CFDictionaryKeyCallBacks)':
    'prefix': 'kCFTypeDictionaryKeyCallBacks'
    'body': 'KCFTypeDictionaryKeyCallBacks'
  'kCFTypeDictionaryValueCallBacks (CFDictionaryValueCallBacks)':
    'prefix': 'kCFTypeDictionaryValueCallBacks'
    'body': 'KCFTypeDictionaryValueCallBacks'
  'kCFTypeSetCallBacks (CFSetCallBacks)':
    'prefix': 'kCFTypeSetCallBacks'
    'body': 'KCFTypeSetCallBacks'
  'kCFURLAttributeModificationDateKey (CFStringRef)':
    'prefix': 'kCFURLAttributeModificationDateKey'
    'body': 'KCFURLAttributeModificationDateKey'
  'kCFURLContentAccessDateKey (CFStringRef)':
    'prefix': 'kCFURLContentAccessDateKey'
    'body': 'KCFURLContentAccessDateKey'
  'kCFURLContentModificationDateKey (CFStringRef)':
    'prefix': 'kCFURLContentModificationDateKey'
    'body': 'KCFURLContentModificationDateKey'
  'kCFURLCreationDateKey (CFStringRef)':
    'prefix': 'kCFURLCreationDateKey'
    'body': 'KCFURLCreationDateKey'
  'kCFURLCustomIconKey (CFStringRef)':
    'prefix': 'kCFURLCustomIconKey'
    'body': 'KCFURLCustomIconKey'
  'kCFURLEffectiveIconKey (CFStringRef)':
    'prefix': 'kCFURLEffectiveIconKey'
    'body': 'KCFURLEffectiveIconKey'
  'kCFURLFileAllocatedSizeKey (CFStringRef)':
    'prefix': 'kCFURLFileAllocatedSizeKey'
    'body': 'KCFURLFileAllocatedSizeKey'
  'kCFURLFileDirectoryContents (CFStringRef)':
    'prefix': 'kCFURLFileDirectoryContents'
    'body': 'KCFURLFileDirectoryContents'
  'kCFURLFileExists (CFStringRef)':
    'prefix': 'kCFURLFileExists'
    'body': 'KCFURLFileExists'
  'kCFURLFileLastModificationTime (CFStringRef)':
    'prefix': 'kCFURLFileLastModificationTime'
    'body': 'KCFURLFileLastModificationTime'
  'kCFURLFileLength (CFStringRef)':
    'prefix': 'kCFURLFileLength'
    'body': 'KCFURLFileLength'
  'kCFURLFileOwnerID (CFStringRef)':
    'prefix': 'kCFURLFileOwnerID'
    'body': 'KCFURLFileOwnerID'
  'kCFURLFilePOSIXMode (CFStringRef)':
    'prefix': 'kCFURLFilePOSIXMode'
    'body': 'KCFURLFilePOSIXMode'
  'kCFURLFileResourceIdentifierKey (CFStringRef)':
    'prefix': 'kCFURLFileResourceIdentifierKey'
    'body': 'KCFURLFileResourceIdentifierKey'
  'kCFURLFileResourceTypeBlockSpecial (CFStringRef)':
    'prefix': 'kCFURLFileResourceTypeBlockSpecial'
    'body': 'KCFURLFileResourceTypeBlockSpecial'
  'kCFURLFileResourceTypeCharacterSpecial (CFStringRef)':
    'prefix': 'kCFURLFileResourceTypeCharacterSpecial'
    'body': 'KCFURLFileResourceTypeCharacterSpecial'
  'kCFURLFileResourceTypeDirectory (CFStringRef)':
    'prefix': 'kCFURLFileResourceTypeDirectory'
    'body': 'KCFURLFileResourceTypeDirectory'
  'kCFURLFileResourceTypeKey (CFStringRef)':
    'prefix': 'kCFURLFileResourceTypeKey'
    'body': 'KCFURLFileResourceTypeKey'
  'kCFURLFileResourceTypeNamedPipe (CFStringRef)':
    'prefix': 'kCFURLFileResourceTypeNamedPipe'
    'body': 'KCFURLFileResourceTypeNamedPipe'
  'kCFURLFileResourceTypeRegular (CFStringRef)':
    'prefix': 'kCFURLFileResourceTypeRegular'
    'body': 'KCFURLFileResourceTypeRegular'
  'kCFURLFileResourceTypeSocket (CFStringRef)':
    'prefix': 'kCFURLFileResourceTypeSocket'
    'body': 'KCFURLFileResourceTypeSocket'
  'kCFURLFileResourceTypeSymbolicLink (CFStringRef)':
    'prefix': 'kCFURLFileResourceTypeSymbolicLink'
    'body': 'KCFURLFileResourceTypeSymbolicLink'
  'kCFURLFileResourceTypeUnknown (CFStringRef)':
    'prefix': 'kCFURLFileResourceTypeUnknown'
    'body': 'KCFURLFileResourceTypeUnknown'
  'kCFURLFileSecurityKey (CFStringRef)':
    'prefix': 'kCFURLFileSecurityKey'
    'body': 'KCFURLFileSecurityKey'
  'kCFURLFileSizeKey (CFStringRef)':
    'prefix': 'kCFURLFileSizeKey'
    'body': 'KCFURLFileSizeKey'
  'kCFURLHTTPStatusCode (CFStringRef)':
    'prefix': 'kCFURLHTTPStatusCode'
    'body': 'KCFURLHTTPStatusCode'
  'kCFURLHTTPStatusLine (CFStringRef)':
    'prefix': 'kCFURLHTTPStatusLine'
    'body': 'KCFURLHTTPStatusLine'
  'kCFURLHasHiddenExtensionKey (CFStringRef)':
    'prefix': 'kCFURLHasHiddenExtensionKey'
    'body': 'KCFURLHasHiddenExtensionKey'
  'kCFURLIsAliasFileKey (CFStringRef)':
    'prefix': 'kCFURLIsAliasFileKey'
    'body': 'KCFURLIsAliasFileKey'
  'kCFURLIsDirectoryKey (CFStringRef)':
    'prefix': 'kCFURLIsDirectoryKey'
    'body': 'KCFURLIsDirectoryKey'
  'kCFURLIsExcludedFromBackupKey (CFStringRef)':
    'prefix': 'kCFURLIsExcludedFromBackupKey'
    'body': 'KCFURLIsExcludedFromBackupKey'
  'kCFURLIsExecutableKey (CFStringRef)':
    'prefix': 'kCFURLIsExecutableKey'
    'body': 'KCFURLIsExecutableKey'
  'kCFURLIsHiddenKey (CFStringRef)':
    'prefix': 'kCFURLIsHiddenKey'
    'body': 'KCFURLIsHiddenKey'
  'kCFURLIsMountTriggerKey (CFStringRef)':
    'prefix': 'kCFURLIsMountTriggerKey'
    'body': 'KCFURLIsMountTriggerKey'
  'kCFURLIsPackageKey (CFStringRef)':
    'prefix': 'kCFURLIsPackageKey'
    'body': 'KCFURLIsPackageKey'
  'kCFURLIsReadableKey (CFStringRef)':
    'prefix': 'kCFURLIsReadableKey'
    'body': 'KCFURLIsReadableKey'
  'kCFURLIsRegularFileKey (CFStringRef)':
    'prefix': 'kCFURLIsRegularFileKey'
    'body': 'KCFURLIsRegularFileKey'
  'kCFURLIsSymbolicLinkKey (CFStringRef)':
    'prefix': 'kCFURLIsSymbolicLinkKey'
    'body': 'KCFURLIsSymbolicLinkKey'
  'kCFURLIsSystemImmutableKey (CFStringRef)':
    'prefix': 'kCFURLIsSystemImmutableKey'
    'body': 'KCFURLIsSystemImmutableKey'
  'kCFURLIsUbiquitousItemKey (CFStringRef)':
    'prefix': 'kCFURLIsUbiquitousItemKey'
    'body': 'KCFURLIsUbiquitousItemKey'
  'kCFURLIsUserImmutableKey (CFStringRef)':
    'prefix': 'kCFURLIsUserImmutableKey'
    'body': 'KCFURLIsUserImmutableKey'
  'kCFURLIsVolumeKey (CFStringRef)':
    'prefix': 'kCFURLIsVolumeKey'
    'body': 'KCFURLIsVolumeKey'
  'kCFURLIsWritableKey (CFStringRef)':
    'prefix': 'kCFURLIsWritableKey'
    'body': 'KCFURLIsWritableKey'
  'kCFURLKeysOfUnsetValuesKey (CFStringRef)':
    'prefix': 'kCFURLKeysOfUnsetValuesKey'
    'body': 'KCFURLKeysOfUnsetValuesKey'
  'kCFURLLabelColorKey (CFStringRef)':
    'prefix': 'kCFURLLabelColorKey'
    'body': 'KCFURLLabelColorKey'
  'kCFURLLabelNumberKey (CFStringRef)':
    'prefix': 'kCFURLLabelNumberKey'
    'body': 'KCFURLLabelNumberKey'
  'kCFURLLinkCountKey (CFStringRef)':
    'prefix': 'kCFURLLinkCountKey'
    'body': 'KCFURLLinkCountKey'
  'kCFURLLocalizedLabelKey (CFStringRef)':
    'prefix': 'kCFURLLocalizedLabelKey'
    'body': 'KCFURLLocalizedLabelKey'
  'kCFURLLocalizedNameKey (CFStringRef)':
    'prefix': 'kCFURLLocalizedNameKey'
    'body': 'KCFURLLocalizedNameKey'
  'kCFURLLocalizedTypeDescriptionKey (CFStringRef)':
    'prefix': 'kCFURLLocalizedTypeDescriptionKey'
    'body': 'KCFURLLocalizedTypeDescriptionKey'
  'kCFURLNameKey (CFStringRef)':
    'prefix': 'kCFURLNameKey'
    'body': 'KCFURLNameKey'
  'kCFURLParentDirectoryURLKey (CFStringRef)':
    'prefix': 'kCFURLParentDirectoryURLKey'
    'body': 'KCFURLParentDirectoryURLKey'
  'kCFURLPathKey (CFStringRef)':
    'prefix': 'kCFURLPathKey'
    'body': 'KCFURLPathKey'
  'kCFURLPreferredIOBlockSizeKey (CFStringRef)':
    'prefix': 'kCFURLPreferredIOBlockSizeKey'
    'body': 'KCFURLPreferredIOBlockSizeKey'
  'kCFURLTotalFileAllocatedSizeKey (CFStringRef)':
    'prefix': 'kCFURLTotalFileAllocatedSizeKey'
    'body': 'KCFURLTotalFileAllocatedSizeKey'
  'kCFURLTotalFileSizeKey (CFStringRef)':
    'prefix': 'kCFURLTotalFileSizeKey'
    'body': 'KCFURLTotalFileSizeKey'
  'kCFURLTypeIdentifierKey (CFStringRef)':
    'prefix': 'kCFURLTypeIdentifierKey'
    'body': 'KCFURLTypeIdentifierKey'
  'kCFURLUbiquitousItemDownloadingErrorKey (CFStringRef)':
    'prefix': 'kCFURLUbiquitousItemDownloadingErrorKey'
    'body': 'KCFURLUbiquitousItemDownloadingErrorKey'
  'kCFURLUbiquitousItemDownloadingStatusCurrent (CFStringRef)':
    'prefix': 'kCFURLUbiquitousItemDownloadingStatusCurrent'
    'body': 'KCFURLUbiquitousItemDownloadingStatusCurrent'
  'kCFURLUbiquitousItemDownloadingStatusDownloaded (CFStringRef)':
    'prefix': 'kCFURLUbiquitousItemDownloadingStatusDownloaded'
    'body': 'KCFURLUbiquitousItemDownloadingStatusDownloaded'
  'kCFURLUbiquitousItemDownloadingStatusKey (CFStringRef)':
    'prefix': 'kCFURLUbiquitousItemDownloadingStatusKey'
    'body': 'KCFURLUbiquitousItemDownloadingStatusKey'
  'kCFURLUbiquitousItemDownloadingStatusNotDownloaded (CFStringRef)':
    'prefix': 'kCFURLUbiquitousItemDownloadingStatusNotDownloaded'
    'body': 'KCFURLUbiquitousItemDownloadingStatusNotDownloaded'
  'kCFURLUbiquitousItemHasUnresolvedConflictsKey (CFStringRef)':
    'prefix': 'kCFURLUbiquitousItemHasUnresolvedConflictsKey'
    'body': 'KCFURLUbiquitousItemHasUnresolvedConflictsKey'
  'kCFURLUbiquitousItemIsDownloadedKey (CFStringRef)':
    'prefix': 'kCFURLUbiquitousItemIsDownloadedKey'
    'body': 'KCFURLUbiquitousItemIsDownloadedKey'
  'kCFURLUbiquitousItemIsDownloadingKey (CFStringRef)':
    'prefix': 'kCFURLUbiquitousItemIsDownloadingKey'
    'body': 'KCFURLUbiquitousItemIsDownloadingKey'
  'kCFURLUbiquitousItemIsUploadedKey (CFStringRef)':
    'prefix': 'kCFURLUbiquitousItemIsUploadedKey'
    'body': 'KCFURLUbiquitousItemIsUploadedKey'
  'kCFURLUbiquitousItemIsUploadingKey (CFStringRef)':
    'prefix': 'kCFURLUbiquitousItemIsUploadingKey'
    'body': 'KCFURLUbiquitousItemIsUploadingKey'
  'kCFURLUbiquitousItemPercentDownloadedKey (CFStringRef)':
    'prefix': 'kCFURLUbiquitousItemPercentDownloadedKey'
    'body': 'KCFURLUbiquitousItemPercentDownloadedKey'
  'kCFURLUbiquitousItemPercentUploadedKey (CFStringRef)':
    'prefix': 'kCFURLUbiquitousItemPercentUploadedKey'
    'body': 'KCFURLUbiquitousItemPercentUploadedKey'
  'kCFURLUbiquitousItemUploadingErrorKey (CFStringRef)':
    'prefix': 'kCFURLUbiquitousItemUploadingErrorKey'
    'body': 'KCFURLUbiquitousItemUploadingErrorKey'
  'kCFURLVolumeAvailableCapacityKey (CFStringRef)':
    'prefix': 'kCFURLVolumeAvailableCapacityKey'
    'body': 'KCFURLVolumeAvailableCapacityKey'
  'kCFURLVolumeCreationDateKey (CFStringRef)':
    'prefix': 'kCFURLVolumeCreationDateKey'
    'body': 'KCFURLVolumeCreationDateKey'
  'kCFURLVolumeIdentifierKey (CFStringRef)':
    'prefix': 'kCFURLVolumeIdentifierKey'
    'body': 'KCFURLVolumeIdentifierKey'
  'kCFURLVolumeIsAutomountedKey (CFStringRef)':
    'prefix': 'kCFURLVolumeIsAutomountedKey'
    'body': 'KCFURLVolumeIsAutomountedKey'
  'kCFURLVolumeIsBrowsableKey (CFStringRef)':
    'prefix': 'kCFURLVolumeIsBrowsableKey'
    'body': 'KCFURLVolumeIsBrowsableKey'
  'kCFURLVolumeIsEjectableKey (CFStringRef)':
    'prefix': 'kCFURLVolumeIsEjectableKey'
    'body': 'KCFURLVolumeIsEjectableKey'
  'kCFURLVolumeIsInternalKey (CFStringRef)':
    'prefix': 'kCFURLVolumeIsInternalKey'
    'body': 'KCFURLVolumeIsInternalKey'
  'kCFURLVolumeIsJournalingKey (CFStringRef)':
    'prefix': 'kCFURLVolumeIsJournalingKey'
    'body': 'KCFURLVolumeIsJournalingKey'
  'kCFURLVolumeIsLocalKey (CFStringRef)':
    'prefix': 'kCFURLVolumeIsLocalKey'
    'body': 'KCFURLVolumeIsLocalKey'
  'kCFURLVolumeIsReadOnlyKey (CFStringRef)':
    'prefix': 'kCFURLVolumeIsReadOnlyKey'
    'body': 'KCFURLVolumeIsReadOnlyKey'
  'kCFURLVolumeIsRemovableKey (CFStringRef)':
    'prefix': 'kCFURLVolumeIsRemovableKey'
    'body': 'KCFURLVolumeIsRemovableKey'
  'kCFURLVolumeLocalizedFormatDescriptionKey (CFStringRef)':
    'prefix': 'kCFURLVolumeLocalizedFormatDescriptionKey'
    'body': 'KCFURLVolumeLocalizedFormatDescriptionKey'
  'kCFURLVolumeLocalizedNameKey (CFStringRef)':
    'prefix': 'kCFURLVolumeLocalizedNameKey'
    'body': 'KCFURLVolumeLocalizedNameKey'
  'kCFURLVolumeMaximumFileSizeKey (CFStringRef)':
    'prefix': 'kCFURLVolumeMaximumFileSizeKey'
    'body': 'KCFURLVolumeMaximumFileSizeKey'
  'kCFURLVolumeNameKey (CFStringRef)':
    'prefix': 'kCFURLVolumeNameKey'
    'body': 'KCFURLVolumeNameKey'
  'kCFURLVolumeResourceCountKey (CFStringRef)':
    'prefix': 'kCFURLVolumeResourceCountKey'
    'body': 'KCFURLVolumeResourceCountKey'
  'kCFURLVolumeSupportsAdvisoryFileLockingKey (CFStringRef)':
    'prefix': 'kCFURLVolumeSupportsAdvisoryFileLockingKey'
    'body': 'KCFURLVolumeSupportsAdvisoryFileLockingKey'
  'kCFURLVolumeSupportsCasePreservedNamesKey (CFStringRef)':
    'prefix': 'kCFURLVolumeSupportsCasePreservedNamesKey'
    'body': 'KCFURLVolumeSupportsCasePreservedNamesKey'
  'kCFURLVolumeSupportsCaseSensitiveNamesKey (CFStringRef)':
    'prefix': 'kCFURLVolumeSupportsCaseSensitiveNamesKey'
    'body': 'KCFURLVolumeSupportsCaseSensitiveNamesKey'
  'kCFURLVolumeSupportsExtendedSecurityKey (CFStringRef)':
    'prefix': 'kCFURLVolumeSupportsExtendedSecurityKey'
    'body': 'KCFURLVolumeSupportsExtendedSecurityKey'
  'kCFURLVolumeSupportsHardLinksKey (CFStringRef)':
    'prefix': 'kCFURLVolumeSupportsHardLinksKey'
    'body': 'KCFURLVolumeSupportsHardLinksKey'
  'kCFURLVolumeSupportsJournalingKey (CFStringRef)':
    'prefix': 'kCFURLVolumeSupportsJournalingKey'
    'body': 'KCFURLVolumeSupportsJournalingKey'
  'kCFURLVolumeSupportsPersistentIDsKey (CFStringRef)':
    'prefix': 'kCFURLVolumeSupportsPersistentIDsKey'
    'body': 'KCFURLVolumeSupportsPersistentIDsKey'
  'kCFURLVolumeSupportsRenamingKey (CFStringRef)':
    'prefix': 'kCFURLVolumeSupportsRenamingKey'
    'body': 'KCFURLVolumeSupportsRenamingKey'
  'kCFURLVolumeSupportsRootDirectoryDatesKey (CFStringRef)':
    'prefix': 'kCFURLVolumeSupportsRootDirectoryDatesKey'
    'body': 'KCFURLVolumeSupportsRootDirectoryDatesKey'
  'kCFURLVolumeSupportsSparseFilesKey (CFStringRef)':
    'prefix': 'kCFURLVolumeSupportsSparseFilesKey'
    'body': 'KCFURLVolumeSupportsSparseFilesKey'
  'kCFURLVolumeSupportsSymbolicLinksKey (CFStringRef)':
    'prefix': 'kCFURLVolumeSupportsSymbolicLinksKey'
    'body': 'KCFURLVolumeSupportsSymbolicLinksKey'
  'kCFURLVolumeSupportsVolumeSizesKey (CFStringRef)':
    'prefix': 'kCFURLVolumeSupportsVolumeSizesKey'
    'body': 'KCFURLVolumeSupportsVolumeSizesKey'
  'kCFURLVolumeSupportsZeroRunsKey (CFStringRef)':
    'prefix': 'kCFURLVolumeSupportsZeroRunsKey'
    'body': 'KCFURLVolumeSupportsZeroRunsKey'
  'kCFURLVolumeTotalCapacityKey (CFStringRef)':
    'prefix': 'kCFURLVolumeTotalCapacityKey'
    'body': 'KCFURLVolumeTotalCapacityKey'
  'kCFURLVolumeURLForRemountingKey (CFStringRef)':
    'prefix': 'kCFURLVolumeURLForRemountingKey'
    'body': 'KCFURLVolumeURLForRemountingKey'
  'kCFURLVolumeURLKey (CFStringRef)':
    'prefix': 'kCFURLVolumeURLKey'
    'body': 'KCFURLVolumeURLKey'
  'kCFURLVolumeUUIDStringKey (CFStringRef)':
    'prefix': 'kCFURLVolumeUUIDStringKey'
    'body': 'KCFURLVolumeUUIDStringKey'
  'CFByteOrderBigEndian (2)':
    'prefix': 'CFByteOrderBigEndian'
    'body': 'CFByteOrderBigEndian'
  'CFByteOrderLittleEndian (1)':
    'prefix': 'CFByteOrderLittleEndian'
    'body': 'CFByteOrderLittleEndian'
  'CFByteOrderUnknown (0)':
    'prefix': 'CFByteOrderUnknown'
    'body': 'CFByteOrderUnknown'
  'CFNotificationSuspensionBehaviorCoalesce (2)':
    'prefix': 'CFNotificationSuspensionBehaviorCoalesce'
    'body': 'CFNotificationSuspensionBehaviorCoalesce'
  'CFNotificationSuspensionBehaviorDeliverImmediately (4)':
    'prefix': 'CFNotificationSuspensionBehaviorDeliverImmediately'
    'body': 'CFNotificationSuspensionBehaviorDeliverImmediately'
  'CFNotificationSuspensionBehaviorDrop (1)':
    'prefix': 'CFNotificationSuspensionBehaviorDrop'
    'body': 'CFNotificationSuspensionBehaviorDrop'
  'CFNotificationSuspensionBehaviorHold (3)':
    'prefix': 'CFNotificationSuspensionBehaviorHold'
    'body': 'CFNotificationSuspensionBehaviorHold'
  'CF_USE_OSBYTEORDER_H (1)':
    'prefix': 'CF_USE_OSBYTEORDER_H'
    'body': 'CF_USE_OSBYTEORDER_H'
  'COREFOUNDATION_CFPLUGINCOM_SEPARATE (1)':
    'prefix': 'COREFOUNDATION_CFPLUGINCOM_SEPARATE'
    'body': 'COREFOUNDATION_CFPLUGINCOM_SEPARATE'
  'E_ABORT (-2147483641)':
    'prefix': 'E_ABORT'
    'body': 'E_ABORT'
  'E_ACCESSDENIED (-2147483639)':
    'prefix': 'E_ACCESSDENIED'
    'body': 'E_ACCESSDENIED'
  'E_FAIL (-2147483640)':
    'prefix': 'E_FAIL'
    'body': 'E_FAIL'
  'E_HANDLE (-2147483642)':
    'prefix': 'E_HANDLE'
    'body': 'E_HANDLE'
  'E_INVALIDARG (-2147483645)':
    'prefix': 'E_INVALIDARG'
    'body': 'E_INVALIDARG'
  'E_NOINTERFACE (-2147483644)':
    'prefix': 'E_NOINTERFACE'
    'body': 'E_NOINTERFACE'
  'E_NOTIMPL (-2147483647)':
    'prefix': 'E_NOTIMPL'
    'body': 'E_NOTIMPL'
  'E_OUTOFMEMORY (-2147483646)':
    'prefix': 'E_OUTOFMEMORY'
    'body': 'E_OUTOFMEMORY'
  'E_POINTER (-2147483643)':
    'prefix': 'E_POINTER'
    'body': 'E_POINTER'
  'E_UNEXPECTED (-2147418113)':
    'prefix': 'E_UNEXPECTED'
    'body': 'E_UNEXPECTED'
  'FALSE (0)':
    'prefix': 'FALSE'
    'body': 'FALSE'
  'SEVERITY_ERROR (1)':
    'prefix': 'SEVERITY_ERROR'
    'body': 'SEVERITY_ERROR'
  'SEVERITY_SUCCESS (0)':
    'prefix': 'SEVERITY_SUCCESS'
    'body': 'SEVERITY_SUCCESS'
  'S_FALSE (1)':
    'prefix': 'S_FALSE'
    'body': 'S_FALSE'
  'S_OK (0)':
    'prefix': 'S_OK'
    'body': 'S_OK'
  'TRUE (1)':
    'prefix': 'TRUE'
    'body': 'TRUE'
  'kCFBookmarkResolutionWithoutMountingMask (512)':
    'prefix': 'kCFBookmarkResolutionWithoutMountingMask'
    'body': 'KCFBookmarkResolutionWithoutMountingMask'
  'kCFBookmarkResolutionWithoutUIMask (256)':
    'prefix': 'kCFBookmarkResolutionWithoutUIMask'
    'body': 'KCFBookmarkResolutionWithoutUIMask'
  'kCFBundleExecutableArchitectureI386 (7)':
    'prefix': 'kCFBundleExecutableArchitectureI386'
    'body': 'KCFBundleExecutableArchitectureI386'
  'kCFBundleExecutableArchitecturePPC (18)':
    'prefix': 'kCFBundleExecutableArchitecturePPC'
    'body': 'KCFBundleExecutableArchitecturePPC'
  'kCFBundleExecutableArchitecturePPC64 (16777234)':
    'prefix': 'kCFBundleExecutableArchitecturePPC64'
    'body': 'KCFBundleExecutableArchitecturePPC64'
  'kCFBundleExecutableArchitectureX86_64 (16777223)':
    'prefix': 'kCFBundleExecutableArchitectureX86_64'
    'body': 'KCFBundleExecutableArchitectureX86_64'
  'kCFCalendarComponentsWrap (1)':
    'prefix': 'kCFCalendarComponentsWrap'
    'body': 'KCFCalendarComponentsWrap'
  'kCFCalendarUnitDay (16)':
    'prefix': 'kCFCalendarUnitDay'
    'body': 'KCFCalendarUnitDay'
  'kCFCalendarUnitEra (2)':
    'prefix': 'kCFCalendarUnitEra'
    'body': 'KCFCalendarUnitEra'
  'kCFCalendarUnitHour (32)':
    'prefix': 'kCFCalendarUnitHour'
    'body': 'KCFCalendarUnitHour'
  'kCFCalendarUnitMinute (64)':
    'prefix': 'kCFCalendarUnitMinute'
    'body': 'KCFCalendarUnitMinute'
  'kCFCalendarUnitMonth (8)':
    'prefix': 'kCFCalendarUnitMonth'
    'body': 'KCFCalendarUnitMonth'
  'kCFCalendarUnitQuarter (2048)':
    'prefix': 'kCFCalendarUnitQuarter'
    'body': 'KCFCalendarUnitQuarter'
  'kCFCalendarUnitSecond (128)':
    'prefix': 'kCFCalendarUnitSecond'
    'body': 'KCFCalendarUnitSecond'
  'kCFCalendarUnitWeek (256)':
    'prefix': 'kCFCalendarUnitWeek'
    'body': 'KCFCalendarUnitWeek'
  'kCFCalendarUnitWeekOfMonth (4096)':
    'prefix': 'kCFCalendarUnitWeekOfMonth'
    'body': 'KCFCalendarUnitWeekOfMonth'
  'kCFCalendarUnitWeekOfYear (8192)':
    'prefix': 'kCFCalendarUnitWeekOfYear'
    'body': 'KCFCalendarUnitWeekOfYear'
  'kCFCalendarUnitWeekday (512)':
    'prefix': 'kCFCalendarUnitWeekday'
    'body': 'KCFCalendarUnitWeekday'
  'kCFCalendarUnitWeekdayOrdinal (1024)':
    'prefix': 'kCFCalendarUnitWeekdayOrdinal'
    'body': 'KCFCalendarUnitWeekdayOrdinal'
  'kCFCalendarUnitYear (4)':
    'prefix': 'kCFCalendarUnitYear'
    'body': 'KCFCalendarUnitYear'
  'kCFCalendarUnitYearForWeekOfYear (16384)':
    'prefix': 'kCFCalendarUnitYearForWeekOfYear'
    'body': 'KCFCalendarUnitYearForWeekOfYear'
  'kCFCharacterSetAlphaNumeric (10)':
    'prefix': 'kCFCharacterSetAlphaNumeric'
    'body': 'KCFCharacterSetAlphaNumeric'
  'kCFCharacterSetCapitalizedLetter (13)':
    'prefix': 'kCFCharacterSetCapitalizedLetter'
    'body': 'KCFCharacterSetCapitalizedLetter'
  'kCFCharacterSetControl (1)':
    'prefix': 'kCFCharacterSetControl'
    'body': 'KCFCharacterSetControl'
  'kCFCharacterSetDecimalDigit (4)':
    'prefix': 'kCFCharacterSetDecimalDigit'
    'body': 'KCFCharacterSetDecimalDigit'
  'kCFCharacterSetDecomposable (9)':
    'prefix': 'kCFCharacterSetDecomposable'
    'body': 'KCFCharacterSetDecomposable'
  'kCFCharacterSetIllegal (12)':
    'prefix': 'kCFCharacterSetIllegal'
    'body': 'KCFCharacterSetIllegal'
  'kCFCharacterSetLetter (5)':
    'prefix': 'kCFCharacterSetLetter'
    'body': 'KCFCharacterSetLetter'
  'kCFCharacterSetLowercaseLetter (6)':
    'prefix': 'kCFCharacterSetLowercaseLetter'
    'body': 'KCFCharacterSetLowercaseLetter'
  'kCFCharacterSetNewline (15)':
    'prefix': 'kCFCharacterSetNewline'
    'body': 'KCFCharacterSetNewline'
  'kCFCharacterSetNonBase (8)':
    'prefix': 'kCFCharacterSetNonBase'
    'body': 'KCFCharacterSetNonBase'
  'kCFCharacterSetPunctuation (11)':
    'prefix': 'kCFCharacterSetPunctuation'
    'body': 'KCFCharacterSetPunctuation'
  'kCFCharacterSetSymbol (14)':
    'prefix': 'kCFCharacterSetSymbol'
    'body': 'KCFCharacterSetSymbol'
  'kCFCharacterSetUppercaseLetter (7)':
    'prefix': 'kCFCharacterSetUppercaseLetter'
    'body': 'KCFCharacterSetUppercaseLetter'
  'kCFCharacterSetWhitespace (2)':
    'prefix': 'kCFCharacterSetWhitespace'
    'body': 'KCFCharacterSetWhitespace'
  'kCFCharacterSetWhitespaceAndNewline (3)':
    'prefix': 'kCFCharacterSetWhitespaceAndNewline'
    'body': 'KCFCharacterSetWhitespaceAndNewline'
  'kCFCompareAnchored (8)':
    'prefix': 'kCFCompareAnchored'
    'body': 'KCFCompareAnchored'
  'kCFCompareBackwards (4)':
    'prefix': 'kCFCompareBackwards'
    'body': 'KCFCompareBackwards'
  'kCFCompareCaseInsensitive (1)':
    'prefix': 'kCFCompareCaseInsensitive'
    'body': 'KCFCompareCaseInsensitive'
  'kCFCompareDiacriticInsensitive (128)':
    'prefix': 'kCFCompareDiacriticInsensitive'
    'body': 'KCFCompareDiacriticInsensitive'
  'kCFCompareEqualTo (0)':
    'prefix': 'kCFCompareEqualTo'
    'body': 'KCFCompareEqualTo'
  'kCFCompareForcedOrdering (512)':
    'prefix': 'kCFCompareForcedOrdering'
    'body': 'KCFCompareForcedOrdering'
  'kCFCompareGreaterThan (1)':
    'prefix': 'kCFCompareGreaterThan'
    'body': 'KCFCompareGreaterThan'
  'kCFCompareLessThan (-1)':
    'prefix': 'kCFCompareLessThan'
    'body': 'KCFCompareLessThan'
  'kCFCompareLocalized (32)':
    'prefix': 'kCFCompareLocalized'
    'body': 'KCFCompareLocalized'
  'kCFCompareNonliteral (16)':
    'prefix': 'kCFCompareNonliteral'
    'body': 'KCFCompareNonliteral'
  'kCFCompareNumerically (64)':
    'prefix': 'kCFCompareNumerically'
    'body': 'KCFCompareNumerically'
  'kCFCompareWidthInsensitive (256)':
    'prefix': 'kCFCompareWidthInsensitive'
    'body': 'KCFCompareWidthInsensitive'
  'kCFCoreFoundationVersionNumber10_0 (196.40)':
    'prefix': 'kCFCoreFoundationVersionNumber10_0'
    'body': 'KCFCoreFoundationVersionNumber10_0'
  'kCFCoreFoundationVersionNumber10_0_3 (196.50)':
    'prefix': 'kCFCoreFoundationVersionNumber10_0_3'
    'body': 'KCFCoreFoundationVersionNumber10_0_3'
  'kCFCoreFoundationVersionNumber10_1 (226.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_1'
    'body': 'KCFCoreFoundationVersionNumber10_1'
  'kCFCoreFoundationVersionNumber10_1_1 (226.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_1_1'
    'body': 'KCFCoreFoundationVersionNumber10_1_1'
  'kCFCoreFoundationVersionNumber10_1_2 (227.20)':
    'prefix': 'kCFCoreFoundationVersionNumber10_1_2'
    'body': 'KCFCoreFoundationVersionNumber10_1_2'
  'kCFCoreFoundationVersionNumber10_1_3 (227.20)':
    'prefix': 'kCFCoreFoundationVersionNumber10_1_3'
    'body': 'KCFCoreFoundationVersionNumber10_1_3'
  'kCFCoreFoundationVersionNumber10_1_4 (227.30)':
    'prefix': 'kCFCoreFoundationVersionNumber10_1_4'
    'body': 'KCFCoreFoundationVersionNumber10_1_4'
  'kCFCoreFoundationVersionNumber10_2 (263.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_2'
    'body': 'KCFCoreFoundationVersionNumber10_2'
  'kCFCoreFoundationVersionNumber10_2_1 (263.10)':
    'prefix': 'kCFCoreFoundationVersionNumber10_2_1'
    'body': 'KCFCoreFoundationVersionNumber10_2_1'
  'kCFCoreFoundationVersionNumber10_2_2 (263.10)':
    'prefix': 'kCFCoreFoundationVersionNumber10_2_2'
    'body': 'KCFCoreFoundationVersionNumber10_2_2'
  'kCFCoreFoundationVersionNumber10_2_3 (263.30)':
    'prefix': 'kCFCoreFoundationVersionNumber10_2_3'
    'body': 'KCFCoreFoundationVersionNumber10_2_3'
  'kCFCoreFoundationVersionNumber10_2_4 (263.30)':
    'prefix': 'kCFCoreFoundationVersionNumber10_2_4'
    'body': 'KCFCoreFoundationVersionNumber10_2_4'
  'kCFCoreFoundationVersionNumber10_2_5 (263.50)':
    'prefix': 'kCFCoreFoundationVersionNumber10_2_5'
    'body': 'KCFCoreFoundationVersionNumber10_2_5'
  'kCFCoreFoundationVersionNumber10_2_6 (263.50)':
    'prefix': 'kCFCoreFoundationVersionNumber10_2_6'
    'body': 'KCFCoreFoundationVersionNumber10_2_6'
  'kCFCoreFoundationVersionNumber10_2_7 (263.50)':
    'prefix': 'kCFCoreFoundationVersionNumber10_2_7'
    'body': 'KCFCoreFoundationVersionNumber10_2_7'
  'kCFCoreFoundationVersionNumber10_2_8 (263.50)':
    'prefix': 'kCFCoreFoundationVersionNumber10_2_8'
    'body': 'KCFCoreFoundationVersionNumber10_2_8'
  'kCFCoreFoundationVersionNumber10_3 (299.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_3'
    'body': 'KCFCoreFoundationVersionNumber10_3'
  'kCFCoreFoundationVersionNumber10_3_1 (299.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_3_1'
    'body': 'KCFCoreFoundationVersionNumber10_3_1'
  'kCFCoreFoundationVersionNumber10_3_2 (299.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_3_2'
    'body': 'KCFCoreFoundationVersionNumber10_3_2'
  'kCFCoreFoundationVersionNumber10_3_3 (299.30)':
    'prefix': 'kCFCoreFoundationVersionNumber10_3_3'
    'body': 'KCFCoreFoundationVersionNumber10_3_3'
  'kCFCoreFoundationVersionNumber10_3_4 (299.31)':
    'prefix': 'kCFCoreFoundationVersionNumber10_3_4'
    'body': 'KCFCoreFoundationVersionNumber10_3_4'
  'kCFCoreFoundationVersionNumber10_3_5 (299.31)':
    'prefix': 'kCFCoreFoundationVersionNumber10_3_5'
    'body': 'KCFCoreFoundationVersionNumber10_3_5'
  'kCFCoreFoundationVersionNumber10_3_6 (299.32)':
    'prefix': 'kCFCoreFoundationVersionNumber10_3_6'
    'body': 'KCFCoreFoundationVersionNumber10_3_6'
  'kCFCoreFoundationVersionNumber10_3_7 (299.33)':
    'prefix': 'kCFCoreFoundationVersionNumber10_3_7'
    'body': 'KCFCoreFoundationVersionNumber10_3_7'
  'kCFCoreFoundationVersionNumber10_3_8 (299.33)':
    'prefix': 'kCFCoreFoundationVersionNumber10_3_8'
    'body': 'KCFCoreFoundationVersionNumber10_3_8'
  'kCFCoreFoundationVersionNumber10_3_9 (299.35)':
    'prefix': 'kCFCoreFoundationVersionNumber10_3_9'
    'body': 'KCFCoreFoundationVersionNumber10_3_9'
  'kCFCoreFoundationVersionNumber10_4 (368.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4'
    'body': 'KCFCoreFoundationVersionNumber10_4'
  'kCFCoreFoundationVersionNumber10_4_1 (368.10)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_1'
    'body': 'KCFCoreFoundationVersionNumber10_4_1'
  'kCFCoreFoundationVersionNumber10_4_10 (368.28)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_10'
    'body': 'KCFCoreFoundationVersionNumber10_4_10'
  'kCFCoreFoundationVersionNumber10_4_11 (368.31)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_11'
    'body': 'KCFCoreFoundationVersionNumber10_4_11'
  'kCFCoreFoundationVersionNumber10_4_2 (368.11)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_2'
    'body': 'KCFCoreFoundationVersionNumber10_4_2'
  'kCFCoreFoundationVersionNumber10_4_3 (368.18)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_3'
    'body': 'KCFCoreFoundationVersionNumber10_4_3'
  'kCFCoreFoundationVersionNumber10_4_4_Intel (368.26)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_4_Intel'
    'body': 'KCFCoreFoundationVersionNumber10_4_4_Intel'
  'kCFCoreFoundationVersionNumber10_4_4_PowerPC (368.25)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_4_PowerPC'
    'body': 'KCFCoreFoundationVersionNumber10_4_4_PowerPC'
  'kCFCoreFoundationVersionNumber10_4_5_Intel (368.26)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_5_Intel'
    'body': 'KCFCoreFoundationVersionNumber10_4_5_Intel'
  'kCFCoreFoundationVersionNumber10_4_5_PowerPC (368.25)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_5_PowerPC'
    'body': 'KCFCoreFoundationVersionNumber10_4_5_PowerPC'
  'kCFCoreFoundationVersionNumber10_4_6_Intel (368.26)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_6_Intel'
    'body': 'KCFCoreFoundationVersionNumber10_4_6_Intel'
  'kCFCoreFoundationVersionNumber10_4_6_PowerPC (368.25)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_6_PowerPC'
    'body': 'KCFCoreFoundationVersionNumber10_4_6_PowerPC'
  'kCFCoreFoundationVersionNumber10_4_7 (368.27)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_7'
    'body': 'KCFCoreFoundationVersionNumber10_4_7'
  'kCFCoreFoundationVersionNumber10_4_8 (368.27)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_8'
    'body': 'KCFCoreFoundationVersionNumber10_4_8'
  'kCFCoreFoundationVersionNumber10_4_9 (368.28)':
    'prefix': 'kCFCoreFoundationVersionNumber10_4_9'
    'body': 'KCFCoreFoundationVersionNumber10_4_9'
  'kCFCoreFoundationVersionNumber10_5 (476.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_5'
    'body': 'KCFCoreFoundationVersionNumber10_5'
  'kCFCoreFoundationVersionNumber10_5_1 (476.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_5_1'
    'body': 'KCFCoreFoundationVersionNumber10_5_1'
  'kCFCoreFoundationVersionNumber10_5_2 (476.10)':
    'prefix': 'kCFCoreFoundationVersionNumber10_5_2'
    'body': 'KCFCoreFoundationVersionNumber10_5_2'
  'kCFCoreFoundationVersionNumber10_5_3 (476.13)':
    'prefix': 'kCFCoreFoundationVersionNumber10_5_3'
    'body': 'KCFCoreFoundationVersionNumber10_5_3'
  'kCFCoreFoundationVersionNumber10_5_4 (476.14)':
    'prefix': 'kCFCoreFoundationVersionNumber10_5_4'
    'body': 'KCFCoreFoundationVersionNumber10_5_4'
  'kCFCoreFoundationVersionNumber10_5_5 (476.15)':
    'prefix': 'kCFCoreFoundationVersionNumber10_5_5'
    'body': 'KCFCoreFoundationVersionNumber10_5_5'
  'kCFCoreFoundationVersionNumber10_5_6 (476.17)':
    'prefix': 'kCFCoreFoundationVersionNumber10_5_6'
    'body': 'KCFCoreFoundationVersionNumber10_5_6'
  'kCFCoreFoundationVersionNumber10_5_7 (476.18)':
    'prefix': 'kCFCoreFoundationVersionNumber10_5_7'
    'body': 'KCFCoreFoundationVersionNumber10_5_7'
  'kCFCoreFoundationVersionNumber10_5_8 (476.19)':
    'prefix': 'kCFCoreFoundationVersionNumber10_5_8'
    'body': 'KCFCoreFoundationVersionNumber10_5_8'
  'kCFCoreFoundationVersionNumber10_6 (550.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_6'
    'body': 'KCFCoreFoundationVersionNumber10_6'
  'kCFCoreFoundationVersionNumber10_6_1 (550.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_6_1'
    'body': 'KCFCoreFoundationVersionNumber10_6_1'
  'kCFCoreFoundationVersionNumber10_6_2 (550.13)':
    'prefix': 'kCFCoreFoundationVersionNumber10_6_2'
    'body': 'KCFCoreFoundationVersionNumber10_6_2'
  'kCFCoreFoundationVersionNumber10_6_3 (550.19)':
    'prefix': 'kCFCoreFoundationVersionNumber10_6_3'
    'body': 'KCFCoreFoundationVersionNumber10_6_3'
  'kCFCoreFoundationVersionNumber10_6_4 (550.29)':
    'prefix': 'kCFCoreFoundationVersionNumber10_6_4'
    'body': 'KCFCoreFoundationVersionNumber10_6_4'
  'kCFCoreFoundationVersionNumber10_6_5 (550.42)':
    'prefix': 'kCFCoreFoundationVersionNumber10_6_5'
    'body': 'KCFCoreFoundationVersionNumber10_6_5'
  'kCFCoreFoundationVersionNumber10_6_6 (550.42)':
    'prefix': 'kCFCoreFoundationVersionNumber10_6_6'
    'body': 'KCFCoreFoundationVersionNumber10_6_6'
  'kCFCoreFoundationVersionNumber10_6_7 (550.42)':
    'prefix': 'kCFCoreFoundationVersionNumber10_6_7'
    'body': 'KCFCoreFoundationVersionNumber10_6_7'
  'kCFCoreFoundationVersionNumber10_6_8 (550.43)':
    'prefix': 'kCFCoreFoundationVersionNumber10_6_8'
    'body': 'KCFCoreFoundationVersionNumber10_6_8'
  'kCFCoreFoundationVersionNumber10_7 (635.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_7'
    'body': 'KCFCoreFoundationVersionNumber10_7'
  'kCFCoreFoundationVersionNumber10_7_1 (635.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_7_1'
    'body': 'KCFCoreFoundationVersionNumber10_7_1'
  'kCFCoreFoundationVersionNumber10_7_2 (635.15)':
    'prefix': 'kCFCoreFoundationVersionNumber10_7_2'
    'body': 'KCFCoreFoundationVersionNumber10_7_2'
  'kCFCoreFoundationVersionNumber10_7_3 (635.19)':
    'prefix': 'kCFCoreFoundationVersionNumber10_7_3'
    'body': 'KCFCoreFoundationVersionNumber10_7_3'
  'kCFCoreFoundationVersionNumber10_7_4 (635.21)':
    'prefix': 'kCFCoreFoundationVersionNumber10_7_4'
    'body': 'KCFCoreFoundationVersionNumber10_7_4'
  'kCFCoreFoundationVersionNumber10_7_5 (635.21)':
    'prefix': 'kCFCoreFoundationVersionNumber10_7_5'
    'body': 'KCFCoreFoundationVersionNumber10_7_5'
  'kCFCoreFoundationVersionNumber10_8 (744.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_8'
    'body': 'KCFCoreFoundationVersionNumber10_8'
  'kCFCoreFoundationVersionNumber10_8_1 (744.00)':
    'prefix': 'kCFCoreFoundationVersionNumber10_8_1'
    'body': 'KCFCoreFoundationVersionNumber10_8_1'
  'kCFCoreFoundationVersionNumber10_8_2 (744.12)':
    'prefix': 'kCFCoreFoundationVersionNumber10_8_2'
    'body': 'KCFCoreFoundationVersionNumber10_8_2'
  'kCFCoreFoundationVersionNumber10_8_3 (744.18)':
    'prefix': 'kCFCoreFoundationVersionNumber10_8_3'
    'body': 'KCFCoreFoundationVersionNumber10_8_3'
  'kCFCoreFoundationVersionNumber10_8_4 (744.19)':
    'prefix': 'kCFCoreFoundationVersionNumber10_8_4'
    'body': 'KCFCoreFoundationVersionNumber10_8_4'
  'kCFCoreFoundationVersionNumber_iOS_4_0 (550.32)':
    'prefix': 'kCFCoreFoundationVersionNumber_iOS_4_0'
    'body': 'KCFCoreFoundationVersionNumber_iOS_4_0'
  'kCFCoreFoundationVersionNumber_iOS_4_1 (550.38)':
    'prefix': 'kCFCoreFoundationVersionNumber_iOS_4_1'
    'body': 'KCFCoreFoundationVersionNumber_iOS_4_1'
  'kCFCoreFoundationVersionNumber_iOS_4_2 (550.52)':
    'prefix': 'kCFCoreFoundationVersionNumber_iOS_4_2'
    'body': 'KCFCoreFoundationVersionNumber_iOS_4_2'
  'kCFCoreFoundationVersionNumber_iOS_4_3 (550.52)':
    'prefix': 'kCFCoreFoundationVersionNumber_iOS_4_3'
    'body': 'KCFCoreFoundationVersionNumber_iOS_4_3'
  'kCFCoreFoundationVersionNumber_iOS_5_0 (675.00)':
    'prefix': 'kCFCoreFoundationVersionNumber_iOS_5_0'
    'body': 'KCFCoreFoundationVersionNumber_iOS_5_0'
  'kCFCoreFoundationVersionNumber_iOS_5_1 (690.10)':
    'prefix': 'kCFCoreFoundationVersionNumber_iOS_5_1'
    'body': 'KCFCoreFoundationVersionNumber_iOS_5_1'
  'kCFCoreFoundationVersionNumber_iOS_6_0 (793.00)':
    'prefix': 'kCFCoreFoundationVersionNumber_iOS_6_0'
    'body': 'KCFCoreFoundationVersionNumber_iOS_6_0'
  'kCFCoreFoundationVersionNumber_iOS_6_1 (793.00)':
    'prefix': 'kCFCoreFoundationVersionNumber_iOS_6_1'
    'body': 'KCFCoreFoundationVersionNumber_iOS_6_1'
  'kCFCoreFoundationVersionNumber_iPhoneOS_2_0 (478.23)':
    'prefix': 'kCFCoreFoundationVersionNumber_iPhoneOS_2_0'
    'body': 'KCFCoreFoundationVersionNumber_iPhoneOS_2_0'
  'kCFCoreFoundationVersionNumber_iPhoneOS_2_1 (478.26)':
    'prefix': 'kCFCoreFoundationVersionNumber_iPhoneOS_2_1'
    'body': 'KCFCoreFoundationVersionNumber_iPhoneOS_2_1'
  'kCFCoreFoundationVersionNumber_iPhoneOS_2_2 (478.29)':
    'prefix': 'kCFCoreFoundationVersionNumber_iPhoneOS_2_2'
    'body': 'KCFCoreFoundationVersionNumber_iPhoneOS_2_2'
  'kCFCoreFoundationVersionNumber_iPhoneOS_3_0 (478.47)':
    'prefix': 'kCFCoreFoundationVersionNumber_iPhoneOS_3_0'
    'body': 'KCFCoreFoundationVersionNumber_iPhoneOS_3_0'
  'kCFCoreFoundationVersionNumber_iPhoneOS_3_1 (478.52)':
    'prefix': 'kCFCoreFoundationVersionNumber_iPhoneOS_3_1'
    'body': 'KCFCoreFoundationVersionNumber_iPhoneOS_3_1'
  'kCFCoreFoundationVersionNumber_iPhoneOS_3_2 (478.61)':
    'prefix': 'kCFCoreFoundationVersionNumber_iPhoneOS_3_2'
    'body': 'KCFCoreFoundationVersionNumber_iPhoneOS_3_2'
  'kCFDataSearchAnchored (2)':
    'prefix': 'kCFDataSearchAnchored'
    'body': 'KCFDataSearchAnchored'
  'kCFDataSearchBackwards (1)':
    'prefix': 'kCFDataSearchBackwards'
    'body': 'KCFDataSearchBackwards'
  'kCFDateFormatterFullStyle (4)':
    'prefix': 'kCFDateFormatterFullStyle'
    'body': 'KCFDateFormatterFullStyle'
  'kCFDateFormatterLongStyle (3)':
    'prefix': 'kCFDateFormatterLongStyle'
    'body': 'KCFDateFormatterLongStyle'
  'kCFDateFormatterMediumStyle (2)':
    'prefix': 'kCFDateFormatterMediumStyle'
    'body': 'KCFDateFormatterMediumStyle'
  'kCFDateFormatterNoStyle (0)':
    'prefix': 'kCFDateFormatterNoStyle'
    'body': 'KCFDateFormatterNoStyle'
  'kCFDateFormatterShortStyle (1)':
    'prefix': 'kCFDateFormatterShortStyle'
    'body': 'KCFDateFormatterShortStyle'
  'kCFFileDescriptorReadCallBack (1)':
    'prefix': 'kCFFileDescriptorReadCallBack'
    'body': 'KCFFileDescriptorReadCallBack'
  'kCFFileDescriptorWriteCallBack (2)':
    'prefix': 'kCFFileDescriptorWriteCallBack'
    'body': 'KCFFileDescriptorWriteCallBack'
  'kCFFileSecurityClearAccessControlList (32)':
    'prefix': 'kCFFileSecurityClearAccessControlList'
    'body': 'KCFFileSecurityClearAccessControlList'
  'kCFFileSecurityClearGroup (2)':
    'prefix': 'kCFFileSecurityClearGroup'
    'body': 'KCFFileSecurityClearGroup'
  'kCFFileSecurityClearGroupUUID (16)':
    'prefix': 'kCFFileSecurityClearGroupUUID'
    'body': 'KCFFileSecurityClearGroupUUID'
  'kCFFileSecurityClearMode (4)':
    'prefix': 'kCFFileSecurityClearMode'
    'body': 'KCFFileSecurityClearMode'
  'kCFFileSecurityClearOwner (1)':
    'prefix': 'kCFFileSecurityClearOwner'
    'body': 'KCFFileSecurityClearOwner'
  'kCFFileSecurityClearOwnerUUID (8)':
    'prefix': 'kCFFileSecurityClearOwnerUUID'
    'body': 'KCFFileSecurityClearOwnerUUID'
  'kCFGregorianAllUnits (16777215)':
    'prefix': 'kCFGregorianAllUnits'
    'body': 'KCFGregorianAllUnits'
  'kCFGregorianUnitsDays (4)':
    'prefix': 'kCFGregorianUnitsDays'
    'body': 'KCFGregorianUnitsDays'
  'kCFGregorianUnitsHours (8)':
    'prefix': 'kCFGregorianUnitsHours'
    'body': 'KCFGregorianUnitsHours'
  'kCFGregorianUnitsMinutes (16)':
    'prefix': 'kCFGregorianUnitsMinutes'
    'body': 'KCFGregorianUnitsMinutes'
  'kCFGregorianUnitsMonths (2)':
    'prefix': 'kCFGregorianUnitsMonths'
    'body': 'KCFGregorianUnitsMonths'
  'kCFGregorianUnitsSeconds (32)':
    'prefix': 'kCFGregorianUnitsSeconds'
    'body': 'KCFGregorianUnitsSeconds'
  'kCFGregorianUnitsYears (1)':
    'prefix': 'kCFGregorianUnitsYears'
    'body': 'KCFGregorianUnitsYears'
  'kCFLocaleLanguageDirectionBottomToTop (4)':
    'prefix': 'kCFLocaleLanguageDirectionBottomToTop'
    'body': 'KCFLocaleLanguageDirectionBottomToTop'
  'kCFLocaleLanguageDirectionLeftToRight (1)':
    'prefix': 'kCFLocaleLanguageDirectionLeftToRight'
    'body': 'KCFLocaleLanguageDirectionLeftToRight'
  'kCFLocaleLanguageDirectionRightToLeft (2)':
    'prefix': 'kCFLocaleLanguageDirectionRightToLeft'
    'body': 'KCFLocaleLanguageDirectionRightToLeft'
  'kCFLocaleLanguageDirectionTopToBottom (3)':
    'prefix': 'kCFLocaleLanguageDirectionTopToBottom'
    'body': 'KCFLocaleLanguageDirectionTopToBottom'
  'kCFLocaleLanguageDirectionUnknown (0)':
    'prefix': 'kCFLocaleLanguageDirectionUnknown'
    'body': 'KCFLocaleLanguageDirectionUnknown'
  'kCFMessagePortBecameInvalidError (-5)':
    'prefix': 'kCFMessagePortBecameInvalidError'
    'body': 'KCFMessagePortBecameInvalidError'
  'kCFMessagePortIsInvalid (-3)':
    'prefix': 'kCFMessagePortIsInvalid'
    'body': 'KCFMessagePortIsInvalid'
  'kCFMessagePortReceiveTimeout (-2)':
    'prefix': 'kCFMessagePortReceiveTimeout'
    'body': 'KCFMessagePortReceiveTimeout'
  'kCFMessagePortSendTimeout (-1)':
    'prefix': 'kCFMessagePortSendTimeout'
    'body': 'KCFMessagePortSendTimeout'
  'kCFMessagePortSuccess (0)':
    'prefix': 'kCFMessagePortSuccess'
    'body': 'KCFMessagePortSuccess'
  'kCFMessagePortTransportError (-4)':
    'prefix': 'kCFMessagePortTransportError'
    'body': 'KCFMessagePortTransportError'
  'kCFNotFound (-1)':
    'prefix': 'kCFNotFound'
    'body': 'KCFNotFound'
  'kCFNotificationDeliverImmediately (1)':
    'prefix': 'kCFNotificationDeliverImmediately'
    'body': 'KCFNotificationDeliverImmediately'
  'kCFNotificationPostToAllSessions (2)':
    'prefix': 'kCFNotificationPostToAllSessions'
    'body': 'KCFNotificationPostToAllSessions'
  'kCFNumberCFIndexType (14)':
    'prefix': 'kCFNumberCFIndexType'
    'body': 'KCFNumberCFIndexType'
  'kCFNumberCGFloatType (16)':
    'prefix': 'kCFNumberCGFloatType'
    'body': 'KCFNumberCGFloatType'
  'kCFNumberCharType (7)':
    'prefix': 'kCFNumberCharType'
    'body': 'KCFNumberCharType'
  'kCFNumberDoubleType (13)':
    'prefix': 'kCFNumberDoubleType'
    'body': 'KCFNumberDoubleType'
  'kCFNumberFloat32Type (5)':
    'prefix': 'kCFNumberFloat32Type'
    'body': 'KCFNumberFloat32Type'
  'kCFNumberFloat64Type (6)':
    'prefix': 'kCFNumberFloat64Type'
    'body': 'KCFNumberFloat64Type'
  'kCFNumberFloatType (12)':
    'prefix': 'kCFNumberFloatType'
    'body': 'KCFNumberFloatType'
  'kCFNumberFormatterCurrencyStyle (2)':
    'prefix': 'kCFNumberFormatterCurrencyStyle'
    'body': 'KCFNumberFormatterCurrencyStyle'
  'kCFNumberFormatterDecimalStyle (1)':
    'prefix': 'kCFNumberFormatterDecimalStyle'
    'body': 'KCFNumberFormatterDecimalStyle'
  'kCFNumberFormatterNoStyle (0)':
    'prefix': 'kCFNumberFormatterNoStyle'
    'body': 'KCFNumberFormatterNoStyle'
  'kCFNumberFormatterPadAfterPrefix (1)':
    'prefix': 'kCFNumberFormatterPadAfterPrefix'
    'body': 'KCFNumberFormatterPadAfterPrefix'
  'kCFNumberFormatterPadAfterSuffix (3)':
    'prefix': 'kCFNumberFormatterPadAfterSuffix'
    'body': 'KCFNumberFormatterPadAfterSuffix'
  'kCFNumberFormatterPadBeforePrefix (0)':
    'prefix': 'kCFNumberFormatterPadBeforePrefix'
    'body': 'KCFNumberFormatterPadBeforePrefix'
  'kCFNumberFormatterPadBeforeSuffix (2)':
    'prefix': 'kCFNumberFormatterPadBeforeSuffix'
    'body': 'KCFNumberFormatterPadBeforeSuffix'
  'kCFNumberFormatterParseIntegersOnly (1)':
    'prefix': 'kCFNumberFormatterParseIntegersOnly'
    'body': 'KCFNumberFormatterParseIntegersOnly'
  'kCFNumberFormatterPercentStyle (3)':
    'prefix': 'kCFNumberFormatterPercentStyle'
    'body': 'KCFNumberFormatterPercentStyle'
  'kCFNumberFormatterRoundCeiling (0)':
    'prefix': 'kCFNumberFormatterRoundCeiling'
    'body': 'KCFNumberFormatterRoundCeiling'
  'kCFNumberFormatterRoundDown (2)':
    'prefix': 'kCFNumberFormatterRoundDown'
    'body': 'KCFNumberFormatterRoundDown'
  'kCFNumberFormatterRoundFloor (1)':
    'prefix': 'kCFNumberFormatterRoundFloor'
    'body': 'KCFNumberFormatterRoundFloor'
  'kCFNumberFormatterRoundHalfDown (5)':
    'prefix': 'kCFNumberFormatterRoundHalfDown'
    'body': 'KCFNumberFormatterRoundHalfDown'
  'kCFNumberFormatterRoundHalfEven (4)':
    'prefix': 'kCFNumberFormatterRoundHalfEven'
    'body': 'KCFNumberFormatterRoundHalfEven'
  'kCFNumberFormatterRoundHalfUp (6)':
    'prefix': 'kCFNumberFormatterRoundHalfUp'
    'body': 'KCFNumberFormatterRoundHalfUp'
  'kCFNumberFormatterRoundUp (3)':
    'prefix': 'kCFNumberFormatterRoundUp'
    'body': 'KCFNumberFormatterRoundUp'
  'kCFNumberFormatterScientificStyle (4)':
    'prefix': 'kCFNumberFormatterScientificStyle'
    'body': 'KCFNumberFormatterScientificStyle'
  'kCFNumberFormatterSpellOutStyle (5)':
    'prefix': 'kCFNumberFormatterSpellOutStyle'
    'body': 'KCFNumberFormatterSpellOutStyle'
  'kCFNumberIntType (9)':
    'prefix': 'kCFNumberIntType'
    'body': 'KCFNumberIntType'
  'kCFNumberLongLongType (11)':
    'prefix': 'kCFNumberLongLongType'
    'body': 'KCFNumberLongLongType'
  'kCFNumberLongType (10)':
    'prefix': 'kCFNumberLongType'
    'body': 'KCFNumberLongType'
  'kCFNumberMaxType (16)':
    'prefix': 'kCFNumberMaxType'
    'body': 'KCFNumberMaxType'
  'kCFNumberNSIntegerType (15)':
    'prefix': 'kCFNumberNSIntegerType'
    'body': 'KCFNumberNSIntegerType'
  'kCFNumberSInt16Type (2)':
    'prefix': 'kCFNumberSInt16Type'
    'body': 'KCFNumberSInt16Type'
  'kCFNumberSInt32Type (3)':
    'prefix': 'kCFNumberSInt32Type'
    'body': 'KCFNumberSInt32Type'
  'kCFNumberSInt64Type (4)':
    'prefix': 'kCFNumberSInt64Type'
    'body': 'KCFNumberSInt64Type'
  'kCFNumberSInt8Type (1)':
    'prefix': 'kCFNumberSInt8Type'
    'body': 'KCFNumberSInt8Type'
  'kCFNumberShortType (8)':
    'prefix': 'kCFNumberShortType'
    'body': 'KCFNumberShortType'
  'kCFPropertyListBinaryFormat_v1_0 (200)':
    'prefix': 'kCFPropertyListBinaryFormat_v1_0'
    'body': 'KCFPropertyListBinaryFormat_v1_0'
  'kCFPropertyListImmutable (0)':
    'prefix': 'kCFPropertyListImmutable'
    'body': 'KCFPropertyListImmutable'
  'kCFPropertyListMutableContainers (1)':
    'prefix': 'kCFPropertyListMutableContainers'
    'body': 'KCFPropertyListMutableContainers'
  'kCFPropertyListMutableContainersAndLeaves (2)':
    'prefix': 'kCFPropertyListMutableContainersAndLeaves'
    'body': 'KCFPropertyListMutableContainersAndLeaves'
  'kCFPropertyListOpenStepFormat (1)':
    'prefix': 'kCFPropertyListOpenStepFormat'
    'body': 'KCFPropertyListOpenStepFormat'
  'kCFPropertyListReadCorruptError (3840)':
    'prefix': 'kCFPropertyListReadCorruptError'
    'body': 'KCFPropertyListReadCorruptError'
  'kCFPropertyListReadStreamError (3842)':
    'prefix': 'kCFPropertyListReadStreamError'
    'body': 'KCFPropertyListReadStreamError'
  'kCFPropertyListReadUnknownVersionError (3841)':
    'prefix': 'kCFPropertyListReadUnknownVersionError'
    'body': 'KCFPropertyListReadUnknownVersionError'
  'kCFPropertyListWriteStreamError (3851)':
    'prefix': 'kCFPropertyListWriteStreamError'
    'body': 'KCFPropertyListWriteStreamError'
  'kCFPropertyListXMLFormat_v1_0 (100)':
    'prefix': 'kCFPropertyListXMLFormat_v1_0'
    'body': 'KCFPropertyListXMLFormat_v1_0'
  'kCFRunLoopAfterWaiting (64)':
    'prefix': 'kCFRunLoopAfterWaiting'
    'body': 'KCFRunLoopAfterWaiting'
  'kCFRunLoopAllActivities (268435455)':
    'prefix': 'kCFRunLoopAllActivities'
    'body': 'KCFRunLoopAllActivities'
  'kCFRunLoopBeforeSources (4)':
    'prefix': 'kCFRunLoopBeforeSources'
    'body': 'KCFRunLoopBeforeSources'
  'kCFRunLoopBeforeTimers (2)':
    'prefix': 'kCFRunLoopBeforeTimers'
    'body': 'KCFRunLoopBeforeTimers'
  'kCFRunLoopBeforeWaiting (32)':
    'prefix': 'kCFRunLoopBeforeWaiting'
    'body': 'KCFRunLoopBeforeWaiting'
  'kCFRunLoopEntry (1)':
    'prefix': 'kCFRunLoopEntry'
    'body': 'KCFRunLoopEntry'
  'kCFRunLoopExit (128)':
    'prefix': 'kCFRunLoopExit'
    'body': 'KCFRunLoopExit'
  'kCFRunLoopRunFinished (1)':
    'prefix': 'kCFRunLoopRunFinished'
    'body': 'KCFRunLoopRunFinished'
  'kCFRunLoopRunHandledSource (4)':
    'prefix': 'kCFRunLoopRunHandledSource'
    'body': 'KCFRunLoopRunHandledSource'
  'kCFRunLoopRunStopped (2)':
    'prefix': 'kCFRunLoopRunStopped'
    'body': 'KCFRunLoopRunStopped'
  'kCFRunLoopRunTimedOut (3)':
    'prefix': 'kCFRunLoopRunTimedOut'
    'body': 'KCFRunLoopRunTimedOut'
  'kCFSocketAcceptCallBack (2)':
    'prefix': 'kCFSocketAcceptCallBack'
    'body': 'KCFSocketAcceptCallBack'
  'kCFSocketAutomaticallyReenableAcceptCallBack (2)':
    'prefix': 'kCFSocketAutomaticallyReenableAcceptCallBack'
    'body': 'KCFSocketAutomaticallyReenableAcceptCallBack'
  'kCFSocketAutomaticallyReenableDataCallBack (3)':
    'prefix': 'kCFSocketAutomaticallyReenableDataCallBack'
    'body': 'KCFSocketAutomaticallyReenableDataCallBack'
  'kCFSocketAutomaticallyReenableReadCallBack (1)':
    'prefix': 'kCFSocketAutomaticallyReenableReadCallBack'
    'body': 'KCFSocketAutomaticallyReenableReadCallBack'
  'kCFSocketAutomaticallyReenableWriteCallBack (8)':
    'prefix': 'kCFSocketAutomaticallyReenableWriteCallBack'
    'body': 'KCFSocketAutomaticallyReenableWriteCallBack'
  'kCFSocketCloseOnInvalidate (128)':
    'prefix': 'kCFSocketCloseOnInvalidate'
    'body': 'KCFSocketCloseOnInvalidate'
  'kCFSocketConnectCallBack (4)':
    'prefix': 'kCFSocketConnectCallBack'
    'body': 'KCFSocketConnectCallBack'
  'kCFSocketDataCallBack (3)':
    'prefix': 'kCFSocketDataCallBack'
    'body': 'KCFSocketDataCallBack'
  'kCFSocketError (-1)':
    'prefix': 'kCFSocketError'
    'body': 'KCFSocketError'
  'kCFSocketLeaveErrors (64)':
    'prefix': 'kCFSocketLeaveErrors'
    'body': 'KCFSocketLeaveErrors'
  'kCFSocketNoCallBack (0)':
    'prefix': 'kCFSocketNoCallBack'
    'body': 'KCFSocketNoCallBack'
  'kCFSocketReadCallBack (1)':
    'prefix': 'kCFSocketReadCallBack'
    'body': 'KCFSocketReadCallBack'
  'kCFSocketSuccess (0)':
    'prefix': 'kCFSocketSuccess'
    'body': 'KCFSocketSuccess'
  'kCFSocketTimeout (-2)':
    'prefix': 'kCFSocketTimeout'
    'body': 'KCFSocketTimeout'
  'kCFSocketWriteCallBack (8)':
    'prefix': 'kCFSocketWriteCallBack'
    'body': 'KCFSocketWriteCallBack'
  'kCFStreamErrorDomainCustom (-1)':
    'prefix': 'kCFStreamErrorDomainCustom'
    'body': 'KCFStreamErrorDomainCustom'
  'kCFStreamErrorDomainMacOSStatus (2)':
    'prefix': 'kCFStreamErrorDomainMacOSStatus'
    'body': 'KCFStreamErrorDomainMacOSStatus'
  'kCFStreamErrorDomainPOSIX (1)':
    'prefix': 'kCFStreamErrorDomainPOSIX'
    'body': 'KCFStreamErrorDomainPOSIX'
  'kCFStreamEventCanAcceptBytes (4)':
    'prefix': 'kCFStreamEventCanAcceptBytes'
    'body': 'KCFStreamEventCanAcceptBytes'
  'kCFStreamEventEndEncountered (16)':
    'prefix': 'kCFStreamEventEndEncountered'
    'body': 'KCFStreamEventEndEncountered'
  'kCFStreamEventErrorOccurred (8)':
    'prefix': 'kCFStreamEventErrorOccurred'
    'body': 'KCFStreamEventErrorOccurred'
  'kCFStreamEventHasBytesAvailable (2)':
    'prefix': 'kCFStreamEventHasBytesAvailable'
    'body': 'KCFStreamEventHasBytesAvailable'
  'kCFStreamEventNone (0)':
    'prefix': 'kCFStreamEventNone'
    'body': 'KCFStreamEventNone'
  'kCFStreamEventOpenCompleted (1)':
    'prefix': 'kCFStreamEventOpenCompleted'
    'body': 'KCFStreamEventOpenCompleted'
  'kCFStreamStatusAtEnd (5)':
    'prefix': 'kCFStreamStatusAtEnd'
    'body': 'KCFStreamStatusAtEnd'
  'kCFStreamStatusClosed (6)':
    'prefix': 'kCFStreamStatusClosed'
    'body': 'KCFStreamStatusClosed'
  'kCFStreamStatusError (7)':
    'prefix': 'kCFStreamStatusError'
    'body': 'KCFStreamStatusError'
  'kCFStreamStatusNotOpen (0)':
    'prefix': 'kCFStreamStatusNotOpen'
    'body': 'KCFStreamStatusNotOpen'
  'kCFStreamStatusOpen (2)':
    'prefix': 'kCFStreamStatusOpen'
    'body': 'KCFStreamStatusOpen'
  'kCFStreamStatusOpening (1)':
    'prefix': 'kCFStreamStatusOpening'
    'body': 'KCFStreamStatusOpening'
  'kCFStreamStatusReading (3)':
    'prefix': 'kCFStreamStatusReading'
    'body': 'KCFStreamStatusReading'
  'kCFStreamStatusWriting (4)':
    'prefix': 'kCFStreamStatusWriting'
    'body': 'KCFStreamStatusWriting'
  'kCFStringEncodingANSEL (1537)':
    'prefix': 'kCFStringEncodingANSEL'
    'body': 'KCFStringEncodingANSEL'
  'kCFStringEncodingASCII (1536)':
    'prefix': 'kCFStringEncodingASCII'
    'body': 'KCFStringEncodingASCII'
  'kCFStringEncodingBig5 (2563)':
    'prefix': 'kCFStringEncodingBig5'
    'body': 'KCFStringEncodingBig5'
  'kCFStringEncodingBig5_E (2569)':
    'prefix': 'kCFStringEncodingBig5_E'
    'body': 'KCFStringEncodingBig5_E'
  'kCFStringEncodingBig5_HKSCS_1999 (2566)':
    'prefix': 'kCFStringEncodingBig5_HKSCS_1999'
    'body': 'KCFStringEncodingBig5_HKSCS_1999'
  'kCFStringEncodingCNS_11643_92_P1 (1617)':
    'prefix': 'kCFStringEncodingCNS_11643_92_P1'
    'body': 'KCFStringEncodingCNS_11643_92_P1'
  'kCFStringEncodingCNS_11643_92_P2 (1618)':
    'prefix': 'kCFStringEncodingCNS_11643_92_P2'
    'body': 'KCFStringEncodingCNS_11643_92_P2'
  'kCFStringEncodingCNS_11643_92_P3 (1619)':
    'prefix': 'kCFStringEncodingCNS_11643_92_P3'
    'body': 'KCFStringEncodingCNS_11643_92_P3'
  'kCFStringEncodingDOSArabic (1049)':
    'prefix': 'kCFStringEncodingDOSArabic'
    'body': 'KCFStringEncodingDOSArabic'
  'kCFStringEncodingDOSBalticRim (1030)':
    'prefix': 'kCFStringEncodingDOSBalticRim'
    'body': 'KCFStringEncodingDOSBalticRim'
  'kCFStringEncodingDOSCanadianFrench (1048)':
    'prefix': 'kCFStringEncodingDOSCanadianFrench'
    'body': 'KCFStringEncodingDOSCanadianFrench'
  'kCFStringEncodingDOSChineseSimplif (1057)':
    'prefix': 'kCFStringEncodingDOSChineseSimplif'
    'body': 'KCFStringEncodingDOSChineseSimplif'
  'kCFStringEncodingDOSChineseTrad (1059)':
    'prefix': 'kCFStringEncodingDOSChineseTrad'
    'body': 'KCFStringEncodingDOSChineseTrad'
  'kCFStringEncodingDOSCyrillic (1043)':
    'prefix': 'kCFStringEncodingDOSCyrillic'
    'body': 'KCFStringEncodingDOSCyrillic'
  'kCFStringEncodingDOSGreek (1029)':
    'prefix': 'kCFStringEncodingDOSGreek'
    'body': 'KCFStringEncodingDOSGreek'
  'kCFStringEncodingDOSGreek1 (1041)':
    'prefix': 'kCFStringEncodingDOSGreek1'
    'body': 'KCFStringEncodingDOSGreek1'
  'kCFStringEncodingDOSGreek2 (1052)':
    'prefix': 'kCFStringEncodingDOSGreek2'
    'body': 'KCFStringEncodingDOSGreek2'
  'kCFStringEncodingDOSHebrew (1047)':
    'prefix': 'kCFStringEncodingDOSHebrew'
    'body': 'KCFStringEncodingDOSHebrew'
  'kCFStringEncodingDOSIcelandic (1046)':
    'prefix': 'kCFStringEncodingDOSIcelandic'
    'body': 'KCFStringEncodingDOSIcelandic'
  'kCFStringEncodingDOSJapanese (1056)':
    'prefix': 'kCFStringEncodingDOSJapanese'
    'body': 'KCFStringEncodingDOSJapanese'
  'kCFStringEncodingDOSKorean (1058)':
    'prefix': 'kCFStringEncodingDOSKorean'
    'body': 'KCFStringEncodingDOSKorean'
  'kCFStringEncodingDOSLatin1 (1040)':
    'prefix': 'kCFStringEncodingDOSLatin1'
    'body': 'KCFStringEncodingDOSLatin1'
  'kCFStringEncodingDOSLatin2 (1042)':
    'prefix': 'kCFStringEncodingDOSLatin2'
    'body': 'KCFStringEncodingDOSLatin2'
  'kCFStringEncodingDOSLatinUS (1024)':
    'prefix': 'kCFStringEncodingDOSLatinUS'
    'body': 'KCFStringEncodingDOSLatinUS'
  'kCFStringEncodingDOSNordic (1050)':
    'prefix': 'kCFStringEncodingDOSNordic'
    'body': 'KCFStringEncodingDOSNordic'
  'kCFStringEncodingDOSPortuguese (1045)':
    'prefix': 'kCFStringEncodingDOSPortuguese'
    'body': 'KCFStringEncodingDOSPortuguese'
  'kCFStringEncodingDOSRussian (1051)':
    'prefix': 'kCFStringEncodingDOSRussian'
    'body': 'KCFStringEncodingDOSRussian'
  'kCFStringEncodingDOSThai (1053)':
    'prefix': 'kCFStringEncodingDOSThai'
    'body': 'KCFStringEncodingDOSThai'
  'kCFStringEncodingDOSTurkish (1044)':
    'prefix': 'kCFStringEncodingDOSTurkish'
    'body': 'KCFStringEncodingDOSTurkish'
  'kCFStringEncodingEBCDIC_CP037 (3074)':
    'prefix': 'kCFStringEncodingEBCDIC_CP037'
    'body': 'KCFStringEncodingEBCDIC_CP037'
  'kCFStringEncodingEBCDIC_US (3073)':
    'prefix': 'kCFStringEncodingEBCDIC_US'
    'body': 'KCFStringEncodingEBCDIC_US'
  'kCFStringEncodingEUC_CN (2352)':
    'prefix': 'kCFStringEncodingEUC_CN'
    'body': 'KCFStringEncodingEUC_CN'
  'kCFStringEncodingEUC_JP (2336)':
    'prefix': 'kCFStringEncodingEUC_JP'
    'body': 'KCFStringEncodingEUC_JP'
  'kCFStringEncodingEUC_KR (2368)':
    'prefix': 'kCFStringEncodingEUC_KR'
    'body': 'KCFStringEncodingEUC_KR'
  'kCFStringEncodingEUC_TW (2353)':
    'prefix': 'kCFStringEncodingEUC_TW'
    'body': 'KCFStringEncodingEUC_TW'
  'kCFStringEncodingGBK_95 (1585)':
    'prefix': 'kCFStringEncodingGBK_95'
    'body': 'KCFStringEncodingGBK_95'
  'kCFStringEncodingGB_18030_2000 (1586)':
    'prefix': 'kCFStringEncodingGB_18030_2000'
    'body': 'KCFStringEncodingGB_18030_2000'
  'kCFStringEncodingGB_2312_80 (1584)':
    'prefix': 'kCFStringEncodingGB_2312_80'
    'body': 'KCFStringEncodingGB_2312_80'
  'kCFStringEncodingHZ_GB_2312 (2565)':
    'prefix': 'kCFStringEncodingHZ_GB_2312'
    'body': 'KCFStringEncodingHZ_GB_2312'
  'kCFStringEncodingISOLatin1 (513)':
    'prefix': 'kCFStringEncodingISOLatin1'
    'body': 'KCFStringEncodingISOLatin1'
  'kCFStringEncodingISOLatin10 (528)':
    'prefix': 'kCFStringEncodingISOLatin10'
    'body': 'KCFStringEncodingISOLatin10'
  'kCFStringEncodingISOLatin2 (514)':
    'prefix': 'kCFStringEncodingISOLatin2'
    'body': 'KCFStringEncodingISOLatin2'
  'kCFStringEncodingISOLatin3 (515)':
    'prefix': 'kCFStringEncodingISOLatin3'
    'body': 'KCFStringEncodingISOLatin3'
  'kCFStringEncodingISOLatin4 (516)':
    'prefix': 'kCFStringEncodingISOLatin4'
    'body': 'KCFStringEncodingISOLatin4'
  'kCFStringEncodingISOLatin5 (521)':
    'prefix': 'kCFStringEncodingISOLatin5'
    'body': 'KCFStringEncodingISOLatin5'
  'kCFStringEncodingISOLatin6 (522)':
    'prefix': 'kCFStringEncodingISOLatin6'
    'body': 'KCFStringEncodingISOLatin6'
  'kCFStringEncodingISOLatin7 (525)':
    'prefix': 'kCFStringEncodingISOLatin7'
    'body': 'KCFStringEncodingISOLatin7'
  'kCFStringEncodingISOLatin8 (526)':
    'prefix': 'kCFStringEncodingISOLatin8'
    'body': 'KCFStringEncodingISOLatin8'
  'kCFStringEncodingISOLatin9 (527)':
    'prefix': 'kCFStringEncodingISOLatin9'
    'body': 'KCFStringEncodingISOLatin9'
  'kCFStringEncodingISOLatinArabic (518)':
    'prefix': 'kCFStringEncodingISOLatinArabic'
    'body': 'KCFStringEncodingISOLatinArabic'
  'kCFStringEncodingISOLatinCyrillic (517)':
    'prefix': 'kCFStringEncodingISOLatinCyrillic'
    'body': 'KCFStringEncodingISOLatinCyrillic'
  'kCFStringEncodingISOLatinGreek (519)':
    'prefix': 'kCFStringEncodingISOLatinGreek'
    'body': 'KCFStringEncodingISOLatinGreek'
  'kCFStringEncodingISOLatinHebrew (520)':
    'prefix': 'kCFStringEncodingISOLatinHebrew'
    'body': 'KCFStringEncodingISOLatinHebrew'
  'kCFStringEncodingISOLatinThai (523)':
    'prefix': 'kCFStringEncodingISOLatinThai'
    'body': 'KCFStringEncodingISOLatinThai'
  'kCFStringEncodingISO_2022_CN (2096)':
    'prefix': 'kCFStringEncodingISO_2022_CN'
    'body': 'KCFStringEncodingISO_2022_CN'
  'kCFStringEncodingISO_2022_CN_EXT (2097)':
    'prefix': 'kCFStringEncodingISO_2022_CN_EXT'
    'body': 'KCFStringEncodingISO_2022_CN_EXT'
  'kCFStringEncodingISO_2022_JP (2080)':
    'prefix': 'kCFStringEncodingISO_2022_JP'
    'body': 'KCFStringEncodingISO_2022_JP'
  'kCFStringEncodingISO_2022_JP_1 (2082)':
    'prefix': 'kCFStringEncodingISO_2022_JP_1'
    'body': 'KCFStringEncodingISO_2022_JP_1'
  'kCFStringEncodingISO_2022_JP_2 (2081)':
    'prefix': 'kCFStringEncodingISO_2022_JP_2'
    'body': 'KCFStringEncodingISO_2022_JP_2'
  'kCFStringEncodingISO_2022_JP_3 (2083)':
    'prefix': 'kCFStringEncodingISO_2022_JP_3'
    'body': 'KCFStringEncodingISO_2022_JP_3'
  'kCFStringEncodingISO_2022_KR (2112)':
    'prefix': 'kCFStringEncodingISO_2022_KR'
    'body': 'KCFStringEncodingISO_2022_KR'
  'kCFStringEncodingInvalidId (4294967295)':
    'prefix': 'kCFStringEncodingInvalidId'
    'body': 'KCFStringEncodingInvalidId'
  'kCFStringEncodingJIS_C6226_78 (1572)':
    'prefix': 'kCFStringEncodingJIS_C6226_78'
    'body': 'KCFStringEncodingJIS_C6226_78'
  'kCFStringEncodingJIS_X0201_76 (1568)':
    'prefix': 'kCFStringEncodingJIS_X0201_76'
    'body': 'KCFStringEncodingJIS_X0201_76'
  'kCFStringEncodingJIS_X0208_83 (1569)':
    'prefix': 'kCFStringEncodingJIS_X0208_83'
    'body': 'KCFStringEncodingJIS_X0208_83'
  'kCFStringEncodingJIS_X0208_90 (1570)':
    'prefix': 'kCFStringEncodingJIS_X0208_90'
    'body': 'KCFStringEncodingJIS_X0208_90'
  'kCFStringEncodingJIS_X0212_90 (1571)':
    'prefix': 'kCFStringEncodingJIS_X0212_90'
    'body': 'KCFStringEncodingJIS_X0212_90'
  'kCFStringEncodingKOI8_R (2562)':
    'prefix': 'kCFStringEncodingKOI8_R'
    'body': 'KCFStringEncodingKOI8_R'
  'kCFStringEncodingKOI8_U (2568)':
    'prefix': 'kCFStringEncodingKOI8_U'
    'body': 'KCFStringEncodingKOI8_U'
  'kCFStringEncodingKSC_5601_87 (1600)':
    'prefix': 'kCFStringEncodingKSC_5601_87'
    'body': 'KCFStringEncodingKSC_5601_87'
  'kCFStringEncodingKSC_5601_92_Johab (1601)':
    'prefix': 'kCFStringEncodingKSC_5601_92_Johab'
    'body': 'KCFStringEncodingKSC_5601_92_Johab'
  'kCFStringEncodingMacArabic (4)':
    'prefix': 'kCFStringEncodingMacArabic'
    'body': 'KCFStringEncodingMacArabic'
  'kCFStringEncodingMacArmenian (24)':
    'prefix': 'kCFStringEncodingMacArmenian'
    'body': 'KCFStringEncodingMacArmenian'
  'kCFStringEncodingMacBengali (13)':
    'prefix': 'kCFStringEncodingMacBengali'
    'body': 'KCFStringEncodingMacBengali'
  'kCFStringEncodingMacBurmese (19)':
    'prefix': 'kCFStringEncodingMacBurmese'
    'body': 'KCFStringEncodingMacBurmese'
  'kCFStringEncodingMacCeltic (39)':
    'prefix': 'kCFStringEncodingMacCeltic'
    'body': 'KCFStringEncodingMacCeltic'
  'kCFStringEncodingMacCentralEurRoman (29)':
    'prefix': 'kCFStringEncodingMacCentralEurRoman'
    'body': 'KCFStringEncodingMacCentralEurRoman'
  'kCFStringEncodingMacChineseSimp (25)':
    'prefix': 'kCFStringEncodingMacChineseSimp'
    'body': 'KCFStringEncodingMacChineseSimp'
  'kCFStringEncodingMacChineseTrad (2)':
    'prefix': 'kCFStringEncodingMacChineseTrad'
    'body': 'KCFStringEncodingMacChineseTrad'
  'kCFStringEncodingMacCroatian (36)':
    'prefix': 'kCFStringEncodingMacCroatian'
    'body': 'KCFStringEncodingMacCroatian'
  'kCFStringEncodingMacCyrillic (7)':
    'prefix': 'kCFStringEncodingMacCyrillic'
    'body': 'KCFStringEncodingMacCyrillic'
  'kCFStringEncodingMacDevanagari (9)':
    'prefix': 'kCFStringEncodingMacDevanagari'
    'body': 'KCFStringEncodingMacDevanagari'
  'kCFStringEncodingMacDingbats (34)':
    'prefix': 'kCFStringEncodingMacDingbats'
    'body': 'KCFStringEncodingMacDingbats'
  'kCFStringEncodingMacEthiopic (28)':
    'prefix': 'kCFStringEncodingMacEthiopic'
    'body': 'KCFStringEncodingMacEthiopic'
  'kCFStringEncodingMacExtArabic (31)':
    'prefix': 'kCFStringEncodingMacExtArabic'
    'body': 'KCFStringEncodingMacExtArabic'
  'kCFStringEncodingMacFarsi (140)':
    'prefix': 'kCFStringEncodingMacFarsi'
    'body': 'KCFStringEncodingMacFarsi'
  'kCFStringEncodingMacGaelic (40)':
    'prefix': 'kCFStringEncodingMacGaelic'
    'body': 'KCFStringEncodingMacGaelic'
  'kCFStringEncodingMacGeorgian (23)':
    'prefix': 'kCFStringEncodingMacGeorgian'
    'body': 'KCFStringEncodingMacGeorgian'
  'kCFStringEncodingMacGreek (6)':
    'prefix': 'kCFStringEncodingMacGreek'
    'body': 'KCFStringEncodingMacGreek'
  'kCFStringEncodingMacGujarati (11)':
    'prefix': 'kCFStringEncodingMacGujarati'
    'body': 'KCFStringEncodingMacGujarati'
  'kCFStringEncodingMacGurmukhi (10)':
    'prefix': 'kCFStringEncodingMacGurmukhi'
    'body': 'KCFStringEncodingMacGurmukhi'
  'kCFStringEncodingMacHFS (255)':
    'prefix': 'kCFStringEncodingMacHFS'
    'body': 'KCFStringEncodingMacHFS'
  'kCFStringEncodingMacHebrew (5)':
    'prefix': 'kCFStringEncodingMacHebrew'
    'body': 'KCFStringEncodingMacHebrew'
  'kCFStringEncodingMacIcelandic (37)':
    'prefix': 'kCFStringEncodingMacIcelandic'
    'body': 'KCFStringEncodingMacIcelandic'
  'kCFStringEncodingMacInuit (236)':
    'prefix': 'kCFStringEncodingMacInuit'
    'body': 'KCFStringEncodingMacInuit'
  'kCFStringEncodingMacJapanese (1)':
    'prefix': 'kCFStringEncodingMacJapanese'
    'body': 'KCFStringEncodingMacJapanese'
  'kCFStringEncodingMacKannada (16)':
    'prefix': 'kCFStringEncodingMacKannada'
    'body': 'KCFStringEncodingMacKannada'
  'kCFStringEncodingMacKhmer (20)':
    'prefix': 'kCFStringEncodingMacKhmer'
    'body': 'KCFStringEncodingMacKhmer'
  'kCFStringEncodingMacKorean (3)':
    'prefix': 'kCFStringEncodingMacKorean'
    'body': 'KCFStringEncodingMacKorean'
  'kCFStringEncodingMacLaotian (22)':
    'prefix': 'kCFStringEncodingMacLaotian'
    'body': 'KCFStringEncodingMacLaotian'
  'kCFStringEncodingMacMalayalam (17)':
    'prefix': 'kCFStringEncodingMacMalayalam'
    'body': 'KCFStringEncodingMacMalayalam'
  'kCFStringEncodingMacMongolian (27)':
    'prefix': 'kCFStringEncodingMacMongolian'
    'body': 'KCFStringEncodingMacMongolian'
  'kCFStringEncodingMacOriya (12)':
    'prefix': 'kCFStringEncodingMacOriya'
    'body': 'KCFStringEncodingMacOriya'
  'kCFStringEncodingMacRoman (0)':
    'prefix': 'kCFStringEncodingMacRoman'
    'body': 'KCFStringEncodingMacRoman'
  'kCFStringEncodingMacRomanLatin1 (2564)':
    'prefix': 'kCFStringEncodingMacRomanLatin1'
    'body': 'KCFStringEncodingMacRomanLatin1'
  'kCFStringEncodingMacRomanian (38)':
    'prefix': 'kCFStringEncodingMacRomanian'
    'body': 'KCFStringEncodingMacRomanian'
  'kCFStringEncodingMacSinhalese (18)':
    'prefix': 'kCFStringEncodingMacSinhalese'
    'body': 'KCFStringEncodingMacSinhalese'
  'kCFStringEncodingMacSymbol (33)':
    'prefix': 'kCFStringEncodingMacSymbol'
    'body': 'KCFStringEncodingMacSymbol'
  'kCFStringEncodingMacTamil (14)':
    'prefix': 'kCFStringEncodingMacTamil'
    'body': 'KCFStringEncodingMacTamil'
  'kCFStringEncodingMacTelugu (15)':
    'prefix': 'kCFStringEncodingMacTelugu'
    'body': 'KCFStringEncodingMacTelugu'
  'kCFStringEncodingMacThai (21)':
    'prefix': 'kCFStringEncodingMacThai'
    'body': 'KCFStringEncodingMacThai'
  'kCFStringEncodingMacTibetan (26)':
    'prefix': 'kCFStringEncodingMacTibetan'
    'body': 'KCFStringEncodingMacTibetan'
  'kCFStringEncodingMacTurkish (35)':
    'prefix': 'kCFStringEncodingMacTurkish'
    'body': 'KCFStringEncodingMacTurkish'
  'kCFStringEncodingMacUkrainian (152)':
    'prefix': 'kCFStringEncodingMacUkrainian'
    'body': 'KCFStringEncodingMacUkrainian'
  'kCFStringEncodingMacVT100 (252)':
    'prefix': 'kCFStringEncodingMacVT100'
    'body': 'KCFStringEncodingMacVT100'
  'kCFStringEncodingMacVietnamese (30)':
    'prefix': 'kCFStringEncodingMacVietnamese'
    'body': 'KCFStringEncodingMacVietnamese'
  'kCFStringEncodingNextStepJapanese (2818)':
    'prefix': 'kCFStringEncodingNextStepJapanese'
    'body': 'KCFStringEncodingNextStepJapanese'
  'kCFStringEncodingNextStepLatin (2817)':
    'prefix': 'kCFStringEncodingNextStepLatin'
    'body': 'KCFStringEncodingNextStepLatin'
  'kCFStringEncodingNonLossyASCII (3071)':
    'prefix': 'kCFStringEncodingNonLossyASCII'
    'body': 'KCFStringEncodingNonLossyASCII'
  'kCFStringEncodingShiftJIS (2561)':
    'prefix': 'kCFStringEncodingShiftJIS'
    'body': 'KCFStringEncodingShiftJIS'
  'kCFStringEncodingShiftJIS_X0213 (1576)':
    'prefix': 'kCFStringEncodingShiftJIS_X0213'
    'body': 'KCFStringEncodingShiftJIS_X0213'
  'kCFStringEncodingShiftJIS_X0213_00 (1576)':
    'prefix': 'kCFStringEncodingShiftJIS_X0213_00'
    'body': 'KCFStringEncodingShiftJIS_X0213_00'
  'kCFStringEncodingShiftJIS_X0213_MenKuTen (1577)':
    'prefix': 'kCFStringEncodingShiftJIS_X0213_MenKuTen'
    'body': 'KCFStringEncodingShiftJIS_X0213_MenKuTen'
  'kCFStringEncodingUTF16 (256)':
    'prefix': 'kCFStringEncodingUTF16'
    'body': 'KCFStringEncodingUTF16'
  'kCFStringEncodingUTF16BE (268435712)':
    'prefix': 'kCFStringEncodingUTF16BE'
    'body': 'KCFStringEncodingUTF16BE'
  'kCFStringEncodingUTF16LE (335544576)':
    'prefix': 'kCFStringEncodingUTF16LE'
    'body': 'KCFStringEncodingUTF16LE'
  'kCFStringEncodingUTF32 (201326848)':
    'prefix': 'kCFStringEncodingUTF32'
    'body': 'KCFStringEncodingUTF32'
  'kCFStringEncodingUTF32BE (402653440)':
    'prefix': 'kCFStringEncodingUTF32BE'
    'body': 'KCFStringEncodingUTF32BE'
  'kCFStringEncodingUTF32LE (469762304)':
    'prefix': 'kCFStringEncodingUTF32LE'
    'body': 'KCFStringEncodingUTF32LE'
  'kCFStringEncodingUTF7 (67109120)':
    'prefix': 'kCFStringEncodingUTF7'
    'body': 'KCFStringEncodingUTF7'
  'kCFStringEncodingUTF7_IMAP (2576)':
    'prefix': 'kCFStringEncodingUTF7_IMAP'
    'body': 'KCFStringEncodingUTF7_IMAP'
  'kCFStringEncodingUTF8 (134217984)':
    'prefix': 'kCFStringEncodingUTF8'
    'body': 'KCFStringEncodingUTF8'
  'kCFStringEncodingUnicode (256)':
    'prefix': 'kCFStringEncodingUnicode'
    'body': 'KCFStringEncodingUnicode'
  'kCFStringEncodingVISCII (2567)':
    'prefix': 'kCFStringEncodingVISCII'
    'body': 'KCFStringEncodingVISCII'
  'kCFStringEncodingWindowsArabic (1286)':
    'prefix': 'kCFStringEncodingWindowsArabic'
    'body': 'KCFStringEncodingWindowsArabic'
  'kCFStringEncodingWindowsBalticRim (1287)':
    'prefix': 'kCFStringEncodingWindowsBalticRim'
    'body': 'KCFStringEncodingWindowsBalticRim'
  'kCFStringEncodingWindowsCyrillic (1282)':
    'prefix': 'kCFStringEncodingWindowsCyrillic'
    'body': 'KCFStringEncodingWindowsCyrillic'
  'kCFStringEncodingWindowsGreek (1283)':
    'prefix': 'kCFStringEncodingWindowsGreek'
    'body': 'KCFStringEncodingWindowsGreek'
  'kCFStringEncodingWindowsHebrew (1285)':
    'prefix': 'kCFStringEncodingWindowsHebrew'
    'body': 'KCFStringEncodingWindowsHebrew'
  'kCFStringEncodingWindowsKoreanJohab (1296)':
    'prefix': 'kCFStringEncodingWindowsKoreanJohab'
    'body': 'KCFStringEncodingWindowsKoreanJohab'
  'kCFStringEncodingWindowsLatin1 (1280)':
    'prefix': 'kCFStringEncodingWindowsLatin1'
    'body': 'KCFStringEncodingWindowsLatin1'
  'kCFStringEncodingWindowsLatin2 (1281)':
    'prefix': 'kCFStringEncodingWindowsLatin2'
    'body': 'KCFStringEncodingWindowsLatin2'
  'kCFStringEncodingWindowsLatin5 (1284)':
    'prefix': 'kCFStringEncodingWindowsLatin5'
    'body': 'KCFStringEncodingWindowsLatin5'
  'kCFStringEncodingWindowsVietnamese (1288)':
    'prefix': 'kCFStringEncodingWindowsVietnamese'
    'body': 'KCFStringEncodingWindowsVietnamese'
  'kCFStringNormalizationFormC (2)':
    'prefix': 'kCFStringNormalizationFormC'
    'body': 'KCFStringNormalizationFormC'
  'kCFStringNormalizationFormD (0)':
    'prefix': 'kCFStringNormalizationFormD'
    'body': 'KCFStringNormalizationFormD'
  'kCFStringNormalizationFormKC (3)':
    'prefix': 'kCFStringNormalizationFormKC'
    'body': 'KCFStringNormalizationFormKC'
  'kCFStringNormalizationFormKD (1)':
    'prefix': 'kCFStringNormalizationFormKD'
    'body': 'KCFStringNormalizationFormKD'
  'kCFStringTokenizerAttributeLanguage (131072)':
    'prefix': 'kCFStringTokenizerAttributeLanguage'
    'body': 'KCFStringTokenizerAttributeLanguage'
  'kCFStringTokenizerAttributeLatinTranscription (65536)':
    'prefix': 'kCFStringTokenizerAttributeLatinTranscription'
    'body': 'KCFStringTokenizerAttributeLatinTranscription'
  'kCFStringTokenizerTokenHasDerivedSubTokensMask (4)':
    'prefix': 'kCFStringTokenizerTokenHasDerivedSubTokensMask'
    'body': 'KCFStringTokenizerTokenHasDerivedSubTokensMask'
  'kCFStringTokenizerTokenHasHasNumbersMask (8)':
    'prefix': 'kCFStringTokenizerTokenHasHasNumbersMask'
    'body': 'KCFStringTokenizerTokenHasHasNumbersMask'
  'kCFStringTokenizerTokenHasNonLettersMask (16)':
    'prefix': 'kCFStringTokenizerTokenHasNonLettersMask'
    'body': 'KCFStringTokenizerTokenHasNonLettersMask'
  'kCFStringTokenizerTokenHasSubTokensMask (2)':
    'prefix': 'kCFStringTokenizerTokenHasSubTokensMask'
    'body': 'KCFStringTokenizerTokenHasSubTokensMask'
  'kCFStringTokenizerTokenIsCJWordMask (32)':
    'prefix': 'kCFStringTokenizerTokenIsCJWordMask'
    'body': 'KCFStringTokenizerTokenIsCJWordMask'
  'kCFStringTokenizerTokenNone (0)':
    'prefix': 'kCFStringTokenizerTokenNone'
    'body': 'KCFStringTokenizerTokenNone'
  'kCFStringTokenizerTokenNormal (1)':
    'prefix': 'kCFStringTokenizerTokenNormal'
    'body': 'KCFStringTokenizerTokenNormal'
  'kCFStringTokenizerUnitLineBreak (3)':
    'prefix': 'kCFStringTokenizerUnitLineBreak'
    'body': 'KCFStringTokenizerUnitLineBreak'
  'kCFStringTokenizerUnitParagraph (2)':
    'prefix': 'kCFStringTokenizerUnitParagraph'
    'body': 'KCFStringTokenizerUnitParagraph'
  'kCFStringTokenizerUnitSentence (1)':
    'prefix': 'kCFStringTokenizerUnitSentence'
    'body': 'KCFStringTokenizerUnitSentence'
  'kCFStringTokenizerUnitWord (0)':
    'prefix': 'kCFStringTokenizerUnitWord'
    'body': 'KCFStringTokenizerUnitWord'
  'kCFStringTokenizerUnitWordBoundary (4)':
    'prefix': 'kCFStringTokenizerUnitWordBoundary'
    'body': 'KCFStringTokenizerUnitWordBoundary'
  'kCFTimeZoneNameStyleDaylightSaving (2)':
    'prefix': 'kCFTimeZoneNameStyleDaylightSaving'
    'body': 'KCFTimeZoneNameStyleDaylightSaving'
  'kCFTimeZoneNameStyleGeneric (4)':
    'prefix': 'kCFTimeZoneNameStyleGeneric'
    'body': 'KCFTimeZoneNameStyleGeneric'
  'kCFTimeZoneNameStyleShortDaylightSaving (3)':
    'prefix': 'kCFTimeZoneNameStyleShortDaylightSaving'
    'body': 'KCFTimeZoneNameStyleShortDaylightSaving'
  'kCFTimeZoneNameStyleShortGeneric (5)':
    'prefix': 'kCFTimeZoneNameStyleShortGeneric'
    'body': 'KCFTimeZoneNameStyleShortGeneric'
  'kCFTimeZoneNameStyleShortStandard (1)':
    'prefix': 'kCFTimeZoneNameStyleShortStandard'
    'body': 'KCFTimeZoneNameStyleShortStandard'
  'kCFTimeZoneNameStyleStandard (0)':
    'prefix': 'kCFTimeZoneNameStyleStandard'
    'body': 'KCFTimeZoneNameStyleStandard'
  'kCFURLBookmarkCreationMinimalBookmarkMask (512)':
    'prefix': 'kCFURLBookmarkCreationMinimalBookmarkMask'
    'body': 'KCFURLBookmarkCreationMinimalBookmarkMask'
  'kCFURLBookmarkCreationPreferFileIDResolutionMask (256)':
    'prefix': 'kCFURLBookmarkCreationPreferFileIDResolutionMask'
    'body': 'KCFURLBookmarkCreationPreferFileIDResolutionMask'
  'kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess (4096)':
    'prefix': 'kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess'
    'body': 'KCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess'
  'kCFURLBookmarkCreationSuitableForBookmarkFile (1024)':
    'prefix': 'kCFURLBookmarkCreationSuitableForBookmarkFile'
    'body': 'KCFURLBookmarkCreationSuitableForBookmarkFile'
  'kCFURLBookmarkCreationWithSecurityScope (2048)':
    'prefix': 'kCFURLBookmarkCreationWithSecurityScope'
    'body': 'KCFURLBookmarkCreationWithSecurityScope'
  'kCFURLBookmarkResolutionWithSecurityScope (1024)':
    'prefix': 'kCFURLBookmarkResolutionWithSecurityScope'
    'body': 'KCFURLBookmarkResolutionWithSecurityScope'
  'kCFURLComponentFragment (12)':
    'prefix': 'kCFURLComponentFragment'
    'body': 'KCFURLComponentFragment'
  'kCFURLComponentHost (8)':
    'prefix': 'kCFURLComponentHost'
    'body': 'KCFURLComponentHost'
  'kCFURLComponentNetLocation (2)':
    'prefix': 'kCFURLComponentNetLocation'
    'body': 'KCFURLComponentNetLocation'
  'kCFURLComponentParameterString (10)':
    'prefix': 'kCFURLComponentParameterString'
    'body': 'KCFURLComponentParameterString'
  'kCFURLComponentPassword (6)':
    'prefix': 'kCFURLComponentPassword'
    'body': 'KCFURLComponentPassword'
  'kCFURLComponentPath (3)':
    'prefix': 'kCFURLComponentPath'
    'body': 'KCFURLComponentPath'
  'kCFURLComponentPort (9)':
    'prefix': 'kCFURLComponentPort'
    'body': 'KCFURLComponentPort'
  'kCFURLComponentQuery (11)':
    'prefix': 'kCFURLComponentQuery'
    'body': 'KCFURLComponentQuery'
  'kCFURLComponentResourceSpecifier (4)':
    'prefix': 'kCFURLComponentResourceSpecifier'
    'body': 'KCFURLComponentResourceSpecifier'
  'kCFURLComponentScheme (1)':
    'prefix': 'kCFURLComponentScheme'
    'body': 'KCFURLComponentScheme'
  'kCFURLComponentUser (5)':
    'prefix': 'kCFURLComponentUser'
    'body': 'KCFURLComponentUser'
  'kCFURLComponentUserInfo (7)':
    'prefix': 'kCFURLComponentUserInfo'
    'body': 'KCFURLComponentUserInfo'
  'kCFURLEnumeratorDefaultBehavior (0)':
    'prefix': 'kCFURLEnumeratorDefaultBehavior'
    'body': 'KCFURLEnumeratorDefaultBehavior'
  'kCFURLEnumeratorDescendRecursively (1)':
    'prefix': 'kCFURLEnumeratorDescendRecursively'
    'body': 'KCFURLEnumeratorDescendRecursively'
  'kCFURLEnumeratorDirectoryPostOrderSuccess (4)':
    'prefix': 'kCFURLEnumeratorDirectoryPostOrderSuccess'
    'body': 'KCFURLEnumeratorDirectoryPostOrderSuccess'
  'kCFURLEnumeratorEnd (2)':
    'prefix': 'kCFURLEnumeratorEnd'
    'body': 'KCFURLEnumeratorEnd'
  'kCFURLEnumeratorError (3)':
    'prefix': 'kCFURLEnumeratorError'
    'body': 'KCFURLEnumeratorError'
  'kCFURLEnumeratorGenerateFileReferenceURLs (4)':
    'prefix': 'kCFURLEnumeratorGenerateFileReferenceURLs'
    'body': 'KCFURLEnumeratorGenerateFileReferenceURLs'
  'kCFURLEnumeratorIncludeDirectoriesPostOrder (32)':
    'prefix': 'kCFURLEnumeratorIncludeDirectoriesPostOrder'
    'body': 'KCFURLEnumeratorIncludeDirectoriesPostOrder'
  'kCFURLEnumeratorIncludeDirectoriesPreOrder (16)':
    'prefix': 'kCFURLEnumeratorIncludeDirectoriesPreOrder'
    'body': 'KCFURLEnumeratorIncludeDirectoriesPreOrder'
  'kCFURLEnumeratorSkipInvisibles (2)':
    'prefix': 'kCFURLEnumeratorSkipInvisibles'
    'body': 'KCFURLEnumeratorSkipInvisibles'
  'kCFURLEnumeratorSkipPackageContents (8)':
    'prefix': 'kCFURLEnumeratorSkipPackageContents'
    'body': 'KCFURLEnumeratorSkipPackageContents'
  'kCFURLEnumeratorSuccess (1)':
    'prefix': 'kCFURLEnumeratorSuccess'
    'body': 'KCFURLEnumeratorSuccess'
  'kCFURLHFSPathStyle (1)':
    'prefix': 'kCFURLHFSPathStyle'
    'body': 'KCFURLHFSPathStyle'
  'kCFURLImproperArgumentsError (-15)':
    'prefix': 'kCFURLImproperArgumentsError'
    'body': 'KCFURLImproperArgumentsError'
  'kCFURLPOSIXPathStyle (0)':
    'prefix': 'kCFURLPOSIXPathStyle'
    'body': 'KCFURLPOSIXPathStyle'
  'kCFURLPropertyKeyUnavailableError (-17)':
    'prefix': 'kCFURLPropertyKeyUnavailableError'
    'body': 'KCFURLPropertyKeyUnavailableError'
  'kCFURLRemoteHostUnavailableError (-14)':
    'prefix': 'kCFURLRemoteHostUnavailableError'
    'body': 'KCFURLRemoteHostUnavailableError'
  'kCFURLResourceAccessViolationError (-13)':
    'prefix': 'kCFURLResourceAccessViolationError'
    'body': 'KCFURLResourceAccessViolationError'
  'kCFURLResourceNotFoundError (-12)':
    'prefix': 'kCFURLResourceNotFoundError'
    'body': 'KCFURLResourceNotFoundError'
  'kCFURLTimeoutError (-18)':
    'prefix': 'kCFURLTimeoutError'
    'body': 'KCFURLTimeoutError'
  'kCFURLUnknownError (-10)':
    'prefix': 'kCFURLUnknownError'
    'body': 'KCFURLUnknownError'
  'kCFURLUnknownPropertyKeyError (-16)':
    'prefix': 'kCFURLUnknownPropertyKeyError'
    'body': 'KCFURLUnknownPropertyKeyError'
  'kCFURLUnknownSchemeError (-11)':
    'prefix': 'kCFURLUnknownSchemeError'
    'body': 'KCFURLUnknownSchemeError'
  'kCFURLWindowsPathStyle (2)':
    'prefix': 'kCFURLWindowsPathStyle'
    'body': 'KCFURLWindowsPathStyle'
  'CFAbsoluteTimeAddGregorianUnits':
    'prefix': 'CFAbsoluteTimeAddGregorianUnits'
    'body': 'CFAbsoluteTimeAddGregorianUnits(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz}, ${3:CFGregorianUnits units})'
  'CFAbsoluteTimeGetCurrent':
    'prefix': 'CFAbsoluteTimeGetCurrent'
    'body': 'CFAbsoluteTimeGetCurrent()'
  'CFAbsoluteTimeGetDayOfWeek':
    'prefix': 'CFAbsoluteTimeGetDayOfWeek'
    'body': 'CFAbsoluteTimeGetDayOfWeek(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz})'
  'CFAbsoluteTimeGetDayOfYear':
    'prefix': 'CFAbsoluteTimeGetDayOfYear'
    'body': 'CFAbsoluteTimeGetDayOfYear(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz})'
  'CFAbsoluteTimeGetDifferenceAsGregorianUnits':
    'prefix': 'CFAbsoluteTimeGetDifferenceAsGregorianUnits'
    'body': 'CFAbsoluteTimeGetDifferenceAsGregorianUnits(${1:CFAbsoluteTime at1}, ${2:CFAbsoluteTime at2}, ${3:CFTimeZoneRef tz}, ${4:CFOptionFlags unitFlags})'
  'CFAbsoluteTimeGetGregorianDate':
    'prefix': 'CFAbsoluteTimeGetGregorianDate'
    'body': 'CFAbsoluteTimeGetGregorianDate(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz})'
  'CFAbsoluteTimeGetWeekOfYear':
    'prefix': 'CFAbsoluteTimeGetWeekOfYear'
    'body': 'CFAbsoluteTimeGetWeekOfYear(${1:CFAbsoluteTime at}, ${2:CFTimeZoneRef tz})'
  'CFAllocatorAllocate':
    'prefix': 'CFAllocatorAllocate'
    'body': 'CFAllocatorAllocate(${1:CFAllocatorRef allocator}, ${2:CFIndex size}, ${3:CFOptionFlags hint})'
  'CFAllocatorCreate':
    'prefix': 'CFAllocatorCreate'
    'body': 'CFAllocatorCreate(${1:CFAllocatorRef allocator}, ${2:CFAllocatorContext* context})'
  'CFAllocatorDeallocate':
    'prefix': 'CFAllocatorDeallocate'
    'body': 'CFAllocatorDeallocate(${1:CFAllocatorRef allocator}, ${2:void* ptr})'
  'CFAllocatorGetContext':
    'prefix': 'CFAllocatorGetContext'
    'body': 'CFAllocatorGetContext(${1:CFAllocatorRef allocator}, ${2:CFAllocatorContext* context})'
  'CFAllocatorGetDefault':
    'prefix': 'CFAllocatorGetDefault'
    'body': 'CFAllocatorGetDefault()'
  'CFAllocatorGetPreferredSizeForSize':
    'prefix': 'CFAllocatorGetPreferredSizeForSize'
    'body': 'CFAllocatorGetPreferredSizeForSize(${1:CFAllocatorRef allocator}, ${2:CFIndex size}, ${3:CFOptionFlags hint})'
  'CFAllocatorGetTypeID':
    'prefix': 'CFAllocatorGetTypeID'
    'body': 'CFAllocatorGetTypeID()'
  'CFAllocatorReallocate':
    'prefix': 'CFAllocatorReallocate'
    'body': 'CFAllocatorReallocate(${1:CFAllocatorRef allocator}, ${2:void* ptr}, ${3:CFIndex newsize}, ${4:CFOptionFlags hint})'
  'CFAllocatorSetDefault':
    'prefix': 'CFAllocatorSetDefault'
    'body': 'CFAllocatorSetDefault(${1:CFAllocatorRef allocator})'
  'CFArrayAppendArray':
    'prefix': 'CFArrayAppendArray'
    'body': 'CFArrayAppendArray(${1:CFMutableArrayRef theArray}, ${2:CFArrayRef otherArray}, ${3:CFRange otherRange})'
  'CFArrayAppendValue':
    'prefix': 'CFArrayAppendValue'
    'body': 'CFArrayAppendValue(${1:CFMutableArrayRef theArray}, ${2:void* value})'
  'CFArrayApplyFunction':
    'prefix': 'CFArrayApplyFunction'
    'body': 'CFArrayApplyFunction(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:CFArrayApplierFunction applier}, ${4:void* context})'
  'CFArrayBSearchValues':
    'prefix': 'CFArrayBSearchValues'
    'body': 'CFArrayBSearchValues(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value}, ${4:CFComparatorFunction comparator}, ${5:void* context})'
  'CFArrayContainsValue':
    'prefix': 'CFArrayContainsValue'
    'body': 'CFArrayContainsValue(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value})'
  'CFArrayCreate':
    'prefix': 'CFArrayCreate'
    'body': 'CFArrayCreate(${1:CFAllocatorRef allocator}, ${2:void** values}, ${3:CFIndex numValues}, ${4:CFArrayCallBacks* callBacks})'
  'CFArrayCreateCopy':
    'prefix': 'CFArrayCreateCopy'
    'body': 'CFArrayCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFArrayRef theArray})'
  'CFArrayCreateMutable':
    'prefix': 'CFArrayCreateMutable'
    'body': 'CFArrayCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFArrayCallBacks* callBacks})'
  'CFArrayCreateMutableCopy':
    'prefix': 'CFArrayCreateMutableCopy'
    'body': 'CFArrayCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFArrayRef theArray})'
  'CFArrayExchangeValuesAtIndices':
    'prefix': 'CFArrayExchangeValuesAtIndices'
    'body': 'CFArrayExchangeValuesAtIndices(${1:CFMutableArrayRef theArray}, ${2:CFIndex idx1}, ${3:CFIndex idx2})'
  'CFArrayGetCount':
    'prefix': 'CFArrayGetCount'
    'body': 'CFArrayGetCount(${1:CFArrayRef theArray})'
  'CFArrayGetCountOfValue':
    'prefix': 'CFArrayGetCountOfValue'
    'body': 'CFArrayGetCountOfValue(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value})'
  'CFArrayGetFirstIndexOfValue':
    'prefix': 'CFArrayGetFirstIndexOfValue'
    'body': 'CFArrayGetFirstIndexOfValue(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value})'
  'CFArrayGetLastIndexOfValue':
    'prefix': 'CFArrayGetLastIndexOfValue'
    'body': 'CFArrayGetLastIndexOfValue(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void* value})'
  'CFArrayGetTypeID':
    'prefix': 'CFArrayGetTypeID'
    'body': 'CFArrayGetTypeID()'
  'CFArrayGetValueAtIndex':
    'prefix': 'CFArrayGetValueAtIndex'
    'body': 'CFArrayGetValueAtIndex(${1:CFArrayRef theArray}, ${2:CFIndex idx})'
  'CFArrayGetValues':
    'prefix': 'CFArrayGetValues'
    'body': 'CFArrayGetValues(${1:CFArrayRef theArray}, ${2:CFRange range}, ${3:void** values})'
  'CFArrayInsertValueAtIndex':
    'prefix': 'CFArrayInsertValueAtIndex'
    'body': 'CFArrayInsertValueAtIndex(${1:CFMutableArrayRef theArray}, ${2:CFIndex idx}, ${3:void* value})'
  'CFArrayRemoveAllValues':
    'prefix': 'CFArrayRemoveAllValues'
    'body': 'CFArrayRemoveAllValues(${1:CFMutableArrayRef theArray})'
  'CFArrayRemoveValueAtIndex':
    'prefix': 'CFArrayRemoveValueAtIndex'
    'body': 'CFArrayRemoveValueAtIndex(${1:CFMutableArrayRef theArray}, ${2:CFIndex idx})'
  'CFArrayReplaceValues':
    'prefix': 'CFArrayReplaceValues'
    'body': 'CFArrayReplaceValues(${1:CFMutableArrayRef theArray}, ${2:CFRange range}, ${3:void** newValues}, ${4:CFIndex newCount})'
  'CFArraySetValueAtIndex':
    'prefix': 'CFArraySetValueAtIndex'
    'body': 'CFArraySetValueAtIndex(${1:CFMutableArrayRef theArray}, ${2:CFIndex idx}, ${3:void* value})'
  'CFArraySortValues':
    'prefix': 'CFArraySortValues'
    'body': 'CFArraySortValues(${1:CFMutableArrayRef theArray}, ${2:CFRange range}, ${3:CFComparatorFunction comparator}, ${4:void* context})'
  'CFAttributedStringBeginEditing':
    'prefix': 'CFAttributedStringBeginEditing'
    'body': 'CFAttributedStringBeginEditing(${1:CFMutableAttributedStringRef aStr})'
  'CFAttributedStringCreate':
    'prefix': 'CFAttributedStringCreate'
    'body': 'CFAttributedStringCreate(${1:CFAllocatorRef alloc}, ${2:CFStringRef str}, ${3:CFDictionaryRef attributes})'
  'CFAttributedStringCreateCopy':
    'prefix': 'CFAttributedStringCreateCopy'
    'body': 'CFAttributedStringCreateCopy(${1:CFAllocatorRef alloc}, ${2:CFAttributedStringRef aStr})'
  'CFAttributedStringCreateMutable':
    'prefix': 'CFAttributedStringCreateMutable'
    'body': 'CFAttributedStringCreateMutable(${1:CFAllocatorRef alloc}, ${2:CFIndex maxLength})'
  'CFAttributedStringCreateMutableCopy':
    'prefix': 'CFAttributedStringCreateMutableCopy'
    'body': 'CFAttributedStringCreateMutableCopy(${1:CFAllocatorRef alloc}, ${2:CFIndex maxLength}, ${3:CFAttributedStringRef aStr})'
  'CFAttributedStringCreateWithSubstring':
    'prefix': 'CFAttributedStringCreateWithSubstring'
    'body': 'CFAttributedStringCreateWithSubstring(${1:CFAllocatorRef alloc}, ${2:CFAttributedStringRef aStr}, ${3:CFRange range})'
  'CFAttributedStringEndEditing':
    'prefix': 'CFAttributedStringEndEditing'
    'body': 'CFAttributedStringEndEditing(${1:CFMutableAttributedStringRef aStr})'
  'CFAttributedStringGetAttribute':
    'prefix': 'CFAttributedStringGetAttribute'
    'body': 'CFAttributedStringGetAttribute(${1:CFAttributedStringRef aStr}, ${2:CFIndex loc}, ${3:CFStringRef attrName}, ${4:CFRange* effectiveRange})'
  'CFAttributedStringGetAttributeAndLongestEffectiveRange':
    'prefix': 'CFAttributedStringGetAttributeAndLongestEffectiveRange'
    'body': 'CFAttributedStringGetAttributeAndLongestEffectiveRange(${1:CFAttributedStringRef aStr}, ${2:CFIndex loc}, ${3:CFStringRef attrName}, ${4:CFRange inRange}, ${5:CFRange* longestEffectiveRange})'
  'CFAttributedStringGetAttributes':
    'prefix': 'CFAttributedStringGetAttributes'
    'body': 'CFAttributedStringGetAttributes(${1:CFAttributedStringRef aStr}, ${2:CFIndex loc}, ${3:CFRange* effectiveRange})'
  'CFAttributedStringGetAttributesAndLongestEffectiveRange':
    'prefix': 'CFAttributedStringGetAttributesAndLongestEffectiveRange'
    'body': 'CFAttributedStringGetAttributesAndLongestEffectiveRange(${1:CFAttributedStringRef aStr}, ${2:CFIndex loc}, ${3:CFRange inRange}, ${4:CFRange* longestEffectiveRange})'
  'CFAttributedStringGetLength':
    'prefix': 'CFAttributedStringGetLength'
    'body': 'CFAttributedStringGetLength(${1:CFAttributedStringRef aStr})'
  'CFAttributedStringGetMutableString':
    'prefix': 'CFAttributedStringGetMutableString'
    'body': 'CFAttributedStringGetMutableString(${1:CFMutableAttributedStringRef aStr})'
  'CFAttributedStringGetString':
    'prefix': 'CFAttributedStringGetString'
    'body': 'CFAttributedStringGetString(${1:CFAttributedStringRef aStr})'
  'CFAttributedStringGetTypeID':
    'prefix': 'CFAttributedStringGetTypeID'
    'body': 'CFAttributedStringGetTypeID()'
  'CFAttributedStringRemoveAttribute':
    'prefix': 'CFAttributedStringRemoveAttribute'
    'body': 'CFAttributedStringRemoveAttribute(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFStringRef attrName})'
  'CFAttributedStringReplaceAttributedString':
    'prefix': 'CFAttributedStringReplaceAttributedString'
    'body': 'CFAttributedStringReplaceAttributedString(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFAttributedStringRef replacement})'
  'CFAttributedStringReplaceString':
    'prefix': 'CFAttributedStringReplaceString'
    'body': 'CFAttributedStringReplaceString(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFStringRef replacement})'
  'CFAttributedStringSetAttribute':
    'prefix': 'CFAttributedStringSetAttribute'
    'body': 'CFAttributedStringSetAttribute(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFStringRef attrName}, ${4:CFTypeRef value})'
  'CFAttributedStringSetAttributes':
    'prefix': 'CFAttributedStringSetAttributes'
    'body': 'CFAttributedStringSetAttributes(${1:CFMutableAttributedStringRef aStr}, ${2:CFRange range}, ${3:CFDictionaryRef replacement}, ${4:Boolean clearOtherAttributes})'
  'CFAutorelease':
    'prefix': 'CFAutorelease'
    'body': 'CFAutorelease(${1:CFTypeRef arg})'
  'CFBagAddValue':
    'prefix': 'CFBagAddValue'
    'body': 'CFBagAddValue(${1:CFMutableBagRef theBag}, ${2:void* value})'
  'CFBagApplyFunction':
    'prefix': 'CFBagApplyFunction'
    'body': 'CFBagApplyFunction(${1:CFBagRef theBag}, ${2:CFBagApplierFunction applier}, ${3:void* context})'
  'CFBagContainsValue':
    'prefix': 'CFBagContainsValue'
    'body': 'CFBagContainsValue(${1:CFBagRef theBag}, ${2:void* value})'
  'CFBagCreate':
    'prefix': 'CFBagCreate'
    'body': 'CFBagCreate(${1:CFAllocatorRef allocator}, ${2:void** values}, ${3:CFIndex numValues}, ${4:CFBagCallBacks* callBacks})'
  'CFBagCreateCopy':
    'prefix': 'CFBagCreateCopy'
    'body': 'CFBagCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFBagRef theBag})'
  'CFBagCreateMutable':
    'prefix': 'CFBagCreateMutable'
    'body': 'CFBagCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBagCallBacks* callBacks})'
  'CFBagCreateMutableCopy':
    'prefix': 'CFBagCreateMutableCopy'
    'body': 'CFBagCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBagRef theBag})'
  'CFBagGetCount':
    'prefix': 'CFBagGetCount'
    'body': 'CFBagGetCount(${1:CFBagRef theBag})'
  'CFBagGetCountOfValue':
    'prefix': 'CFBagGetCountOfValue'
    'body': 'CFBagGetCountOfValue(${1:CFBagRef theBag}, ${2:void* value})'
  'CFBagGetTypeID':
    'prefix': 'CFBagGetTypeID'
    'body': 'CFBagGetTypeID()'
  'CFBagGetValue':
    'prefix': 'CFBagGetValue'
    'body': 'CFBagGetValue(${1:CFBagRef theBag}, ${2:void* value})'
  'CFBagGetValueIfPresent':
    'prefix': 'CFBagGetValueIfPresent'
    'body': 'CFBagGetValueIfPresent(${1:CFBagRef theBag}, ${2:void* candidate}, ${3:void** value})'
  'CFBagGetValues':
    'prefix': 'CFBagGetValues'
    'body': 'CFBagGetValues(${1:CFBagRef theBag}, ${2:void** values})'
  'CFBagRemoveAllValues':
    'prefix': 'CFBagRemoveAllValues'
    'body': 'CFBagRemoveAllValues(${1:CFMutableBagRef theBag})'
  'CFBagRemoveValue':
    'prefix': 'CFBagRemoveValue'
    'body': 'CFBagRemoveValue(${1:CFMutableBagRef theBag}, ${2:void* value})'
  'CFBagReplaceValue':
    'prefix': 'CFBagReplaceValue'
    'body': 'CFBagReplaceValue(${1:CFMutableBagRef theBag}, ${2:void* value})'
  'CFBagSetValue':
    'prefix': 'CFBagSetValue'
    'body': 'CFBagSetValue(${1:CFMutableBagRef theBag}, ${2:void* value})'
  'CFBinaryHeapAddValue':
    'prefix': 'CFBinaryHeapAddValue'
    'body': 'CFBinaryHeapAddValue(${1:CFBinaryHeapRef heap}, ${2:void* value})'
  'CFBinaryHeapApplyFunction':
    'prefix': 'CFBinaryHeapApplyFunction'
    'body': 'CFBinaryHeapApplyFunction(${1:CFBinaryHeapRef heap}, ${2:CFBinaryHeapApplierFunction applier}, ${3:void* context})'
  'CFBinaryHeapContainsValue':
    'prefix': 'CFBinaryHeapContainsValue'
    'body': 'CFBinaryHeapContainsValue(${1:CFBinaryHeapRef heap}, ${2:void* value})'
  'CFBinaryHeapCreate':
    'prefix': 'CFBinaryHeapCreate'
    'body': 'CFBinaryHeapCreate(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBinaryHeapCallBacks* callBacks}, ${4:CFBinaryHeapCompareContext* compareContext})'
  'CFBinaryHeapCreateCopy':
    'prefix': 'CFBinaryHeapCreateCopy'
    'body': 'CFBinaryHeapCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBinaryHeapRef heap})'
  'CFBinaryHeapGetCount':
    'prefix': 'CFBinaryHeapGetCount'
    'body': 'CFBinaryHeapGetCount(${1:CFBinaryHeapRef heap})'
  'CFBinaryHeapGetCountOfValue':
    'prefix': 'CFBinaryHeapGetCountOfValue'
    'body': 'CFBinaryHeapGetCountOfValue(${1:CFBinaryHeapRef heap}, ${2:void* value})'
  'CFBinaryHeapGetMinimum':
    'prefix': 'CFBinaryHeapGetMinimum'
    'body': 'CFBinaryHeapGetMinimum(${1:CFBinaryHeapRef heap})'
  'CFBinaryHeapGetMinimumIfPresent':
    'prefix': 'CFBinaryHeapGetMinimumIfPresent'
    'body': 'CFBinaryHeapGetMinimumIfPresent(${1:CFBinaryHeapRef heap}, ${2:void** value})'
  'CFBinaryHeapGetTypeID':
    'prefix': 'CFBinaryHeapGetTypeID'
    'body': 'CFBinaryHeapGetTypeID()'
  'CFBinaryHeapGetValues':
    'prefix': 'CFBinaryHeapGetValues'
    'body': 'CFBinaryHeapGetValues(${1:CFBinaryHeapRef heap}, ${2:void** values})'
  'CFBinaryHeapRemoveAllValues':
    'prefix': 'CFBinaryHeapRemoveAllValues'
    'body': 'CFBinaryHeapRemoveAllValues(${1:CFBinaryHeapRef heap})'
  'CFBinaryHeapRemoveMinimumValue':
    'prefix': 'CFBinaryHeapRemoveMinimumValue'
    'body': 'CFBinaryHeapRemoveMinimumValue(${1:CFBinaryHeapRef heap})'
  'CFBitVectorContainsBit':
    'prefix': 'CFBitVectorContainsBit'
    'body': 'CFBitVectorContainsBit(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})'
  'CFBitVectorCreate':
    'prefix': 'CFBitVectorCreate'
    'body': 'CFBitVectorCreate(${1:CFAllocatorRef allocator}, ${2:UInt8* bytes}, ${3:CFIndex numBits})'
  'CFBitVectorCreateCopy':
    'prefix': 'CFBitVectorCreateCopy'
    'body': 'CFBitVectorCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFBitVectorRef bv})'
  'CFBitVectorCreateMutable':
    'prefix': 'CFBitVectorCreateMutable'
    'body': 'CFBitVectorCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity})'
  'CFBitVectorCreateMutableCopy':
    'prefix': 'CFBitVectorCreateMutableCopy'
    'body': 'CFBitVectorCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFBitVectorRef bv})'
  'CFBitVectorFlipBitAtIndex':
    'prefix': 'CFBitVectorFlipBitAtIndex'
    'body': 'CFBitVectorFlipBitAtIndex(${1:CFMutableBitVectorRef bv}, ${2:CFIndex idx})'
  'CFBitVectorFlipBits':
    'prefix': 'CFBitVectorFlipBits'
    'body': 'CFBitVectorFlipBits(${1:CFMutableBitVectorRef bv}, ${2:CFRange range})'
  'CFBitVectorGetBitAtIndex':
    'prefix': 'CFBitVectorGetBitAtIndex'
    'body': 'CFBitVectorGetBitAtIndex(${1:CFBitVectorRef bv}, ${2:CFIndex idx})'
  'CFBitVectorGetBits':
    'prefix': 'CFBitVectorGetBits'
    'body': 'CFBitVectorGetBits(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:UInt8* bytes})'
  'CFBitVectorGetCount':
    'prefix': 'CFBitVectorGetCount'
    'body': 'CFBitVectorGetCount(${1:CFBitVectorRef bv})'
  'CFBitVectorGetCountOfBit':
    'prefix': 'CFBitVectorGetCountOfBit'
    'body': 'CFBitVectorGetCountOfBit(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})'
  'CFBitVectorGetFirstIndexOfBit':
    'prefix': 'CFBitVectorGetFirstIndexOfBit'
    'body': 'CFBitVectorGetFirstIndexOfBit(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})'
  'CFBitVectorGetLastIndexOfBit':
    'prefix': 'CFBitVectorGetLastIndexOfBit'
    'body': 'CFBitVectorGetLastIndexOfBit(${1:CFBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})'
  'CFBitVectorGetTypeID':
    'prefix': 'CFBitVectorGetTypeID'
    'body': 'CFBitVectorGetTypeID()'
  'CFBitVectorSetAllBits':
    'prefix': 'CFBitVectorSetAllBits'
    'body': 'CFBitVectorSetAllBits(${1:CFMutableBitVectorRef bv}, ${2:CFBit value})'
  'CFBitVectorSetBitAtIndex':
    'prefix': 'CFBitVectorSetBitAtIndex'
    'body': 'CFBitVectorSetBitAtIndex(${1:CFMutableBitVectorRef bv}, ${2:CFIndex idx}, ${3:CFBit value})'
  'CFBitVectorSetBits':
    'prefix': 'CFBitVectorSetBits'
    'body': 'CFBitVectorSetBits(${1:CFMutableBitVectorRef bv}, ${2:CFRange range}, ${3:CFBit value})'
  'CFBitVectorSetCount':
    'prefix': 'CFBitVectorSetCount'
    'body': 'CFBitVectorSetCount(${1:CFMutableBitVectorRef bv}, ${2:CFIndex count})'
  'CFBooleanGetTypeID':
    'prefix': 'CFBooleanGetTypeID'
    'body': 'CFBooleanGetTypeID()'
  'CFBooleanGetValue':
    'prefix': 'CFBooleanGetValue'
    'body': 'CFBooleanGetValue(${1:CFBooleanRef boolean})'
  'CFBundleCloseBundleResourceMap':
    'prefix': 'CFBundleCloseBundleResourceMap'
    'body': 'CFBundleCloseBundleResourceMap(${1:CFBundleRef bundle}, ${2:CFBundleRefNum refNum})'
  'CFBundleCopyAuxiliaryExecutableURL':
    'prefix': 'CFBundleCopyAuxiliaryExecutableURL'
    'body': 'CFBundleCopyAuxiliaryExecutableURL(${1:CFBundleRef bundle}, ${2:CFStringRef executableName})'
  'CFBundleCopyBuiltInPlugInsURL':
    'prefix': 'CFBundleCopyBuiltInPlugInsURL'
    'body': 'CFBundleCopyBuiltInPlugInsURL(${1:CFBundleRef bundle})'
  'CFBundleCopyBundleLocalizations':
    'prefix': 'CFBundleCopyBundleLocalizations'
    'body': 'CFBundleCopyBundleLocalizations(${1:CFBundleRef bundle})'
  'CFBundleCopyBundleURL':
    'prefix': 'CFBundleCopyBundleURL'
    'body': 'CFBundleCopyBundleURL(${1:CFBundleRef bundle})'
  'CFBundleCopyExecutableArchitectures':
    'prefix': 'CFBundleCopyExecutableArchitectures'
    'body': 'CFBundleCopyExecutableArchitectures(${1:CFBundleRef bundle})'
  'CFBundleCopyExecutableArchitecturesForURL':
    'prefix': 'CFBundleCopyExecutableArchitecturesForURL'
    'body': 'CFBundleCopyExecutableArchitecturesForURL(${1:CFURLRef url})'
  'CFBundleCopyExecutableURL':
    'prefix': 'CFBundleCopyExecutableURL'
    'body': 'CFBundleCopyExecutableURL(${1:CFBundleRef bundle})'
  'CFBundleCopyInfoDictionaryForURL':
    'prefix': 'CFBundleCopyInfoDictionaryForURL'
    'body': 'CFBundleCopyInfoDictionaryForURL(${1:CFURLRef url})'
  'CFBundleCopyInfoDictionaryInDirectory':
    'prefix': 'CFBundleCopyInfoDictionaryInDirectory'
    'body': 'CFBundleCopyInfoDictionaryInDirectory(${1:CFURLRef bundleURL})'
  'CFBundleCopyLocalizationsForPreferences':
    'prefix': 'CFBundleCopyLocalizationsForPreferences'
    'body': 'CFBundleCopyLocalizationsForPreferences(${1:CFArrayRef locArray}, ${2:CFArrayRef prefArray})'
  'CFBundleCopyLocalizationsForURL':
    'prefix': 'CFBundleCopyLocalizationsForURL'
    'body': 'CFBundleCopyLocalizationsForURL(${1:CFURLRef url})'
  'CFBundleCopyLocalizedString':
    'prefix': 'CFBundleCopyLocalizedString'
    'body': 'CFBundleCopyLocalizedString(${1:CFBundleRef bundle}, ${2:CFStringRef key}, ${3:CFStringRef value}, ${4:CFStringRef tableName})'
  'CFBundleCopyPreferredLocalizationsFromArray':
    'prefix': 'CFBundleCopyPreferredLocalizationsFromArray'
    'body': 'CFBundleCopyPreferredLocalizationsFromArray(${1:CFArrayRef locArray})'
  'CFBundleCopyPrivateFrameworksURL':
    'prefix': 'CFBundleCopyPrivateFrameworksURL'
    'body': 'CFBundleCopyPrivateFrameworksURL(${1:CFBundleRef bundle})'
  'CFBundleCopyResourceURL':
    'prefix': 'CFBundleCopyResourceURL'
    'body': 'CFBundleCopyResourceURL(${1:CFBundleRef bundle}, ${2:CFStringRef resourceName}, ${3:CFStringRef resourceType}, ${4:CFStringRef subDirName})'
  'CFBundleCopyResourceURLForLocalization':
    'prefix': 'CFBundleCopyResourceURLForLocalization'
    'body': 'CFBundleCopyResourceURLForLocalization(${1:CFBundleRef bundle}, ${2:CFStringRef resourceName}, ${3:CFStringRef resourceType}, ${4:CFStringRef subDirName}, ${5:CFStringRef localizationName})'
  'CFBundleCopyResourceURLInDirectory':
    'prefix': 'CFBundleCopyResourceURLInDirectory'
    'body': 'CFBundleCopyResourceURLInDirectory(${1:CFURLRef bundleURL}, ${2:CFStringRef resourceName}, ${3:CFStringRef resourceType}, ${4:CFStringRef subDirName})'
  'CFBundleCopyResourceURLsOfType':
    'prefix': 'CFBundleCopyResourceURLsOfType'
    'body': 'CFBundleCopyResourceURLsOfType(${1:CFBundleRef bundle}, ${2:CFStringRef resourceType}, ${3:CFStringRef subDirName})'
  'CFBundleCopyResourceURLsOfTypeForLocalization':
    'prefix': 'CFBundleCopyResourceURLsOfTypeForLocalization'
    'body': 'CFBundleCopyResourceURLsOfTypeForLocalization(${1:CFBundleRef bundle}, ${2:CFStringRef resourceType}, ${3:CFStringRef subDirName}, ${4:CFStringRef localizationName})'
  'CFBundleCopyResourceURLsOfTypeInDirectory':
    'prefix': 'CFBundleCopyResourceURLsOfTypeInDirectory'
    'body': 'CFBundleCopyResourceURLsOfTypeInDirectory(${1:CFURLRef bundleURL}, ${2:CFStringRef resourceType}, ${3:CFStringRef subDirName})'
  'CFBundleCopyResourcesDirectoryURL':
    'prefix': 'CFBundleCopyResourcesDirectoryURL'
    'body': 'CFBundleCopyResourcesDirectoryURL(${1:CFBundleRef bundle})'
  'CFBundleCopySharedFrameworksURL':
    'prefix': 'CFBundleCopySharedFrameworksURL'
    'body': 'CFBundleCopySharedFrameworksURL(${1:CFBundleRef bundle})'
  'CFBundleCopySharedSupportURL':
    'prefix': 'CFBundleCopySharedSupportURL'
    'body': 'CFBundleCopySharedSupportURL(${1:CFBundleRef bundle})'
  'CFBundleCopySupportFilesDirectoryURL':
    'prefix': 'CFBundleCopySupportFilesDirectoryURL'
    'body': 'CFBundleCopySupportFilesDirectoryURL(${1:CFBundleRef bundle})'
  'CFBundleCreate':
    'prefix': 'CFBundleCreate'
    'body': 'CFBundleCreate(${1:CFAllocatorRef allocator}, ${2:CFURLRef bundleURL})'
  'CFBundleCreateBundlesFromDirectory':
    'prefix': 'CFBundleCreateBundlesFromDirectory'
    'body': 'CFBundleCreateBundlesFromDirectory(${1:CFAllocatorRef allocator}, ${2:CFURLRef directoryURL}, ${3:CFStringRef bundleType})'
  'CFBundleGetAllBundles':
    'prefix': 'CFBundleGetAllBundles'
    'body': 'CFBundleGetAllBundles()'
  'CFBundleGetBundleWithIdentifier':
    'prefix': 'CFBundleGetBundleWithIdentifier'
    'body': 'CFBundleGetBundleWithIdentifier(${1:CFStringRef bundleID})'
  'CFBundleGetDataPointerForName':
    'prefix': 'CFBundleGetDataPointerForName'
    'body': 'CFBundleGetDataPointerForName(${1:CFBundleRef bundle}, ${2:CFStringRef symbolName})'
  'CFBundleGetDataPointersForNames':
    'prefix': 'CFBundleGetDataPointersForNames'
    'body': 'CFBundleGetDataPointersForNames(${1:CFBundleRef bundle}, ${2:CFArrayRef symbolNames}, ${3:void** stbl})'
  'CFBundleGetDevelopmentRegion':
    'prefix': 'CFBundleGetDevelopmentRegion'
    'body': 'CFBundleGetDevelopmentRegion(${1:CFBundleRef bundle})'
  'CFBundleGetFunctionPointerForName':
    'prefix': 'CFBundleGetFunctionPointerForName'
    'body': 'CFBundleGetFunctionPointerForName(${1:CFBundleRef bundle}, ${2:CFStringRef functionName})'
  'CFBundleGetFunctionPointersForNames':
    'prefix': 'CFBundleGetFunctionPointersForNames'
    'body': 'CFBundleGetFunctionPointersForNames(${1:CFBundleRef bundle}, ${2:CFArrayRef functionNames}, ${3:void** ftbl})'
  'CFBundleGetIdentifier':
    'prefix': 'CFBundleGetIdentifier'
    'body': 'CFBundleGetIdentifier(${1:CFBundleRef bundle})'
  'CFBundleGetInfoDictionary':
    'prefix': 'CFBundleGetInfoDictionary'
    'body': 'CFBundleGetInfoDictionary(${1:CFBundleRef bundle})'
  'CFBundleGetLocalInfoDictionary':
    'prefix': 'CFBundleGetLocalInfoDictionary'
    'body': 'CFBundleGetLocalInfoDictionary(${1:CFBundleRef bundle})'
  'CFBundleGetMainBundle':
    'prefix': 'CFBundleGetMainBundle'
    'body': 'CFBundleGetMainBundle()'
  'CFBundleGetPackageInfo':
    'prefix': 'CFBundleGetPackageInfo'
    'body': 'CFBundleGetPackageInfo(${1:CFBundleRef bundle}, ${2:UInt32* packageType}, ${3:UInt32* packageCreator})'
  'CFBundleGetPackageInfoInDirectory':
    'prefix': 'CFBundleGetPackageInfoInDirectory'
    'body': 'CFBundleGetPackageInfoInDirectory(${1:CFURLRef url}, ${2:UInt32* packageType}, ${3:UInt32* packageCreator})'
  'CFBundleGetPlugIn':
    'prefix': 'CFBundleGetPlugIn'
    'body': 'CFBundleGetPlugIn(${1:CFBundleRef bundle})'
  'CFBundleGetTypeID':
    'prefix': 'CFBundleGetTypeID'
    'body': 'CFBundleGetTypeID()'
  'CFBundleGetValueForInfoDictionaryKey':
    'prefix': 'CFBundleGetValueForInfoDictionaryKey'
    'body': 'CFBundleGetValueForInfoDictionaryKey(${1:CFBundleRef bundle}, ${2:CFStringRef key})'
  'CFBundleGetVersionNumber':
    'prefix': 'CFBundleGetVersionNumber'
    'body': 'CFBundleGetVersionNumber(${1:CFBundleRef bundle})'
  'CFBundleIsExecutableLoaded':
    'prefix': 'CFBundleIsExecutableLoaded'
    'body': 'CFBundleIsExecutableLoaded(${1:CFBundleRef bundle})'
  'CFBundleLoadExecutable':
    'prefix': 'CFBundleLoadExecutable'
    'body': 'CFBundleLoadExecutable(${1:CFBundleRef bundle})'
  'CFBundleLoadExecutableAndReturnError':
    'prefix': 'CFBundleLoadExecutableAndReturnError'
    'body': 'CFBundleLoadExecutableAndReturnError(${1:CFBundleRef bundle}, ${2:CFErrorRef* error})'
  'CFBundleOpenBundleResourceFiles':
    'prefix': 'CFBundleOpenBundleResourceFiles'
    'body': 'CFBundleOpenBundleResourceFiles(${1:CFBundleRef bundle}, ${2:CFBundleRefNum* refNum}, ${3:CFBundleRefNum* localizedRefNum})'
  'CFBundleOpenBundleResourceMap':
    'prefix': 'CFBundleOpenBundleResourceMap'
    'body': 'CFBundleOpenBundleResourceMap(${1:CFBundleRef bundle})'
  'CFBundlePreflightExecutable':
    'prefix': 'CFBundlePreflightExecutable'
    'body': 'CFBundlePreflightExecutable(${1:CFBundleRef bundle}, ${2:CFErrorRef* error})'
  'CFBundleUnloadExecutable':
    'prefix': 'CFBundleUnloadExecutable'
    'body': 'CFBundleUnloadExecutable(${1:CFBundleRef bundle})'
  'CFByteOrderGetCurrent':
    'prefix': 'CFByteOrderGetCurrent'
    'body': 'CFByteOrderGetCurrent()'
  'CFCalendarAddComponents':
    'prefix': 'CFCalendarAddComponents'
    'body': 'CFCalendarAddComponents(${1:CFCalendarRef calendar}, ${2:CFAbsoluteTime* at}, ${3:CFOptionFlags options}, ${4:char* componentDesc})'
  'CFCalendarComposeAbsoluteTime':
    'prefix': 'CFCalendarComposeAbsoluteTime'
    'body': 'CFCalendarComposeAbsoluteTime(${1:CFCalendarRef calendar}, ${2:CFAbsoluteTime* at}, ${3:char* componentDesc})'
  'CFCalendarCopyCurrent':
    'prefix': 'CFCalendarCopyCurrent'
    'body': 'CFCalendarCopyCurrent()'
  'CFCalendarCopyLocale':
    'prefix': 'CFCalendarCopyLocale'
    'body': 'CFCalendarCopyLocale(${1:CFCalendarRef calendar})'
  'CFCalendarCopyTimeZone':
    'prefix': 'CFCalendarCopyTimeZone'
    'body': 'CFCalendarCopyTimeZone(${1:CFCalendarRef calendar})'
  'CFCalendarCreateWithIdentifier':
    'prefix': 'CFCalendarCreateWithIdentifier'
    'body': 'CFCalendarCreateWithIdentifier(${1:CFAllocatorRef allocator}, ${2:CFStringRef identifier})'
  'CFCalendarDecomposeAbsoluteTime':
    'prefix': 'CFCalendarDecomposeAbsoluteTime'
    'body': 'CFCalendarDecomposeAbsoluteTime(${1:CFCalendarRef calendar}, ${2:CFAbsoluteTime at}, ${3:char* componentDesc})'
  'CFCalendarGetComponentDifference':
    'prefix': 'CFCalendarGetComponentDifference'
    'body': 'CFCalendarGetComponentDifference(${1:CFCalendarRef calendar}, ${2:CFAbsoluteTime startingAT}, ${3:CFAbsoluteTime resultAT}, ${4:CFOptionFlags options}, ${5:char* componentDesc})'
  'CFCalendarGetFirstWeekday':
    'prefix': 'CFCalendarGetFirstWeekday'
    'body': 'CFCalendarGetFirstWeekday(${1:CFCalendarRef calendar})'
  'CFCalendarGetIdentifier':
    'prefix': 'CFCalendarGetIdentifier'
    'body': 'CFCalendarGetIdentifier(${1:CFCalendarRef calendar})'
  'CFCalendarGetMaximumRangeOfUnit':
    'prefix': 'CFCalendarGetMaximumRangeOfUnit'
    'body': 'CFCalendarGetMaximumRangeOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit unit})'
  'CFCalendarGetMinimumDaysInFirstWeek':
    'prefix': 'CFCalendarGetMinimumDaysInFirstWeek'
    'body': 'CFCalendarGetMinimumDaysInFirstWeek(${1:CFCalendarRef calendar})'
  'CFCalendarGetMinimumRangeOfUnit':
    'prefix': 'CFCalendarGetMinimumRangeOfUnit'
    'body': 'CFCalendarGetMinimumRangeOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit unit})'
  'CFCalendarGetOrdinalityOfUnit':
    'prefix': 'CFCalendarGetOrdinalityOfUnit'
    'body': 'CFCalendarGetOrdinalityOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit smallerUnit}, ${3:CFCalendarUnit biggerUnit}, ${4:CFAbsoluteTime at})'
  'CFCalendarGetRangeOfUnit':
    'prefix': 'CFCalendarGetRangeOfUnit'
    'body': 'CFCalendarGetRangeOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit smallerUnit}, ${3:CFCalendarUnit biggerUnit}, ${4:CFAbsoluteTime at})'
  'CFCalendarGetTimeRangeOfUnit':
    'prefix': 'CFCalendarGetTimeRangeOfUnit'
    'body': 'CFCalendarGetTimeRangeOfUnit(${1:CFCalendarRef calendar}, ${2:CFCalendarUnit unit}, ${3:CFAbsoluteTime at}, ${4:CFAbsoluteTime* startp}, ${5:CFTimeInterval* tip})'
  'CFCalendarGetTypeID':
    'prefix': 'CFCalendarGetTypeID'
    'body': 'CFCalendarGetTypeID()'
  'CFCalendarSetFirstWeekday':
    'prefix': 'CFCalendarSetFirstWeekday'
    'body': 'CFCalendarSetFirstWeekday(${1:CFCalendarRef calendar}, ${2:CFIndex wkdy})'
  'CFCalendarSetLocale':
    'prefix': 'CFCalendarSetLocale'
    'body': 'CFCalendarSetLocale(${1:CFCalendarRef calendar}, ${2:CFLocaleRef locale})'
  'CFCalendarSetMinimumDaysInFirstWeek':
    'prefix': 'CFCalendarSetMinimumDaysInFirstWeek'
    'body': 'CFCalendarSetMinimumDaysInFirstWeek(${1:CFCalendarRef calendar}, ${2:CFIndex mwd})'
  'CFCalendarSetTimeZone':
    'prefix': 'CFCalendarSetTimeZone'
    'body': 'CFCalendarSetTimeZone(${1:CFCalendarRef calendar}, ${2:CFTimeZoneRef tz})'
  'CFCharacterSetAddCharactersInRange':
    'prefix': 'CFCharacterSetAddCharactersInRange'
    'body': 'CFCharacterSetAddCharactersInRange(${1:CFMutableCharacterSetRef theSet}, ${2:CFRange theRange})'
  'CFCharacterSetAddCharactersInString':
    'prefix': 'CFCharacterSetAddCharactersInString'
    'body': 'CFCharacterSetAddCharactersInString(${1:CFMutableCharacterSetRef theSet}, ${2:CFStringRef theString})'
  'CFCharacterSetCreateBitmapRepresentation':
    'prefix': 'CFCharacterSetCreateBitmapRepresentation'
    'body': 'CFCharacterSetCreateBitmapRepresentation(${1:CFAllocatorRef alloc}, ${2:CFCharacterSetRef theSet})'
  'CFCharacterSetCreateCopy':
    'prefix': 'CFCharacterSetCreateCopy'
    'body': 'CFCharacterSetCreateCopy(${1:CFAllocatorRef alloc}, ${2:CFCharacterSetRef theSet})'
  'CFCharacterSetCreateInvertedSet':
    'prefix': 'CFCharacterSetCreateInvertedSet'
    'body': 'CFCharacterSetCreateInvertedSet(${1:CFAllocatorRef alloc}, ${2:CFCharacterSetRef theSet})'
  'CFCharacterSetCreateMutable':
    'prefix': 'CFCharacterSetCreateMutable'
    'body': 'CFCharacterSetCreateMutable(${1:CFAllocatorRef alloc})'
  'CFCharacterSetCreateMutableCopy':
    'prefix': 'CFCharacterSetCreateMutableCopy'
    'body': 'CFCharacterSetCreateMutableCopy(${1:CFAllocatorRef alloc}, ${2:CFCharacterSetRef theSet})'
  'CFCharacterSetCreateWithBitmapRepresentation':
    'prefix': 'CFCharacterSetCreateWithBitmapRepresentation'
    'body': 'CFCharacterSetCreateWithBitmapRepresentation(${1:CFAllocatorRef alloc}, ${2:CFDataRef theData})'
  'CFCharacterSetCreateWithCharactersInRange':
    'prefix': 'CFCharacterSetCreateWithCharactersInRange'
    'body': 'CFCharacterSetCreateWithCharactersInRange(${1:CFAllocatorRef alloc}, ${2:CFRange theRange})'
  'CFCharacterSetCreateWithCharactersInString':
    'prefix': 'CFCharacterSetCreateWithCharactersInString'
    'body': 'CFCharacterSetCreateWithCharactersInString(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString})'
  'CFCharacterSetGetPredefined':
    'prefix': 'CFCharacterSetGetPredefined'
    'body': 'CFCharacterSetGetPredefined(${1:CFCharacterSetPredefinedSet theSetIdentifier})'
  'CFCharacterSetGetTypeID':
    'prefix': 'CFCharacterSetGetTypeID'
    'body': 'CFCharacterSetGetTypeID()'
  'CFCharacterSetHasMemberInPlane':
    'prefix': 'CFCharacterSetHasMemberInPlane'
    'body': 'CFCharacterSetHasMemberInPlane(${1:CFCharacterSetRef theSet}, ${2:CFIndex thePlane})'
  'CFCharacterSetIntersect':
    'prefix': 'CFCharacterSetIntersect'
    'body': 'CFCharacterSetIntersect(${1:CFMutableCharacterSetRef theSet}, ${2:CFCharacterSetRef theOtherSet})'
  'CFCharacterSetInvert':
    'prefix': 'CFCharacterSetInvert'
    'body': 'CFCharacterSetInvert(${1:CFMutableCharacterSetRef theSet})'
  'CFCharacterSetIsCharacterMember':
    'prefix': 'CFCharacterSetIsCharacterMember'
    'body': 'CFCharacterSetIsCharacterMember(${1:CFCharacterSetRef theSet}, ${2:UniChar theChar})'
  'CFCharacterSetIsLongCharacterMember':
    'prefix': 'CFCharacterSetIsLongCharacterMember'
    'body': 'CFCharacterSetIsLongCharacterMember(${1:CFCharacterSetRef theSet}, ${2:UTF32Char theChar})'
  'CFCharacterSetIsSupersetOfSet':
    'prefix': 'CFCharacterSetIsSupersetOfSet'
    'body': 'CFCharacterSetIsSupersetOfSet(${1:CFCharacterSetRef theSet}, ${2:CFCharacterSetRef theOtherset})'
  'CFCharacterSetRemoveCharactersInRange':
    'prefix': 'CFCharacterSetRemoveCharactersInRange'
    'body': 'CFCharacterSetRemoveCharactersInRange(${1:CFMutableCharacterSetRef theSet}, ${2:CFRange theRange})'
  'CFCharacterSetRemoveCharactersInString':
    'prefix': 'CFCharacterSetRemoveCharactersInString'
    'body': 'CFCharacterSetRemoveCharactersInString(${1:CFMutableCharacterSetRef theSet}, ${2:CFStringRef theString})'
  'CFCharacterSetUnion':
    'prefix': 'CFCharacterSetUnion'
    'body': 'CFCharacterSetUnion(${1:CFMutableCharacterSetRef theSet}, ${2:CFCharacterSetRef theOtherSet})'
  'CFConvertDoubleHostToSwapped':
    'prefix': 'CFConvertDoubleHostToSwapped'
    'body': 'CFConvertDoubleHostToSwapped(${1:double arg})'
  'CFConvertDoubleSwappedToHost':
    'prefix': 'CFConvertDoubleSwappedToHost'
    'body': 'CFConvertDoubleSwappedToHost(${1:CFSwappedFloat64 arg})'
  'CFConvertFloat32HostToSwapped':
    'prefix': 'CFConvertFloat32HostToSwapped'
    'body': 'CFConvertFloat32HostToSwapped(${1:Float32 arg})'
  'CFConvertFloat32SwappedToHost':
    'prefix': 'CFConvertFloat32SwappedToHost'
    'body': 'CFConvertFloat32SwappedToHost(${1:CFSwappedFloat32 arg})'
  'CFConvertFloat64HostToSwapped':
    'prefix': 'CFConvertFloat64HostToSwapped'
    'body': 'CFConvertFloat64HostToSwapped(${1:Float64 arg})'
  'CFConvertFloat64SwappedToHost':
    'prefix': 'CFConvertFloat64SwappedToHost'
    'body': 'CFConvertFloat64SwappedToHost(${1:CFSwappedFloat64 arg})'
  'CFConvertFloatHostToSwapped':
    'prefix': 'CFConvertFloatHostToSwapped'
    'body': 'CFConvertFloatHostToSwapped(${1:float arg})'
  'CFConvertFloatSwappedToHost':
    'prefix': 'CFConvertFloatSwappedToHost'
    'body': 'CFConvertFloatSwappedToHost(${1:CFSwappedFloat32 arg})'
  'CFCopyDescription':
    'prefix': 'CFCopyDescription'
    'body': 'CFCopyDescription(${1:CFTypeRef cf})'
  'CFCopyHomeDirectoryURL':
    'prefix': 'CFCopyHomeDirectoryURL'
    'body': 'CFCopyHomeDirectoryURL()'
  'CFCopyTypeIDDescription':
    'prefix': 'CFCopyTypeIDDescription'
    'body': 'CFCopyTypeIDDescription(${1:CFTypeID type_id})'
  'CFDataAppendBytes':
    'prefix': 'CFDataAppendBytes'
    'body': 'CFDataAppendBytes(${1:CFMutableDataRef theData}, ${2:UInt8* bytes}, ${3:CFIndex length})'
  'CFDataCreate':
    'prefix': 'CFDataCreate'
    'body': 'CFDataCreate(${1:CFAllocatorRef allocator}, ${2:UInt8* bytes}, ${3:CFIndex length})'
  'CFDataCreateCopy':
    'prefix': 'CFDataCreateCopy'
    'body': 'CFDataCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFDataRef theData})'
  'CFDataCreateMutable':
    'prefix': 'CFDataCreateMutable'
    'body': 'CFDataCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity})'
  'CFDataCreateMutableCopy':
    'prefix': 'CFDataCreateMutableCopy'
    'body': 'CFDataCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFDataRef theData})'
  'CFDataCreateWithBytesNoCopy':
    'prefix': 'CFDataCreateWithBytesNoCopy'
    'body': 'CFDataCreateWithBytesNoCopy(${1:CFAllocatorRef allocator}, ${2:UInt8* bytes}, ${3:CFIndex length}, ${4:CFAllocatorRef bytesDeallocator})'
  'CFDataDeleteBytes':
    'prefix': 'CFDataDeleteBytes'
    'body': 'CFDataDeleteBytes(${1:CFMutableDataRef theData}, ${2:CFRange range})'
  'CFDataFind':
    'prefix': 'CFDataFind'
    'body': 'CFDataFind(${1:CFDataRef theData}, ${2:CFDataRef dataToFind}, ${3:CFRange searchRange}, ${4:CFDataSearchFlags compareOptions})'
  'CFDataGetBytePtr':
    'prefix': 'CFDataGetBytePtr'
    'body': 'CFDataGetBytePtr(${1:CFDataRef theData})'
  'CFDataGetBytes':
    'prefix': 'CFDataGetBytes'
    'body': 'CFDataGetBytes(${1:CFDataRef theData}, ${2:CFRange range}, ${3:UInt8* buffer})'
  'CFDataGetLength':
    'prefix': 'CFDataGetLength'
    'body': 'CFDataGetLength(${1:CFDataRef theData})'
  'CFDataGetMutableBytePtr':
    'prefix': 'CFDataGetMutableBytePtr'
    'body': 'CFDataGetMutableBytePtr(${1:CFMutableDataRef theData})'
  'CFDataGetTypeID':
    'prefix': 'CFDataGetTypeID'
    'body': 'CFDataGetTypeID()'
  'CFDataIncreaseLength':
    'prefix': 'CFDataIncreaseLength'
    'body': 'CFDataIncreaseLength(${1:CFMutableDataRef theData}, ${2:CFIndex extraLength})'
  'CFDataReplaceBytes':
    'prefix': 'CFDataReplaceBytes'
    'body': 'CFDataReplaceBytes(${1:CFMutableDataRef theData}, ${2:CFRange range}, ${3:UInt8* newBytes}, ${4:CFIndex newLength})'
  'CFDataSetLength':
    'prefix': 'CFDataSetLength'
    'body': 'CFDataSetLength(${1:CFMutableDataRef theData}, ${2:CFIndex length})'
  'CFDateCompare':
    'prefix': 'CFDateCompare'
    'body': 'CFDateCompare(${1:CFDateRef theDate}, ${2:CFDateRef otherDate}, ${3:void* context})'
  'CFDateCreate':
    'prefix': 'CFDateCreate'
    'body': 'CFDateCreate(${1:CFAllocatorRef allocator}, ${2:CFAbsoluteTime at})'
  'CFDateFormatterCopyProperty':
    'prefix': 'CFDateFormatterCopyProperty'
    'body': 'CFDateFormatterCopyProperty(${1:CFDateFormatterRef formatter}, ${2:CFStringRef key})'
  'CFDateFormatterCreate':
    'prefix': 'CFDateFormatterCreate'
    'body': 'CFDateFormatterCreate(${1:CFAllocatorRef allocator}, ${2:CFLocaleRef locale}, ${3:CFDateFormatterStyle dateStyle}, ${4:CFDateFormatterStyle timeStyle})'
  'CFDateFormatterCreateDateFormatFromTemplate':
    'prefix': 'CFDateFormatterCreateDateFormatFromTemplate'
    'body': 'CFDateFormatterCreateDateFormatFromTemplate(${1:CFAllocatorRef allocator}, ${2:CFStringRef tmplate}, ${3:CFOptionFlags options}, ${4:CFLocaleRef locale})'
  'CFDateFormatterCreateDateFromString':
    'prefix': 'CFDateFormatterCreateDateFromString'
    'body': 'CFDateFormatterCreateDateFromString(${1:CFAllocatorRef allocator}, ${2:CFDateFormatterRef formatter}, ${3:CFStringRef string}, ${4:CFRange* rangep})'
  'CFDateFormatterCreateStringWithAbsoluteTime':
    'prefix': 'CFDateFormatterCreateStringWithAbsoluteTime'
    'body': 'CFDateFormatterCreateStringWithAbsoluteTime(${1:CFAllocatorRef allocator}, ${2:CFDateFormatterRef formatter}, ${3:CFAbsoluteTime at})'
  'CFDateFormatterCreateStringWithDate':
    'prefix': 'CFDateFormatterCreateStringWithDate'
    'body': 'CFDateFormatterCreateStringWithDate(${1:CFAllocatorRef allocator}, ${2:CFDateFormatterRef formatter}, ${3:CFDateRef date})'
  'CFDateFormatterGetAbsoluteTimeFromString':
    'prefix': 'CFDateFormatterGetAbsoluteTimeFromString'
    'body': 'CFDateFormatterGetAbsoluteTimeFromString(${1:CFDateFormatterRef formatter}, ${2:CFStringRef string}, ${3:CFRange* rangep}, ${4:CFAbsoluteTime* atp})'
  'CFDateFormatterGetDateStyle':
    'prefix': 'CFDateFormatterGetDateStyle'
    'body': 'CFDateFormatterGetDateStyle(${1:CFDateFormatterRef formatter})'
  'CFDateFormatterGetFormat':
    'prefix': 'CFDateFormatterGetFormat'
    'body': 'CFDateFormatterGetFormat(${1:CFDateFormatterRef formatter})'
  'CFDateFormatterGetLocale':
    'prefix': 'CFDateFormatterGetLocale'
    'body': 'CFDateFormatterGetLocale(${1:CFDateFormatterRef formatter})'
  'CFDateFormatterGetTimeStyle':
    'prefix': 'CFDateFormatterGetTimeStyle'
    'body': 'CFDateFormatterGetTimeStyle(${1:CFDateFormatterRef formatter})'
  'CFDateFormatterGetTypeID':
    'prefix': 'CFDateFormatterGetTypeID'
    'body': 'CFDateFormatterGetTypeID()'
  'CFDateFormatterSetFormat':
    'prefix': 'CFDateFormatterSetFormat'
    'body': 'CFDateFormatterSetFormat(${1:CFDateFormatterRef formatter}, ${2:CFStringRef formatString})'
  'CFDateFormatterSetProperty':
    'prefix': 'CFDateFormatterSetProperty'
    'body': 'CFDateFormatterSetProperty(${1:CFDateFormatterRef formatter}, ${2:CFStringRef key}, ${3:CFTypeRef value})'
  'CFDateGetAbsoluteTime':
    'prefix': 'CFDateGetAbsoluteTime'
    'body': 'CFDateGetAbsoluteTime(${1:CFDateRef theDate})'
  'CFDateGetTimeIntervalSinceDate':
    'prefix': 'CFDateGetTimeIntervalSinceDate'
    'body': 'CFDateGetTimeIntervalSinceDate(${1:CFDateRef theDate}, ${2:CFDateRef otherDate})'
  'CFDateGetTypeID':
    'prefix': 'CFDateGetTypeID'
    'body': 'CFDateGetTypeID()'
  'CFDictionaryAddValue':
    'prefix': 'CFDictionaryAddValue'
    'body': 'CFDictionaryAddValue(${1:CFMutableDictionaryRef theDict}, ${2:void* key}, ${3:void* value})'
  'CFDictionaryApplyFunction':
    'prefix': 'CFDictionaryApplyFunction'
    'body': 'CFDictionaryApplyFunction(${1:CFDictionaryRef theDict}, ${2:CFDictionaryApplierFunction applier}, ${3:void* context})'
  'CFDictionaryContainsKey':
    'prefix': 'CFDictionaryContainsKey'
    'body': 'CFDictionaryContainsKey(${1:CFDictionaryRef theDict}, ${2:void* key})'
  'CFDictionaryContainsValue':
    'prefix': 'CFDictionaryContainsValue'
    'body': 'CFDictionaryContainsValue(${1:CFDictionaryRef theDict}, ${2:void* value})'
  'CFDictionaryCreate':
    'prefix': 'CFDictionaryCreate'
    'body': 'CFDictionaryCreate(${1:CFAllocatorRef allocator}, ${2:void** keys}, ${3:void** values}, ${4:CFIndex numValues}, ${5:CFDictionaryKeyCallBacks* keyCallBacks}, ${6:CFDictionaryValueCallBacks* valueCallBacks})'
  'CFDictionaryCreateCopy':
    'prefix': 'CFDictionaryCreateCopy'
    'body': 'CFDictionaryCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFDictionaryRef theDict})'
  'CFDictionaryCreateMutable':
    'prefix': 'CFDictionaryCreateMutable'
    'body': 'CFDictionaryCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFDictionaryKeyCallBacks* keyCallBacks}, ${4:CFDictionaryValueCallBacks* valueCallBacks})'
  'CFDictionaryCreateMutableCopy':
    'prefix': 'CFDictionaryCreateMutableCopy'
    'body': 'CFDictionaryCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFDictionaryRef theDict})'
  'CFDictionaryGetCount':
    'prefix': 'CFDictionaryGetCount'
    'body': 'CFDictionaryGetCount(${1:CFDictionaryRef theDict})'
  'CFDictionaryGetCountOfKey':
    'prefix': 'CFDictionaryGetCountOfKey'
    'body': 'CFDictionaryGetCountOfKey(${1:CFDictionaryRef theDict}, ${2:void* key})'
  'CFDictionaryGetCountOfValue':
    'prefix': 'CFDictionaryGetCountOfValue'
    'body': 'CFDictionaryGetCountOfValue(${1:CFDictionaryRef theDict}, ${2:void* value})'
  'CFDictionaryGetKeysAndValues':
    'prefix': 'CFDictionaryGetKeysAndValues'
    'body': 'CFDictionaryGetKeysAndValues(${1:CFDictionaryRef theDict}, ${2:void** keys}, ${3:void** values})'
  'CFDictionaryGetTypeID':
    'prefix': 'CFDictionaryGetTypeID'
    'body': 'CFDictionaryGetTypeID()'
  'CFDictionaryGetValue':
    'prefix': 'CFDictionaryGetValue'
    'body': 'CFDictionaryGetValue(${1:CFDictionaryRef theDict}, ${2:void* key})'
  'CFDictionaryGetValueIfPresent':
    'prefix': 'CFDictionaryGetValueIfPresent'
    'body': 'CFDictionaryGetValueIfPresent(${1:CFDictionaryRef theDict}, ${2:void* key}, ${3:void** value})'
  'CFDictionaryRemoveAllValues':
    'prefix': 'CFDictionaryRemoveAllValues'
    'body': 'CFDictionaryRemoveAllValues(${1:CFMutableDictionaryRef theDict})'
  'CFDictionaryRemoveValue':
    'prefix': 'CFDictionaryRemoveValue'
    'body': 'CFDictionaryRemoveValue(${1:CFMutableDictionaryRef theDict}, ${2:void* key})'
  'CFDictionaryReplaceValue':
    'prefix': 'CFDictionaryReplaceValue'
    'body': 'CFDictionaryReplaceValue(${1:CFMutableDictionaryRef theDict}, ${2:void* key}, ${3:void* value})'
  'CFDictionarySetValue':
    'prefix': 'CFDictionarySetValue'
    'body': 'CFDictionarySetValue(${1:CFMutableDictionaryRef theDict}, ${2:void* key}, ${3:void* value})'
  'CFEqual':
    'prefix': 'CFEqual'
    'body': 'CFEqual(${1:CFTypeRef cf1}, ${2:CFTypeRef cf2})'
  'CFErrorCopyDescription':
    'prefix': 'CFErrorCopyDescription'
    'body': 'CFErrorCopyDescription(${1:CFErrorRef err})'
  'CFErrorCopyFailureReason':
    'prefix': 'CFErrorCopyFailureReason'
    'body': 'CFErrorCopyFailureReason(${1:CFErrorRef err})'
  'CFErrorCopyRecoverySuggestion':
    'prefix': 'CFErrorCopyRecoverySuggestion'
    'body': 'CFErrorCopyRecoverySuggestion(${1:CFErrorRef err})'
  'CFErrorCopyUserInfo':
    'prefix': 'CFErrorCopyUserInfo'
    'body': 'CFErrorCopyUserInfo(${1:CFErrorRef err})'
  'CFErrorCreate':
    'prefix': 'CFErrorCreate'
    'body': 'CFErrorCreate(${1:CFAllocatorRef allocator}, ${2:CFStringRef domain}, ${3:CFIndex code}, ${4:CFDictionaryRef userInfo})'
  'CFErrorCreateWithUserInfoKeysAndValues':
    'prefix': 'CFErrorCreateWithUserInfoKeysAndValues'
    'body': 'CFErrorCreateWithUserInfoKeysAndValues(${1:CFAllocatorRef allocator}, ${2:CFStringRef domain}, ${3:CFIndex code}, ${4:void ** userInfoKeys}, ${5:void ** userInfoValues}, ${6:CFIndex numUserInfoValues})'
  'CFErrorGetCode':
    'prefix': 'CFErrorGetCode'
    'body': 'CFErrorGetCode(${1:CFErrorRef err})'
  'CFErrorGetDomain':
    'prefix': 'CFErrorGetDomain'
    'body': 'CFErrorGetDomain(${1:CFErrorRef err})'
  'CFErrorGetTypeID':
    'prefix': 'CFErrorGetTypeID'
    'body': 'CFErrorGetTypeID()'
  'CFFileDescriptorCreate':
    'prefix': 'CFFileDescriptorCreate'
    'body': 'CFFileDescriptorCreate(${1:CFAllocatorRef allocator}, ${2:CFFileDescriptorNativeDescriptor fd}, ${3:Boolean closeOnInvalidate}, ${4:CFFileDescriptorCallBack callout}, ${5:CFFileDescriptorContext* context})'
  'CFFileDescriptorCreateRunLoopSource':
    'prefix': 'CFFileDescriptorCreateRunLoopSource'
    'body': 'CFFileDescriptorCreateRunLoopSource(${1:CFAllocatorRef allocator}, ${2:CFFileDescriptorRef f}, ${3:CFIndex order})'
  'CFFileDescriptorDisableCallBacks':
    'prefix': 'CFFileDescriptorDisableCallBacks'
    'body': 'CFFileDescriptorDisableCallBacks(${1:CFFileDescriptorRef f}, ${2:CFOptionFlags callBackTypes})'
  'CFFileDescriptorEnableCallBacks':
    'prefix': 'CFFileDescriptorEnableCallBacks'
    'body': 'CFFileDescriptorEnableCallBacks(${1:CFFileDescriptorRef f}, ${2:CFOptionFlags callBackTypes})'
  'CFFileDescriptorGetContext':
    'prefix': 'CFFileDescriptorGetContext'
    'body': 'CFFileDescriptorGetContext(${1:CFFileDescriptorRef f}, ${2:CFFileDescriptorContext* context})'
  'CFFileDescriptorGetNativeDescriptor':
    'prefix': 'CFFileDescriptorGetNativeDescriptor'
    'body': 'CFFileDescriptorGetNativeDescriptor(${1:CFFileDescriptorRef f})'
  'CFFileDescriptorGetTypeID':
    'prefix': 'CFFileDescriptorGetTypeID'
    'body': 'CFFileDescriptorGetTypeID()'
  'CFFileDescriptorInvalidate':
    'prefix': 'CFFileDescriptorInvalidate'
    'body': 'CFFileDescriptorInvalidate(${1:CFFileDescriptorRef f})'
  'CFFileDescriptorIsValid':
    'prefix': 'CFFileDescriptorIsValid'
    'body': 'CFFileDescriptorIsValid(${1:CFFileDescriptorRef f})'
  'CFFileSecurityClearProperties':
    'prefix': 'CFFileSecurityClearProperties'
    'body': 'CFFileSecurityClearProperties(${1:CFFileSecurityRef fileSec}, ${2:CFFileSecurityClearOptions clearPropertyMask})'
  'CFFileSecurityCopyAccessControlList':
    'prefix': 'CFFileSecurityCopyAccessControlList'
    'body': 'CFFileSecurityCopyAccessControlList(${1:CFFileSecurityRef fileSec}, ${2:acl_t* accessControlList})'
  'CFFileSecurityCopyGroupUUID':
    'prefix': 'CFFileSecurityCopyGroupUUID'
    'body': 'CFFileSecurityCopyGroupUUID(${1:CFFileSecurityRef fileSec}, ${2:CFUUIDRef* groupUUID})'
  'CFFileSecurityCopyOwnerUUID':
    'prefix': 'CFFileSecurityCopyOwnerUUID'
    'body': 'CFFileSecurityCopyOwnerUUID(${1:CFFileSecurityRef fileSec}, ${2:CFUUIDRef* ownerUUID})'
  'CFFileSecurityCreate':
    'prefix': 'CFFileSecurityCreate'
    'body': 'CFFileSecurityCreate(${1:CFAllocatorRef allocator})'
  'CFFileSecurityCreateCopy':
    'prefix': 'CFFileSecurityCreateCopy'
    'body': 'CFFileSecurityCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFFileSecurityRef fileSec})'
  'CFFileSecurityGetGroup':
    'prefix': 'CFFileSecurityGetGroup'
    'body': 'CFFileSecurityGetGroup(${1:CFFileSecurityRef fileSec}, ${2:gid_t* group})'
  'CFFileSecurityGetMode':
    'prefix': 'CFFileSecurityGetMode'
    'body': 'CFFileSecurityGetMode(${1:CFFileSecurityRef fileSec}, ${2:mode_t* mode})'
  'CFFileSecurityGetOwner':
    'prefix': 'CFFileSecurityGetOwner'
    'body': 'CFFileSecurityGetOwner(${1:CFFileSecurityRef fileSec}, ${2:uid_t* owner})'
  'CFFileSecurityGetTypeID':
    'prefix': 'CFFileSecurityGetTypeID'
    'body': 'CFFileSecurityGetTypeID()'
  'CFFileSecuritySetAccessControlList':
    'prefix': 'CFFileSecuritySetAccessControlList'
    'body': 'CFFileSecuritySetAccessControlList(${1:CFFileSecurityRef fileSec}, ${2:acl_t accessControlList})'
  'CFFileSecuritySetGroup':
    'prefix': 'CFFileSecuritySetGroup'
    'body': 'CFFileSecuritySetGroup(${1:CFFileSecurityRef fileSec}, ${2:gid_t group})'
  'CFFileSecuritySetGroupUUID':
    'prefix': 'CFFileSecuritySetGroupUUID'
    'body': 'CFFileSecuritySetGroupUUID(${1:CFFileSecurityRef fileSec}, ${2:CFUUIDRef groupUUID})'
  'CFFileSecuritySetMode':
    'prefix': 'CFFileSecuritySetMode'
    'body': 'CFFileSecuritySetMode(${1:CFFileSecurityRef fileSec}, ${2:mode_t mode})'
  'CFFileSecuritySetOwner':
    'prefix': 'CFFileSecuritySetOwner'
    'body': 'CFFileSecuritySetOwner(${1:CFFileSecurityRef fileSec}, ${2:uid_t owner})'
  'CFFileSecuritySetOwnerUUID':
    'prefix': 'CFFileSecuritySetOwnerUUID'
    'body': 'CFFileSecuritySetOwnerUUID(${1:CFFileSecurityRef fileSec}, ${2:CFUUIDRef ownerUUID})'
  'CFGetAllocator':
    'prefix': 'CFGetAllocator'
    'body': 'CFGetAllocator(${1:CFTypeRef cf})'
  'CFGetRetainCount':
    'prefix': 'CFGetRetainCount'
    'body': 'CFGetRetainCount(${1:CFTypeRef cf})'
  'CFGetTypeID':
    'prefix': 'CFGetTypeID'
    'body': 'CFGetTypeID(${1:CFTypeRef cf})'
  'CFGregorianDateGetAbsoluteTime':
    'prefix': 'CFGregorianDateGetAbsoluteTime'
    'body': 'CFGregorianDateGetAbsoluteTime(${1:CFGregorianDate gdate}, ${2:CFTimeZoneRef tz})'
  'CFGregorianDateIsValid':
    'prefix': 'CFGregorianDateIsValid'
    'body': 'CFGregorianDateIsValid(${1:CFGregorianDate gdate}, ${2:CFOptionFlags unitFlags})'
  'CFHash':
    'prefix': 'CFHash'
    'body': 'CFHash(${1:CFTypeRef cf})'
  'CFLocaleCopyAvailableLocaleIdentifiers':
    'prefix': 'CFLocaleCopyAvailableLocaleIdentifiers'
    'body': 'CFLocaleCopyAvailableLocaleIdentifiers()'
  'CFLocaleCopyCommonISOCurrencyCodes':
    'prefix': 'CFLocaleCopyCommonISOCurrencyCodes'
    'body': 'CFLocaleCopyCommonISOCurrencyCodes()'
  'CFLocaleCopyCurrent':
    'prefix': 'CFLocaleCopyCurrent'
    'body': 'CFLocaleCopyCurrent()'
  'CFLocaleCopyDisplayNameForPropertyValue':
    'prefix': 'CFLocaleCopyDisplayNameForPropertyValue'
    'body': 'CFLocaleCopyDisplayNameForPropertyValue(${1:CFLocaleRef displayLocale}, ${2:CFStringRef key}, ${3:CFStringRef value})'
  'CFLocaleCopyISOCountryCodes':
    'prefix': 'CFLocaleCopyISOCountryCodes'
    'body': 'CFLocaleCopyISOCountryCodes()'
  'CFLocaleCopyISOCurrencyCodes':
    'prefix': 'CFLocaleCopyISOCurrencyCodes'
    'body': 'CFLocaleCopyISOCurrencyCodes()'
  'CFLocaleCopyISOLanguageCodes':
    'prefix': 'CFLocaleCopyISOLanguageCodes'
    'body': 'CFLocaleCopyISOLanguageCodes()'
  'CFLocaleCopyPreferredLanguages':
    'prefix': 'CFLocaleCopyPreferredLanguages'
    'body': 'CFLocaleCopyPreferredLanguages()'
  'CFLocaleCreate':
    'prefix': 'CFLocaleCreate'
    'body': 'CFLocaleCreate(${1:CFAllocatorRef allocator}, ${2:CFStringRef localeIdentifier})'
  'CFLocaleCreateCanonicalLanguageIdentifierFromString':
    'prefix': 'CFLocaleCreateCanonicalLanguageIdentifierFromString'
    'body': 'CFLocaleCreateCanonicalLanguageIdentifierFromString(${1:CFAllocatorRef allocator}, ${2:CFStringRef localeIdentifier})'
  'CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes':
    'prefix': 'CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes'
    'body': 'CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(${1:CFAllocatorRef allocator}, ${2:LangCode lcode}, ${3:RegionCode rcode})'
  'CFLocaleCreateCanonicalLocaleIdentifierFromString':
    'prefix': 'CFLocaleCreateCanonicalLocaleIdentifierFromString'
    'body': 'CFLocaleCreateCanonicalLocaleIdentifierFromString(${1:CFAllocatorRef allocator}, ${2:CFStringRef localeIdentifier})'
  'CFLocaleCreateComponentsFromLocaleIdentifier':
    'prefix': 'CFLocaleCreateComponentsFromLocaleIdentifier'
    'body': 'CFLocaleCreateComponentsFromLocaleIdentifier(${1:CFAllocatorRef allocator}, ${2:CFStringRef localeID})'
  'CFLocaleCreateCopy':
    'prefix': 'CFLocaleCreateCopy'
    'body': 'CFLocaleCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFLocaleRef locale})'
  'CFLocaleCreateLocaleIdentifierFromComponents':
    'prefix': 'CFLocaleCreateLocaleIdentifierFromComponents'
    'body': 'CFLocaleCreateLocaleIdentifierFromComponents(${1:CFAllocatorRef allocator}, ${2:CFDictionaryRef dictionary})'
  'CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode':
    'prefix': 'CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode'
    'body': 'CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(${1:CFAllocatorRef allocator}, ${2:uint32_t lcid})'
  'CFLocaleGetIdentifier':
    'prefix': 'CFLocaleGetIdentifier'
    'body': 'CFLocaleGetIdentifier(${1:CFLocaleRef locale})'
  'CFLocaleGetLanguageCharacterDirection':
    'prefix': 'CFLocaleGetLanguageCharacterDirection'
    'body': 'CFLocaleGetLanguageCharacterDirection(${1:CFStringRef isoLangCode})'
  'CFLocaleGetLanguageLineDirection':
    'prefix': 'CFLocaleGetLanguageLineDirection'
    'body': 'CFLocaleGetLanguageLineDirection(${1:CFStringRef isoLangCode})'
  'CFLocaleGetSystem':
    'prefix': 'CFLocaleGetSystem'
    'body': 'CFLocaleGetSystem()'
  'CFLocaleGetTypeID':
    'prefix': 'CFLocaleGetTypeID'
    'body': 'CFLocaleGetTypeID()'
  'CFLocaleGetValue':
    'prefix': 'CFLocaleGetValue'
    'body': 'CFLocaleGetValue(${1:CFLocaleRef locale}, ${2:CFStringRef key})'
  'CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier':
    'prefix': 'CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier'
    'body': 'CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(${1:CFStringRef localeIdentifier})'
  'CFMachPortCreate':
    'prefix': 'CFMachPortCreate'
    'body': 'CFMachPortCreate(${1:CFAllocatorRef allocator}, ${2:CFMachPortCallBack callout}, ${3:CFMachPortContext* context}, ${4:Boolean* shouldFreeInfo})'
  'CFMachPortCreateRunLoopSource':
    'prefix': 'CFMachPortCreateRunLoopSource'
    'body': 'CFMachPortCreateRunLoopSource(${1:CFAllocatorRef allocator}, ${2:CFMachPortRef port}, ${3:CFIndex order})'
  'CFMachPortCreateWithPort':
    'prefix': 'CFMachPortCreateWithPort'
    'body': 'CFMachPortCreateWithPort(${1:CFAllocatorRef allocator}, ${2:mach_port_t portNum}, ${3:CFMachPortCallBack callout}, ${4:CFMachPortContext* context}, ${5:Boolean* shouldFreeInfo})'
  'CFMachPortGetContext':
    'prefix': 'CFMachPortGetContext'
    'body': 'CFMachPortGetContext(${1:CFMachPortRef port}, ${2:CFMachPortContext* context})'
  'CFMachPortGetInvalidationCallBack':
    'prefix': 'CFMachPortGetInvalidationCallBack'
    'body': 'CFMachPortGetInvalidationCallBack(${1:CFMachPortRef port})'
  'CFMachPortGetPort':
    'prefix': 'CFMachPortGetPort'
    'body': 'CFMachPortGetPort(${1:CFMachPortRef port})'
  'CFMachPortGetTypeID':
    'prefix': 'CFMachPortGetTypeID'
    'body': 'CFMachPortGetTypeID()'
  'CFMachPortInvalidate':
    'prefix': 'CFMachPortInvalidate'
    'body': 'CFMachPortInvalidate(${1:CFMachPortRef port})'
  'CFMachPortIsValid':
    'prefix': 'CFMachPortIsValid'
    'body': 'CFMachPortIsValid(${1:CFMachPortRef port})'
  'CFMachPortSetInvalidationCallBack':
    'prefix': 'CFMachPortSetInvalidationCallBack'
    'body': 'CFMachPortSetInvalidationCallBack(${1:CFMachPortRef port}, ${2:CFMachPortInvalidationCallBack callout})'
  'CFMakeCollectable':
    'prefix': 'CFMakeCollectable'
    'body': 'CFMakeCollectable(${1:CFTypeRef cf})'
  'CFMessagePortCreateLocal':
    'prefix': 'CFMessagePortCreateLocal'
    'body': 'CFMessagePortCreateLocal(${1:CFAllocatorRef allocator}, ${2:CFStringRef name}, ${3:CFMessagePortCallBack callout}, ${4:CFMessagePortContext* context}, ${5:Boolean* shouldFreeInfo})'
  'CFMessagePortCreateRemote':
    'prefix': 'CFMessagePortCreateRemote'
    'body': 'CFMessagePortCreateRemote(${1:CFAllocatorRef allocator}, ${2:CFStringRef name})'
  'CFMessagePortCreateRunLoopSource':
    'prefix': 'CFMessagePortCreateRunLoopSource'
    'body': 'CFMessagePortCreateRunLoopSource(${1:CFAllocatorRef allocator}, ${2:CFMessagePortRef local}, ${3:CFIndex order})'
  'CFMessagePortGetContext':
    'prefix': 'CFMessagePortGetContext'
    'body': 'CFMessagePortGetContext(${1:CFMessagePortRef ms}, ${2:CFMessagePortContext* context})'
  'CFMessagePortGetInvalidationCallBack':
    'prefix': 'CFMessagePortGetInvalidationCallBack'
    'body': 'CFMessagePortGetInvalidationCallBack(${1:CFMessagePortRef ms})'
  'CFMessagePortGetName':
    'prefix': 'CFMessagePortGetName'
    'body': 'CFMessagePortGetName(${1:CFMessagePortRef ms})'
  'CFMessagePortGetTypeID':
    'prefix': 'CFMessagePortGetTypeID'
    'body': 'CFMessagePortGetTypeID()'
  'CFMessagePortInvalidate':
    'prefix': 'CFMessagePortInvalidate'
    'body': 'CFMessagePortInvalidate(${1:CFMessagePortRef ms})'
  'CFMessagePortIsRemote':
    'prefix': 'CFMessagePortIsRemote'
    'body': 'CFMessagePortIsRemote(${1:CFMessagePortRef ms})'
  'CFMessagePortIsValid':
    'prefix': 'CFMessagePortIsValid'
    'body': 'CFMessagePortIsValid(${1:CFMessagePortRef ms})'
  'CFMessagePortSendRequest':
    'prefix': 'CFMessagePortSendRequest'
    'body': 'CFMessagePortSendRequest(${1:CFMessagePortRef remote}, ${2:SInt32 msgid}, ${3:CFDataRef data}, ${4:CFTimeInterval sendTimeout}, ${5:CFTimeInterval rcvTimeout}, ${6:CFStringRef replyMode}, ${7:CFDataRef* returnData})'
  'CFMessagePortSetDispatchQueue':
    'prefix': 'CFMessagePortSetDispatchQueue'
    'body': 'CFMessagePortSetDispatchQueue(${1:CFMessagePortRef ms}, ${2:dispatch_queue_t queue})'
  'CFMessagePortSetInvalidationCallBack':
    'prefix': 'CFMessagePortSetInvalidationCallBack'
    'body': 'CFMessagePortSetInvalidationCallBack(${1:CFMessagePortRef ms}, ${2:CFMessagePortInvalidationCallBack callout})'
  'CFMessagePortSetName':
    'prefix': 'CFMessagePortSetName'
    'body': 'CFMessagePortSetName(${1:CFMessagePortRef ms}, ${2:CFStringRef newName})'
  'CFNotificationCenterAddObserver':
    'prefix': 'CFNotificationCenterAddObserver'
    'body': 'CFNotificationCenterAddObserver(${1:CFNotificationCenterRef center}, ${2:void* observer}, ${3:CFNotificationCallback callBack}, ${4:CFStringRef name}, ${5:void* object}, ${6:CFNotificationSuspensionBehavior suspensionBehavior})'
  'CFNotificationCenterGetDarwinNotifyCenter':
    'prefix': 'CFNotificationCenterGetDarwinNotifyCenter'
    'body': 'CFNotificationCenterGetDarwinNotifyCenter()'
  'CFNotificationCenterGetLocalCenter':
    'prefix': 'CFNotificationCenterGetLocalCenter'
    'body': 'CFNotificationCenterGetLocalCenter()'
  'CFNotificationCenterGetTypeID':
    'prefix': 'CFNotificationCenterGetTypeID'
    'body': 'CFNotificationCenterGetTypeID()'
  'CFNotificationCenterPostNotification':
    'prefix': 'CFNotificationCenterPostNotification'
    'body': 'CFNotificationCenterPostNotification(${1:CFNotificationCenterRef center}, ${2:CFStringRef name}, ${3:void* object}, ${4:CFDictionaryRef userInfo}, ${5:Boolean deliverImmediately})'
  'CFNotificationCenterPostNotificationWithOptions':
    'prefix': 'CFNotificationCenterPostNotificationWithOptions'
    'body': 'CFNotificationCenterPostNotificationWithOptions(${1:CFNotificationCenterRef center}, ${2:CFStringRef name}, ${3:void* object}, ${4:CFDictionaryRef userInfo}, ${5:CFOptionFlags options})'
  'CFNotificationCenterRemoveEveryObserver':
    'prefix': 'CFNotificationCenterRemoveEveryObserver'
    'body': 'CFNotificationCenterRemoveEveryObserver(${1:CFNotificationCenterRef center}, ${2:void* observer})'
  'CFNotificationCenterRemoveObserver':
    'prefix': 'CFNotificationCenterRemoveObserver'
    'body': 'CFNotificationCenterRemoveObserver(${1:CFNotificationCenterRef center}, ${2:void* observer}, ${3:CFStringRef name}, ${4:void* object})'
  'CFNullGetTypeID':
    'prefix': 'CFNullGetTypeID'
    'body': 'CFNullGetTypeID()'
  'CFNumberCompare':
    'prefix': 'CFNumberCompare'
    'body': 'CFNumberCompare(${1:CFNumberRef number}, ${2:CFNumberRef otherNumber}, ${3:void* context})'
  'CFNumberCreate':
    'prefix': 'CFNumberCreate'
    'body': 'CFNumberCreate(${1:CFAllocatorRef allocator}, ${2:CFNumberType theType}, ${3:void* valuePtr})'
  'CFNumberFormatterCopyProperty':
    'prefix': 'CFNumberFormatterCopyProperty'
    'body': 'CFNumberFormatterCopyProperty(${1:CFNumberFormatterRef formatter}, ${2:CFStringRef key})'
  'CFNumberFormatterCreate':
    'prefix': 'CFNumberFormatterCreate'
    'body': 'CFNumberFormatterCreate(${1:CFAllocatorRef allocator}, ${2:CFLocaleRef locale}, ${3:CFNumberFormatterStyle style})'
  'CFNumberFormatterCreateNumberFromString':
    'prefix': 'CFNumberFormatterCreateNumberFromString'
    'body': 'CFNumberFormatterCreateNumberFromString(${1:CFAllocatorRef allocator}, ${2:CFNumberFormatterRef formatter}, ${3:CFStringRef string}, ${4:CFRange* rangep}, ${5:CFOptionFlags options})'
  'CFNumberFormatterCreateStringWithNumber':
    'prefix': 'CFNumberFormatterCreateStringWithNumber'
    'body': 'CFNumberFormatterCreateStringWithNumber(${1:CFAllocatorRef allocator}, ${2:CFNumberFormatterRef formatter}, ${3:CFNumberRef number})'
  'CFNumberFormatterCreateStringWithValue':
    'prefix': 'CFNumberFormatterCreateStringWithValue'
    'body': 'CFNumberFormatterCreateStringWithValue(${1:CFAllocatorRef allocator}, ${2:CFNumberFormatterRef formatter}, ${3:CFNumberType numberType}, ${4:void* valuePtr})'
  'CFNumberFormatterGetDecimalInfoForCurrencyCode':
    'prefix': 'CFNumberFormatterGetDecimalInfoForCurrencyCode'
    'body': 'CFNumberFormatterGetDecimalInfoForCurrencyCode(${1:CFStringRef currencyCode}, ${2:int32_t* defaultFractionDigits}, ${3:double* roundingIncrement})'
  'CFNumberFormatterGetFormat':
    'prefix': 'CFNumberFormatterGetFormat'
    'body': 'CFNumberFormatterGetFormat(${1:CFNumberFormatterRef formatter})'
  'CFNumberFormatterGetLocale':
    'prefix': 'CFNumberFormatterGetLocale'
    'body': 'CFNumberFormatterGetLocale(${1:CFNumberFormatterRef formatter})'
  'CFNumberFormatterGetStyle':
    'prefix': 'CFNumberFormatterGetStyle'
    'body': 'CFNumberFormatterGetStyle(${1:CFNumberFormatterRef formatter})'
  'CFNumberFormatterGetTypeID':
    'prefix': 'CFNumberFormatterGetTypeID'
    'body': 'CFNumberFormatterGetTypeID()'
  'CFNumberFormatterGetValueFromString':
    'prefix': 'CFNumberFormatterGetValueFromString'
    'body': 'CFNumberFormatterGetValueFromString(${1:CFNumberFormatterRef formatter}, ${2:CFStringRef string}, ${3:CFRange* rangep}, ${4:CFNumberType numberType}, ${5:void* valuePtr})'
  'CFNumberFormatterSetFormat':
    'prefix': 'CFNumberFormatterSetFormat'
    'body': 'CFNumberFormatterSetFormat(${1:CFNumberFormatterRef formatter}, ${2:CFStringRef formatString})'
  'CFNumberFormatterSetProperty':
    'prefix': 'CFNumberFormatterSetProperty'
    'body': 'CFNumberFormatterSetProperty(${1:CFNumberFormatterRef formatter}, ${2:CFStringRef key}, ${3:CFTypeRef value})'
  'CFNumberGetByteSize':
    'prefix': 'CFNumberGetByteSize'
    'body': 'CFNumberGetByteSize(${1:CFNumberRef number})'
  'CFNumberGetType':
    'prefix': 'CFNumberGetType'
    'body': 'CFNumberGetType(${1:CFNumberRef number})'
  'CFNumberGetTypeID':
    'prefix': 'CFNumberGetTypeID'
    'body': 'CFNumberGetTypeID()'
  'CFNumberGetValue':
    'prefix': 'CFNumberGetValue'
    'body': 'CFNumberGetValue(${1:CFNumberRef number}, ${2:CFNumberType theType}, ${3:void* valuePtr})'
  'CFNumberIsFloatType':
    'prefix': 'CFNumberIsFloatType'
    'body': 'CFNumberIsFloatType(${1:CFNumberRef number})'
  'CFPlugInAddInstanceForFactory':
    'prefix': 'CFPlugInAddInstanceForFactory'
    'body': 'CFPlugInAddInstanceForFactory(${1:CFUUIDRef factoryID})'
  'CFPlugInCreate':
    'prefix': 'CFPlugInCreate'
    'body': 'CFPlugInCreate(${1:CFAllocatorRef allocator}, ${2:CFURLRef plugInURL})'
  'CFPlugInFindFactoriesForPlugInType':
    'prefix': 'CFPlugInFindFactoriesForPlugInType'
    'body': 'CFPlugInFindFactoriesForPlugInType(${1:CFUUIDRef typeUUID})'
  'CFPlugInFindFactoriesForPlugInTypeInPlugIn':
    'prefix': 'CFPlugInFindFactoriesForPlugInTypeInPlugIn'
    'body': 'CFPlugInFindFactoriesForPlugInTypeInPlugIn(${1:CFUUIDRef typeUUID}, ${2:CFPlugInRef plugIn})'
  'CFPlugInGetBundle':
    'prefix': 'CFPlugInGetBundle'
    'body': 'CFPlugInGetBundle(${1:CFPlugInRef plugIn})'
  'CFPlugInGetTypeID':
    'prefix': 'CFPlugInGetTypeID'
    'body': 'CFPlugInGetTypeID()'
  'CFPlugInInstanceCreate':
    'prefix': 'CFPlugInInstanceCreate'
    'body': 'CFPlugInInstanceCreate(${1:CFAllocatorRef allocator}, ${2:CFUUIDRef factoryUUID}, ${3:CFUUIDRef typeUUID})'
  'CFPlugInInstanceCreateWithInstanceDataSize':
    'prefix': 'CFPlugInInstanceCreateWithInstanceDataSize'
    'body': 'CFPlugInInstanceCreateWithInstanceDataSize(${1:CFAllocatorRef allocator}, ${2:CFIndex instanceDataSize}, ${3:CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction}, ${4:CFStringRef factoryName}, ${5:CFPlugInInstanceGetInterfaceFunction getInterfaceFunction})'
  'CFPlugInInstanceGetFactoryName':
    'prefix': 'CFPlugInInstanceGetFactoryName'
    'body': 'CFPlugInInstanceGetFactoryName(${1:CFPlugInInstanceRef instance})'
  'CFPlugInInstanceGetInstanceData':
    'prefix': 'CFPlugInInstanceGetInstanceData'
    'body': 'CFPlugInInstanceGetInstanceData(${1:CFPlugInInstanceRef instance})'
  'CFPlugInInstanceGetInterfaceFunctionTable':
    'prefix': 'CFPlugInInstanceGetInterfaceFunctionTable'
    'body': 'CFPlugInInstanceGetInterfaceFunctionTable(${1:CFPlugInInstanceRef instance}, ${2:CFStringRef interfaceName}, ${3:void** ftbl})'
  'CFPlugInInstanceGetTypeID':
    'prefix': 'CFPlugInInstanceGetTypeID'
    'body': 'CFPlugInInstanceGetTypeID()'
  'CFPlugInIsLoadOnDemand':
    'prefix': 'CFPlugInIsLoadOnDemand'
    'body': 'CFPlugInIsLoadOnDemand(${1:CFPlugInRef plugIn})'
  'CFPlugInRegisterFactoryFunction':
    'prefix': 'CFPlugInRegisterFactoryFunction'
    'body': 'CFPlugInRegisterFactoryFunction(${1:CFUUIDRef factoryUUID}, ${2:CFPlugInFactoryFunction func})'
  'CFPlugInRegisterFactoryFunctionByName':
    'prefix': 'CFPlugInRegisterFactoryFunctionByName'
    'body': 'CFPlugInRegisterFactoryFunctionByName(${1:CFUUIDRef factoryUUID}, ${2:CFPlugInRef plugIn}, ${3:CFStringRef functionName})'
  'CFPlugInRegisterPlugInType':
    'prefix': 'CFPlugInRegisterPlugInType'
    'body': 'CFPlugInRegisterPlugInType(${1:CFUUIDRef factoryUUID}, ${2:CFUUIDRef typeUUID})'
  'CFPlugInRemoveInstanceForFactory':
    'prefix': 'CFPlugInRemoveInstanceForFactory'
    'body': 'CFPlugInRemoveInstanceForFactory(${1:CFUUIDRef factoryID})'
  'CFPlugInSetLoadOnDemand':
    'prefix': 'CFPlugInSetLoadOnDemand'
    'body': 'CFPlugInSetLoadOnDemand(${1:CFPlugInRef plugIn}, ${2:Boolean flag})'
  'CFPlugInUnregisterFactory':
    'prefix': 'CFPlugInUnregisterFactory'
    'body': 'CFPlugInUnregisterFactory(${1:CFUUIDRef factoryUUID})'
  'CFPlugInUnregisterPlugInType':
    'prefix': 'CFPlugInUnregisterPlugInType'
    'body': 'CFPlugInUnregisterPlugInType(${1:CFUUIDRef factoryUUID}, ${2:CFUUIDRef typeUUID})'
  'CFPreferencesAddSuitePreferencesToApp':
    'prefix': 'CFPreferencesAddSuitePreferencesToApp'
    'body': 'CFPreferencesAddSuitePreferencesToApp(${1:CFStringRef applicationID}, ${2:CFStringRef suiteID})'
  'CFPreferencesAppSynchronize':
    'prefix': 'CFPreferencesAppSynchronize'
    'body': 'CFPreferencesAppSynchronize(${1:CFStringRef applicationID})'
  'CFPreferencesAppValueIsForced':
    'prefix': 'CFPreferencesAppValueIsForced'
    'body': 'CFPreferencesAppValueIsForced(${1:CFStringRef key}, ${2:CFStringRef applicationID})'
  'CFPreferencesCopyAppValue':
    'prefix': 'CFPreferencesCopyAppValue'
    'body': 'CFPreferencesCopyAppValue(${1:CFStringRef key}, ${2:CFStringRef applicationID})'
  'CFPreferencesCopyApplicationList':
    'prefix': 'CFPreferencesCopyApplicationList'
    'body': 'CFPreferencesCopyApplicationList(${1:CFStringRef userName}, ${2:CFStringRef hostName})'
  'CFPreferencesCopyKeyList':
    'prefix': 'CFPreferencesCopyKeyList'
    'body': 'CFPreferencesCopyKeyList(${1:CFStringRef applicationID}, ${2:CFStringRef userName}, ${3:CFStringRef hostName})'
  'CFPreferencesCopyMultiple':
    'prefix': 'CFPreferencesCopyMultiple'
    'body': 'CFPreferencesCopyMultiple(${1:CFArrayRef keysToFetch}, ${2:CFStringRef applicationID}, ${3:CFStringRef userName}, ${4:CFStringRef hostName})'
  'CFPreferencesCopyValue':
    'prefix': 'CFPreferencesCopyValue'
    'body': 'CFPreferencesCopyValue(${1:CFStringRef key}, ${2:CFStringRef applicationID}, ${3:CFStringRef userName}, ${4:CFStringRef hostName})'
  'CFPreferencesGetAppBooleanValue':
    'prefix': 'CFPreferencesGetAppBooleanValue'
    'body': 'CFPreferencesGetAppBooleanValue(${1:CFStringRef key}, ${2:CFStringRef applicationID}, ${3:Boolean* keyExistsAndHasValidFormat})'
  'CFPreferencesGetAppIntegerValue':
    'prefix': 'CFPreferencesGetAppIntegerValue'
    'body': 'CFPreferencesGetAppIntegerValue(${1:CFStringRef key}, ${2:CFStringRef applicationID}, ${3:Boolean* keyExistsAndHasValidFormat})'
  'CFPreferencesRemoveSuitePreferencesFromApp':
    'prefix': 'CFPreferencesRemoveSuitePreferencesFromApp'
    'body': 'CFPreferencesRemoveSuitePreferencesFromApp(${1:CFStringRef applicationID}, ${2:CFStringRef suiteID})'
  'CFPreferencesSetAppValue':
    'prefix': 'CFPreferencesSetAppValue'
    'body': 'CFPreferencesSetAppValue(${1:CFStringRef key}, ${2:CFPropertyListRef value}, ${3:CFStringRef applicationID})'
  'CFPreferencesSetMultiple':
    'prefix': 'CFPreferencesSetMultiple'
    'body': 'CFPreferencesSetMultiple(${1:CFDictionaryRef keysToSet}, ${2:CFArrayRef keysToRemove}, ${3:CFStringRef applicationID}, ${4:CFStringRef userName}, ${5:CFStringRef hostName})'
  'CFPreferencesSetValue':
    'prefix': 'CFPreferencesSetValue'
    'body': 'CFPreferencesSetValue(${1:CFStringRef key}, ${2:CFPropertyListRef value}, ${3:CFStringRef applicationID}, ${4:CFStringRef userName}, ${5:CFStringRef hostName})'
  'CFPreferencesSynchronize':
    'prefix': 'CFPreferencesSynchronize'
    'body': 'CFPreferencesSynchronize(${1:CFStringRef applicationID}, ${2:CFStringRef userName}, ${3:CFStringRef hostName})'
  'CFPropertyListCreateData':
    'prefix': 'CFPropertyListCreateData'
    'body': 'CFPropertyListCreateData(${1:CFAllocatorRef allocator}, ${2:CFPropertyListRef propertyList}, ${3:CFPropertyListFormat format}, ${4:CFOptionFlags options}, ${5:CFErrorRef* error})'
  'CFPropertyListCreateDeepCopy':
    'prefix': 'CFPropertyListCreateDeepCopy'
    'body': 'CFPropertyListCreateDeepCopy(${1:CFAllocatorRef allocator}, ${2:CFPropertyListRef propertyList}, ${3:CFOptionFlags mutabilityOption})'
  'CFPropertyListCreateFromStream':
    'prefix': 'CFPropertyListCreateFromStream'
    'body': 'CFPropertyListCreateFromStream(${1:CFAllocatorRef allocator}, ${2:CFReadStreamRef stream}, ${3:CFIndex streamLength}, ${4:CFOptionFlags mutabilityOption}, ${5:CFPropertyListFormat* format}, ${6:CFStringRef* errorString})'
  'CFPropertyListCreateFromXMLData':
    'prefix': 'CFPropertyListCreateFromXMLData'
    'body': 'CFPropertyListCreateFromXMLData(${1:CFAllocatorRef allocator}, ${2:CFDataRef xmlData}, ${3:CFOptionFlags mutabilityOption}, ${4:CFStringRef* errorString})'
  'CFPropertyListCreateWithData':
    'prefix': 'CFPropertyListCreateWithData'
    'body': 'CFPropertyListCreateWithData(${1:CFAllocatorRef allocator}, ${2:CFDataRef data}, ${3:CFOptionFlags options}, ${4:CFPropertyListFormat* format}, ${5:CFErrorRef* error})'
  'CFPropertyListCreateWithStream':
    'prefix': 'CFPropertyListCreateWithStream'
    'body': 'CFPropertyListCreateWithStream(${1:CFAllocatorRef allocator}, ${2:CFReadStreamRef stream}, ${3:CFIndex streamLength}, ${4:CFOptionFlags options}, ${5:CFPropertyListFormat* format}, ${6:CFErrorRef* error})'
  'CFPropertyListCreateXMLData':
    'prefix': 'CFPropertyListCreateXMLData'
    'body': 'CFPropertyListCreateXMLData(${1:CFAllocatorRef allocator}, ${2:CFPropertyListRef propertyList})'
  'CFPropertyListIsValid':
    'prefix': 'CFPropertyListIsValid'
    'body': 'CFPropertyListIsValid(${1:CFPropertyListRef plist}, ${2:CFPropertyListFormat format})'
  'CFPropertyListWrite':
    'prefix': 'CFPropertyListWrite'
    'body': 'CFPropertyListWrite(${1:CFPropertyListRef propertyList}, ${2:CFWriteStreamRef stream}, ${3:CFPropertyListFormat format}, ${4:CFOptionFlags options}, ${5:CFErrorRef* error})'
  'CFPropertyListWriteToStream':
    'prefix': 'CFPropertyListWriteToStream'
    'body': 'CFPropertyListWriteToStream(${1:CFPropertyListRef propertyList}, ${2:CFWriteStreamRef stream}, ${3:CFPropertyListFormat format}, ${4:CFStringRef* errorString})'
  'CFRangeMake':
    'prefix': 'CFRangeMake'
    'body': 'CFRangeMake(${1:CFIndex loc}, ${2:CFIndex len})'
  'CFReadStreamClose':
    'prefix': 'CFReadStreamClose'
    'body': 'CFReadStreamClose(${1:CFReadStreamRef stream})'
  'CFReadStreamCopyDispatchQueue':
    'prefix': 'CFReadStreamCopyDispatchQueue'
    'body': 'CFReadStreamCopyDispatchQueue(${1:CFReadStreamRef stream})'
  'CFReadStreamCopyError':
    'prefix': 'CFReadStreamCopyError'
    'body': 'CFReadStreamCopyError(${1:CFReadStreamRef stream})'
  'CFReadStreamCopyProperty':
    'prefix': 'CFReadStreamCopyProperty'
    'body': 'CFReadStreamCopyProperty(${1:CFReadStreamRef stream}, ${2:CFStringRef propertyName})'
  'CFReadStreamCreateWithBytesNoCopy':
    'prefix': 'CFReadStreamCreateWithBytesNoCopy'
    'body': 'CFReadStreamCreateWithBytesNoCopy(${1:CFAllocatorRef alloc}, ${2:UInt8* bytes}, ${3:CFIndex length}, ${4:CFAllocatorRef bytesDeallocator})'
  'CFReadStreamCreateWithFile':
    'prefix': 'CFReadStreamCreateWithFile'
    'body': 'CFReadStreamCreateWithFile(${1:CFAllocatorRef alloc}, ${2:CFURLRef fileURL})'
  'CFReadStreamGetBuffer':
    'prefix': 'CFReadStreamGetBuffer'
    'body': 'CFReadStreamGetBuffer(${1:CFReadStreamRef stream}, ${2:CFIndex maxBytesToRead}, ${3:CFIndex* numBytesRead})'
  'CFReadStreamGetError':
    'prefix': 'CFReadStreamGetError'
    'body': 'CFReadStreamGetError(${1:CFReadStreamRef stream})'
  'CFReadStreamGetStatus':
    'prefix': 'CFReadStreamGetStatus'
    'body': 'CFReadStreamGetStatus(${1:CFReadStreamRef stream})'
  'CFReadStreamGetTypeID':
    'prefix': 'CFReadStreamGetTypeID'
    'body': 'CFReadStreamGetTypeID()'
  'CFReadStreamHasBytesAvailable':
    'prefix': 'CFReadStreamHasBytesAvailable'
    'body': 'CFReadStreamHasBytesAvailable(${1:CFReadStreamRef stream})'
  'CFReadStreamOpen':
    'prefix': 'CFReadStreamOpen'
    'body': 'CFReadStreamOpen(${1:CFReadStreamRef stream})'
  'CFReadStreamRead':
    'prefix': 'CFReadStreamRead'
    'body': 'CFReadStreamRead(${1:CFReadStreamRef stream}, ${2:UInt8* buffer}, ${3:CFIndex bufferLength})'
  'CFReadStreamScheduleWithRunLoop':
    'prefix': 'CFReadStreamScheduleWithRunLoop'
    'body': 'CFReadStreamScheduleWithRunLoop(${1:CFReadStreamRef stream}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})'
  'CFReadStreamSetClient':
    'prefix': 'CFReadStreamSetClient'
    'body': 'CFReadStreamSetClient(${1:CFReadStreamRef stream}, ${2:CFOptionFlags streamEvents}, ${3:CFReadStreamClientCallBack clientCB}, ${4:CFStreamClientContext* clientContext})'
  'CFReadStreamSetDispatchQueue':
    'prefix': 'CFReadStreamSetDispatchQueue'
    'body': 'CFReadStreamSetDispatchQueue(${1:CFReadStreamRef stream}, ${2:dispatch_queue_t q})'
  'CFReadStreamSetProperty':
    'prefix': 'CFReadStreamSetProperty'
    'body': 'CFReadStreamSetProperty(${1:CFReadStreamRef stream}, ${2:CFStringRef propertyName}, ${3:CFTypeRef propertyValue})'
  'CFReadStreamUnscheduleFromRunLoop':
    'prefix': 'CFReadStreamUnscheduleFromRunLoop'
    'body': 'CFReadStreamUnscheduleFromRunLoop(${1:CFReadStreamRef stream}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})'
  'CFRelease':
    'prefix': 'CFRelease'
    'body': 'CFRelease(${1:CFTypeRef cf})'
  'CFRetain':
    'prefix': 'CFRetain'
    'body': 'CFRetain(${1:CFTypeRef cf})'
  'CFRunLoopAddCommonMode':
    'prefix': 'CFRunLoopAddCommonMode'
    'body': 'CFRunLoopAddCommonMode(${1:CFRunLoopRef rl}, ${2:CFStringRef mode})'
  'CFRunLoopAddObserver':
    'prefix': 'CFRunLoopAddObserver'
    'body': 'CFRunLoopAddObserver(${1:CFRunLoopRef rl}, ${2:CFRunLoopObserverRef observer}, ${3:CFStringRef mode})'
  'CFRunLoopAddSource':
    'prefix': 'CFRunLoopAddSource'
    'body': 'CFRunLoopAddSource(${1:CFRunLoopRef rl}, ${2:CFRunLoopSourceRef source}, ${3:CFStringRef mode})'
  'CFRunLoopAddTimer':
    'prefix': 'CFRunLoopAddTimer'
    'body': 'CFRunLoopAddTimer(${1:CFRunLoopRef rl}, ${2:CFRunLoopTimerRef timer}, ${3:CFStringRef mode})'
  'CFRunLoopContainsObserver':
    'prefix': 'CFRunLoopContainsObserver'
    'body': 'CFRunLoopContainsObserver(${1:CFRunLoopRef rl}, ${2:CFRunLoopObserverRef observer}, ${3:CFStringRef mode})'
  'CFRunLoopContainsSource':
    'prefix': 'CFRunLoopContainsSource'
    'body': 'CFRunLoopContainsSource(${1:CFRunLoopRef rl}, ${2:CFRunLoopSourceRef source}, ${3:CFStringRef mode})'
  'CFRunLoopContainsTimer':
    'prefix': 'CFRunLoopContainsTimer'
    'body': 'CFRunLoopContainsTimer(${1:CFRunLoopRef rl}, ${2:CFRunLoopTimerRef timer}, ${3:CFStringRef mode})'
  'CFRunLoopCopyAllModes':
    'prefix': 'CFRunLoopCopyAllModes'
    'body': 'CFRunLoopCopyAllModes(${1:CFRunLoopRef rl})'
  'CFRunLoopCopyCurrentMode':
    'prefix': 'CFRunLoopCopyCurrentMode'
    'body': 'CFRunLoopCopyCurrentMode(${1:CFRunLoopRef rl})'
  'CFRunLoopGetCurrent':
    'prefix': 'CFRunLoopGetCurrent'
    'body': 'CFRunLoopGetCurrent()'
  'CFRunLoopGetMain':
    'prefix': 'CFRunLoopGetMain'
    'body': 'CFRunLoopGetMain()'
  'CFRunLoopGetNextTimerFireDate':
    'prefix': 'CFRunLoopGetNextTimerFireDate'
    'body': 'CFRunLoopGetNextTimerFireDate(${1:CFRunLoopRef rl}, ${2:CFStringRef mode})'
  'CFRunLoopGetTypeID':
    'prefix': 'CFRunLoopGetTypeID'
    'body': 'CFRunLoopGetTypeID()'
  'CFRunLoopIsWaiting':
    'prefix': 'CFRunLoopIsWaiting'
    'body': 'CFRunLoopIsWaiting(${1:CFRunLoopRef rl})'
  'CFRunLoopObserverCreate':
    'prefix': 'CFRunLoopObserverCreate'
    'body': 'CFRunLoopObserverCreate(${1:CFAllocatorRef allocator}, ${2:CFOptionFlags activities}, ${3:Boolean repeats}, ${4:CFIndex order}, ${5:CFRunLoopObserverCallBack callout}, ${6:CFRunLoopObserverContext* context})'
  'CFRunLoopObserverCreateWithHandler':
    'prefix': 'CFRunLoopObserverCreateWithHandler'
    'body': 'CFRunLoopObserverCreateWithHandler(${1:CFAllocatorRef allocator}, ${2:CFOptionFlags activities}, ${3:Boolean repeats}, ${4:CFIndex order}, ${5:void (^)(CFRunLoopObserverRef, CFRunLoopActivity) block})'
  'CFRunLoopObserverDoesRepeat':
    'prefix': 'CFRunLoopObserverDoesRepeat'
    'body': 'CFRunLoopObserverDoesRepeat(${1:CFRunLoopObserverRef observer})'
  'CFRunLoopObserverGetActivities':
    'prefix': 'CFRunLoopObserverGetActivities'
    'body': 'CFRunLoopObserverGetActivities(${1:CFRunLoopObserverRef observer})'
  'CFRunLoopObserverGetContext':
    'prefix': 'CFRunLoopObserverGetContext'
    'body': 'CFRunLoopObserverGetContext(${1:CFRunLoopObserverRef observer}, ${2:CFRunLoopObserverContext* context})'
  'CFRunLoopObserverGetOrder':
    'prefix': 'CFRunLoopObserverGetOrder'
    'body': 'CFRunLoopObserverGetOrder(${1:CFRunLoopObserverRef observer})'
  'CFRunLoopObserverGetTypeID':
    'prefix': 'CFRunLoopObserverGetTypeID'
    'body': 'CFRunLoopObserverGetTypeID()'
  'CFRunLoopObserverInvalidate':
    'prefix': 'CFRunLoopObserverInvalidate'
    'body': 'CFRunLoopObserverInvalidate(${1:CFRunLoopObserverRef observer})'
  'CFRunLoopObserverIsValid':
    'prefix': 'CFRunLoopObserverIsValid'
    'body': 'CFRunLoopObserverIsValid(${1:CFRunLoopObserverRef observer})'
  'CFRunLoopPerformBlock':
    'prefix': 'CFRunLoopPerformBlock'
    'body': 'CFRunLoopPerformBlock(${1:CFRunLoopRef rl}, ${2:CFTypeRef mode}, ${3:void (^)(void) block})'
  'CFRunLoopRemoveObserver':
    'prefix': 'CFRunLoopRemoveObserver'
    'body': 'CFRunLoopRemoveObserver(${1:CFRunLoopRef rl}, ${2:CFRunLoopObserverRef observer}, ${3:CFStringRef mode})'
  'CFRunLoopRemoveSource':
    'prefix': 'CFRunLoopRemoveSource'
    'body': 'CFRunLoopRemoveSource(${1:CFRunLoopRef rl}, ${2:CFRunLoopSourceRef source}, ${3:CFStringRef mode})'
  'CFRunLoopRemoveTimer':
    'prefix': 'CFRunLoopRemoveTimer'
    'body': 'CFRunLoopRemoveTimer(${1:CFRunLoopRef rl}, ${2:CFRunLoopTimerRef timer}, ${3:CFStringRef mode})'
  'CFRunLoopRun':
    'prefix': 'CFRunLoopRun'
    'body': 'CFRunLoopRun()'
  'CFRunLoopRunInMode':
    'prefix': 'CFRunLoopRunInMode'
    'body': 'CFRunLoopRunInMode(${1:CFStringRef mode}, ${2:CFTimeInterval seconds}, ${3:Boolean returnAfterSourceHandled})'
  'CFRunLoopSourceCreate':
    'prefix': 'CFRunLoopSourceCreate'
    'body': 'CFRunLoopSourceCreate(${1:CFAllocatorRef allocator}, ${2:CFIndex order}, ${3:CFRunLoopSourceContext* context})'
  'CFRunLoopSourceGetContext':
    'prefix': 'CFRunLoopSourceGetContext'
    'body': 'CFRunLoopSourceGetContext(${1:CFRunLoopSourceRef source}, ${2:CFRunLoopSourceContext* context})'
  'CFRunLoopSourceGetOrder':
    'prefix': 'CFRunLoopSourceGetOrder'
    'body': 'CFRunLoopSourceGetOrder(${1:CFRunLoopSourceRef source})'
  'CFRunLoopSourceGetTypeID':
    'prefix': 'CFRunLoopSourceGetTypeID'
    'body': 'CFRunLoopSourceGetTypeID()'
  'CFRunLoopSourceInvalidate':
    'prefix': 'CFRunLoopSourceInvalidate'
    'body': 'CFRunLoopSourceInvalidate(${1:CFRunLoopSourceRef source})'
  'CFRunLoopSourceIsValid':
    'prefix': 'CFRunLoopSourceIsValid'
    'body': 'CFRunLoopSourceIsValid(${1:CFRunLoopSourceRef source})'
  'CFRunLoopSourceSignal':
    'prefix': 'CFRunLoopSourceSignal'
    'body': 'CFRunLoopSourceSignal(${1:CFRunLoopSourceRef source})'
  'CFRunLoopStop':
    'prefix': 'CFRunLoopStop'
    'body': 'CFRunLoopStop(${1:CFRunLoopRef rl})'
  'CFRunLoopTimerCreate':
    'prefix': 'CFRunLoopTimerCreate'
    'body': 'CFRunLoopTimerCreate(${1:CFAllocatorRef allocator}, ${2:CFAbsoluteTime fireDate}, ${3:CFTimeInterval interval}, ${4:CFOptionFlags flags}, ${5:CFIndex order}, ${6:CFRunLoopTimerCallBack callout}, ${7:CFRunLoopTimerContext* context})'
  'CFRunLoopTimerCreateWithHandler':
    'prefix': 'CFRunLoopTimerCreateWithHandler'
    'body': 'CFRunLoopTimerCreateWithHandler(${1:CFAllocatorRef allocator}, ${2:CFAbsoluteTime fireDate}, ${3:CFTimeInterval interval}, ${4:CFOptionFlags flags}, ${5:CFIndex order}, ${6:void (^)(CFRunLoopTimerRef) block})'
  'CFRunLoopTimerDoesRepeat':
    'prefix': 'CFRunLoopTimerDoesRepeat'
    'body': 'CFRunLoopTimerDoesRepeat(${1:CFRunLoopTimerRef timer})'
  'CFRunLoopTimerGetContext':
    'prefix': 'CFRunLoopTimerGetContext'
    'body': 'CFRunLoopTimerGetContext(${1:CFRunLoopTimerRef timer}, ${2:CFRunLoopTimerContext* context})'
  'CFRunLoopTimerGetInterval':
    'prefix': 'CFRunLoopTimerGetInterval'
    'body': 'CFRunLoopTimerGetInterval(${1:CFRunLoopTimerRef timer})'
  'CFRunLoopTimerGetNextFireDate':
    'prefix': 'CFRunLoopTimerGetNextFireDate'
    'body': 'CFRunLoopTimerGetNextFireDate(${1:CFRunLoopTimerRef timer})'
  'CFRunLoopTimerGetOrder':
    'prefix': 'CFRunLoopTimerGetOrder'
    'body': 'CFRunLoopTimerGetOrder(${1:CFRunLoopTimerRef timer})'
  'CFRunLoopTimerGetTolerance':
    'prefix': 'CFRunLoopTimerGetTolerance'
    'body': 'CFRunLoopTimerGetTolerance(${1:CFRunLoopTimerRef timer})'
  'CFRunLoopTimerGetTypeID':
    'prefix': 'CFRunLoopTimerGetTypeID'
    'body': 'CFRunLoopTimerGetTypeID()'
  'CFRunLoopTimerInvalidate':
    'prefix': 'CFRunLoopTimerInvalidate'
    'body': 'CFRunLoopTimerInvalidate(${1:CFRunLoopTimerRef timer})'
  'CFRunLoopTimerIsValid':
    'prefix': 'CFRunLoopTimerIsValid'
    'body': 'CFRunLoopTimerIsValid(${1:CFRunLoopTimerRef timer})'
  'CFRunLoopTimerSetNextFireDate':
    'prefix': 'CFRunLoopTimerSetNextFireDate'
    'body': 'CFRunLoopTimerSetNextFireDate(${1:CFRunLoopTimerRef timer}, ${2:CFAbsoluteTime fireDate})'
  'CFRunLoopTimerSetTolerance':
    'prefix': 'CFRunLoopTimerSetTolerance'
    'body': 'CFRunLoopTimerSetTolerance(${1:CFRunLoopTimerRef timer}, ${2:CFTimeInterval tolerance})'
  'CFRunLoopWakeUp':
    'prefix': 'CFRunLoopWakeUp'
    'body': 'CFRunLoopWakeUp(${1:CFRunLoopRef rl})'
  'CFSetAddValue':
    'prefix': 'CFSetAddValue'
    'body': 'CFSetAddValue(${1:CFMutableSetRef theSet}, ${2:void* value})'
  'CFSetApplyFunction':
    'prefix': 'CFSetApplyFunction'
    'body': 'CFSetApplyFunction(${1:CFSetRef theSet}, ${2:CFSetApplierFunction applier}, ${3:void* context})'
  'CFSetContainsValue':
    'prefix': 'CFSetContainsValue'
    'body': 'CFSetContainsValue(${1:CFSetRef theSet}, ${2:void* value})'
  'CFSetCreate':
    'prefix': 'CFSetCreate'
    'body': 'CFSetCreate(${1:CFAllocatorRef allocator}, ${2:void** values}, ${3:CFIndex numValues}, ${4:CFSetCallBacks* callBacks})'
  'CFSetCreateCopy':
    'prefix': 'CFSetCreateCopy'
    'body': 'CFSetCreateCopy(${1:CFAllocatorRef allocator}, ${2:CFSetRef theSet})'
  'CFSetCreateMutable':
    'prefix': 'CFSetCreateMutable'
    'body': 'CFSetCreateMutable(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFSetCallBacks* callBacks})'
  'CFSetCreateMutableCopy':
    'prefix': 'CFSetCreateMutableCopy'
    'body': 'CFSetCreateMutableCopy(${1:CFAllocatorRef allocator}, ${2:CFIndex capacity}, ${3:CFSetRef theSet})'
  'CFSetGetCount':
    'prefix': 'CFSetGetCount'
    'body': 'CFSetGetCount(${1:CFSetRef theSet})'
  'CFSetGetCountOfValue':
    'prefix': 'CFSetGetCountOfValue'
    'body': 'CFSetGetCountOfValue(${1:CFSetRef theSet}, ${2:void* value})'
  'CFSetGetTypeID':
    'prefix': 'CFSetGetTypeID'
    'body': 'CFSetGetTypeID()'
  'CFSetGetValue':
    'prefix': 'CFSetGetValue'
    'body': 'CFSetGetValue(${1:CFSetRef theSet}, ${2:void* value})'
  'CFSetGetValueIfPresent':
    'prefix': 'CFSetGetValueIfPresent'
    'body': 'CFSetGetValueIfPresent(${1:CFSetRef theSet}, ${2:void* candidate}, ${3:void** value})'
  'CFSetGetValues':
    'prefix': 'CFSetGetValues'
    'body': 'CFSetGetValues(${1:CFSetRef theSet}, ${2:void** values})'
  'CFSetRemoveAllValues':
    'prefix': 'CFSetRemoveAllValues'
    'body': 'CFSetRemoveAllValues(${1:CFMutableSetRef theSet})'
  'CFSetRemoveValue':
    'prefix': 'CFSetRemoveValue'
    'body': 'CFSetRemoveValue(${1:CFMutableSetRef theSet}, ${2:void* value})'
  'CFSetReplaceValue':
    'prefix': 'CFSetReplaceValue'
    'body': 'CFSetReplaceValue(${1:CFMutableSetRef theSet}, ${2:void* value})'
  'CFSetSetValue':
    'prefix': 'CFSetSetValue'
    'body': 'CFSetSetValue(${1:CFMutableSetRef theSet}, ${2:void* value})'
  'CFShow':
    'prefix': 'CFShow'
    'body': 'CFShow(${1:CFTypeRef obj})'
  'CFShowStr':
    'prefix': 'CFShowStr'
    'body': 'CFShowStr(${1:CFStringRef str})'
  'CFSocketConnectToAddress':
    'prefix': 'CFSocketConnectToAddress'
    'body': 'CFSocketConnectToAddress(${1:CFSocketRef s}, ${2:CFDataRef address}, ${3:CFTimeInterval timeout})'
  'CFSocketCopyAddress':
    'prefix': 'CFSocketCopyAddress'
    'body': 'CFSocketCopyAddress(${1:CFSocketRef s})'
  'CFSocketCopyPeerAddress':
    'prefix': 'CFSocketCopyPeerAddress'
    'body': 'CFSocketCopyPeerAddress(${1:CFSocketRef s})'
  'CFSocketCopyRegisteredSocketSignature':
    'prefix': 'CFSocketCopyRegisteredSocketSignature'
    'body': 'CFSocketCopyRegisteredSocketSignature(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name}, ${4:CFSocketSignature* signature}, ${5:CFDataRef* nameServerAddress})'
  'CFSocketCopyRegisteredValue':
    'prefix': 'CFSocketCopyRegisteredValue'
    'body': 'CFSocketCopyRegisteredValue(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name}, ${4:CFPropertyListRef* value}, ${5:CFDataRef* nameServerAddress})'
  'CFSocketCreate':
    'prefix': 'CFSocketCreate'
    'body': 'CFSocketCreate(${1:CFAllocatorRef allocator}, ${2:SInt32 protocolFamily}, ${3:SInt32 socketType}, ${4:SInt32 protocol}, ${5:CFOptionFlags callBackTypes}, ${6:CFSocketCallBack callout}, ${7:CFSocketContext* context})'
  'CFSocketCreateConnectedToSocketSignature':
    'prefix': 'CFSocketCreateConnectedToSocketSignature'
    'body': 'CFSocketCreateConnectedToSocketSignature(${1:CFAllocatorRef allocator}, ${2:CFSocketSignature* signature}, ${3:CFOptionFlags callBackTypes}, ${4:CFSocketCallBack callout}, ${5:CFSocketContext* context}, ${6:CFTimeInterval timeout})'
  'CFSocketCreateRunLoopSource':
    'prefix': 'CFSocketCreateRunLoopSource'
    'body': 'CFSocketCreateRunLoopSource(${1:CFAllocatorRef allocator}, ${2:CFSocketRef s}, ${3:CFIndex order})'
  'CFSocketCreateWithNative':
    'prefix': 'CFSocketCreateWithNative'
    'body': 'CFSocketCreateWithNative(${1:CFAllocatorRef allocator}, ${2:CFSocketNativeHandle sock}, ${3:CFOptionFlags callBackTypes}, ${4:CFSocketCallBack callout}, ${5:CFSocketContext* context})'
  'CFSocketCreateWithSocketSignature':
    'prefix': 'CFSocketCreateWithSocketSignature'
    'body': 'CFSocketCreateWithSocketSignature(${1:CFAllocatorRef allocator}, ${2:CFSocketSignature* signature}, ${3:CFOptionFlags callBackTypes}, ${4:CFSocketCallBack callout}, ${5:CFSocketContext* context})'
  'CFSocketDisableCallBacks':
    'prefix': 'CFSocketDisableCallBacks'
    'body': 'CFSocketDisableCallBacks(${1:CFSocketRef s}, ${2:CFOptionFlags callBackTypes})'
  'CFSocketEnableCallBacks':
    'prefix': 'CFSocketEnableCallBacks'
    'body': 'CFSocketEnableCallBacks(${1:CFSocketRef s}, ${2:CFOptionFlags callBackTypes})'
  'CFSocketGetContext':
    'prefix': 'CFSocketGetContext'
    'body': 'CFSocketGetContext(${1:CFSocketRef s}, ${2:CFSocketContext* context})'
  'CFSocketGetDefaultNameRegistryPortNumber':
    'prefix': 'CFSocketGetDefaultNameRegistryPortNumber'
    'body': 'CFSocketGetDefaultNameRegistryPortNumber()'
  'CFSocketGetNative':
    'prefix': 'CFSocketGetNative'
    'body': 'CFSocketGetNative(${1:CFSocketRef s})'
  'CFSocketGetSocketFlags':
    'prefix': 'CFSocketGetSocketFlags'
    'body': 'CFSocketGetSocketFlags(${1:CFSocketRef s})'
  'CFSocketGetTypeID':
    'prefix': 'CFSocketGetTypeID'
    'body': 'CFSocketGetTypeID()'
  'CFSocketInvalidate':
    'prefix': 'CFSocketInvalidate'
    'body': 'CFSocketInvalidate(${1:CFSocketRef s})'
  'CFSocketIsValid':
    'prefix': 'CFSocketIsValid'
    'body': 'CFSocketIsValid(${1:CFSocketRef s})'
  'CFSocketRegisterSocketSignature':
    'prefix': 'CFSocketRegisterSocketSignature'
    'body': 'CFSocketRegisterSocketSignature(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name}, ${4:CFSocketSignature* signature})'
  'CFSocketRegisterValue':
    'prefix': 'CFSocketRegisterValue'
    'body': 'CFSocketRegisterValue(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name}, ${4:CFPropertyListRef value})'
  'CFSocketSendData':
    'prefix': 'CFSocketSendData'
    'body': 'CFSocketSendData(${1:CFSocketRef s}, ${2:CFDataRef address}, ${3:CFDataRef data}, ${4:CFTimeInterval timeout})'
  'CFSocketSetAddress':
    'prefix': 'CFSocketSetAddress'
    'body': 'CFSocketSetAddress(${1:CFSocketRef s}, ${2:CFDataRef address})'
  'CFSocketSetDefaultNameRegistryPortNumber':
    'prefix': 'CFSocketSetDefaultNameRegistryPortNumber'
    'body': 'CFSocketSetDefaultNameRegistryPortNumber(${1:UInt16 port})'
  'CFSocketSetSocketFlags':
    'prefix': 'CFSocketSetSocketFlags'
    'body': 'CFSocketSetSocketFlags(${1:CFSocketRef s}, ${2:CFOptionFlags flags})'
  'CFSocketUnregister':
    'prefix': 'CFSocketUnregister'
    'body': 'CFSocketUnregister(${1:CFSocketSignature* nameServerSignature}, ${2:CFTimeInterval timeout}, ${3:CFStringRef name})'
  'CFStreamCreateBoundPair':
    'prefix': 'CFStreamCreateBoundPair'
    'body': 'CFStreamCreateBoundPair(${1:CFAllocatorRef alloc}, ${2:CFReadStreamRef* readStream}, ${3:CFWriteStreamRef* writeStream}, ${4:CFIndex transferBufferSize})'
  'CFStreamCreatePairWithPeerSocketSignature':
    'prefix': 'CFStreamCreatePairWithPeerSocketSignature'
    'body': 'CFStreamCreatePairWithPeerSocketSignature(${1:CFAllocatorRef alloc}, ${2:CFSocketSignature* signature}, ${3:CFReadStreamRef* readStream}, ${4:CFWriteStreamRef* writeStream})'
  'CFStreamCreatePairWithSocket':
    'prefix': 'CFStreamCreatePairWithSocket'
    'body': 'CFStreamCreatePairWithSocket(${1:CFAllocatorRef alloc}, ${2:CFSocketNativeHandle sock}, ${3:CFReadStreamRef* readStream}, ${4:CFWriteStreamRef* writeStream})'
  'CFStreamCreatePairWithSocketToHost':
    'prefix': 'CFStreamCreatePairWithSocketToHost'
    'body': 'CFStreamCreatePairWithSocketToHost(${1:CFAllocatorRef alloc}, ${2:CFStringRef host}, ${3:UInt32 port}, ${4:CFReadStreamRef* readStream}, ${5:CFWriteStreamRef* writeStream})'
  'CFStringAppend':
    'prefix': 'CFStringAppend'
    'body': 'CFStringAppend(${1:CFMutableStringRef theString}, ${2:CFStringRef appendedString})'
  'CFStringAppendCString':
    'prefix': 'CFStringAppendCString'
    'body': 'CFStringAppendCString(${1:CFMutableStringRef theString}, ${2:char* cStr}, ${3:CFStringEncoding encoding})'
  'CFStringAppendCharacters':
    'prefix': 'CFStringAppendCharacters'
    'body': 'CFStringAppendCharacters(${1:CFMutableStringRef theString}, ${2:UniChar* chars}, ${3:CFIndex numChars})'
  'CFStringAppendFormat':
    'prefix': 'CFStringAppendFormat'
    'body': 'CFStringAppendFormat(${1:CFMutableStringRef theString}, ${2:CFDictionaryRef formatOptions}, ${3:CFStringRef format})'
  'CFStringAppendFormatAndArguments':
    'prefix': 'CFStringAppendFormatAndArguments'
    'body': 'CFStringAppendFormatAndArguments(${1:CFMutableStringRef theString}, ${2:CFDictionaryRef formatOptions}, ${3:CFStringRef format}, ${4:va_list arguments})'
  'CFStringAppendPascalString':
    'prefix': 'CFStringAppendPascalString'
    'body': 'CFStringAppendPascalString(${1:CFMutableStringRef theString}, ${2:ConstStr255Param pStr}, ${3:CFStringEncoding encoding})'
  'CFStringCapitalize':
    'prefix': 'CFStringCapitalize'
    'body': 'CFStringCapitalize(${1:CFMutableStringRef theString}, ${2:CFLocaleRef locale})'
  'CFStringCompare':
    'prefix': 'CFStringCompare'
    'body': 'CFStringCompare(${1:CFStringRef theString1}, ${2:CFStringRef theString2}, ${3:CFStringCompareFlags compareOptions})'
  'CFStringCompareWithOptions':
    'prefix': 'CFStringCompareWithOptions'
    'body': 'CFStringCompareWithOptions(${1:CFStringRef theString1}, ${2:CFStringRef theString2}, ${3:CFRange rangeToCompare}, ${4:CFStringCompareFlags compareOptions})'
  'CFStringCompareWithOptionsAndLocale':
    'prefix': 'CFStringCompareWithOptionsAndLocale'
    'body': 'CFStringCompareWithOptionsAndLocale(${1:CFStringRef theString1}, ${2:CFStringRef theString2}, ${3:CFRange rangeToCompare}, ${4:CFStringCompareFlags compareOptions}, ${5:CFLocaleRef locale})'
  'CFStringConvertEncodingToIANACharSetName':
    'prefix': 'CFStringConvertEncodingToIANACharSetName'
    'body': 'CFStringConvertEncodingToIANACharSetName(${1:CFStringEncoding encoding})'
  'CFStringConvertEncodingToNSStringEncoding':
    'prefix': 'CFStringConvertEncodingToNSStringEncoding'
    'body': 'CFStringConvertEncodingToNSStringEncoding(${1:CFStringEncoding encoding})'
  'CFStringConvertEncodingToWindowsCodepage':
    'prefix': 'CFStringConvertEncodingToWindowsCodepage'
    'body': 'CFStringConvertEncodingToWindowsCodepage(${1:CFStringEncoding encoding})'
  'CFStringConvertIANACharSetNameToEncoding':
    'prefix': 'CFStringConvertIANACharSetNameToEncoding'
    'body': 'CFStringConvertIANACharSetNameToEncoding(${1:CFStringRef theString})'
  'CFStringConvertNSStringEncodingToEncoding':
    'prefix': 'CFStringConvertNSStringEncodingToEncoding'
    'body': 'CFStringConvertNSStringEncodingToEncoding(${1:unsigned long encoding})'
  'CFStringConvertWindowsCodepageToEncoding':
    'prefix': 'CFStringConvertWindowsCodepageToEncoding'
    'body': 'CFStringConvertWindowsCodepageToEncoding(${1:UInt32 codepage})'
  'CFStringCreateArrayBySeparatingStrings':
    'prefix': 'CFStringCreateArrayBySeparatingStrings'
    'body': 'CFStringCreateArrayBySeparatingStrings(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString}, ${3:CFStringRef separatorString})'
  'CFStringCreateArrayWithFindResults':
    'prefix': 'CFStringCreateArrayWithFindResults'
    'body': 'CFStringCreateArrayWithFindResults(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString}, ${3:CFStringRef stringToFind}, ${4:CFRange rangeToSearch}, ${5:CFStringCompareFlags compareOptions})'
  'CFStringCreateByCombiningStrings':
    'prefix': 'CFStringCreateByCombiningStrings'
    'body': 'CFStringCreateByCombiningStrings(${1:CFAllocatorRef alloc}, ${2:CFArrayRef theArray}, ${3:CFStringRef separatorString})'
  'CFStringCreateCopy':
    'prefix': 'CFStringCreateCopy'
    'body': 'CFStringCreateCopy(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString})'
  'CFStringCreateExternalRepresentation':
    'prefix': 'CFStringCreateExternalRepresentation'
    'body': 'CFStringCreateExternalRepresentation(${1:CFAllocatorRef alloc}, ${2:CFStringRef theString}, ${3:CFStringEncoding encoding}, ${4:UInt8 lossByte})'
  'CFStringCreateFromExternalRepresentation':
    'prefix': 'CFStringCreateFromExternalRepresentation'
    'body': 'CFStringCreateFromExternalRepresentation(${1:CFAllocatorRef alloc}, ${2:CFDataRef data}, ${3:CFStringEncoding encoding})'
  'CFStringCreateMutable':
    'prefix': 'CFStringCreateMutable'
    'body': 'CFStringCreateMutable(${1:CFAllocatorRef alloc}, ${2:CFIndex maxLength})'
  'CFStringCreateMutableCopy':
    'prefix': 'CFStringCreateMutableCopy'
    'body': 'CFStringCreateMutableCopy(${1:CFAllocatorRef alloc}, ${2:CFIndex maxLength}, ${3:CFStringRef theString})'
  'CFStringCreateMutableWithExternalCharactersNoCopy':
    'prefix': 'CFStringCreateMutableWithExternalCharactersNoCopy'
    'body': 'CFStringCreateMutableWithExternalCharactersNoCopy(${1:CFAllocatorRef alloc}, ${2:UniChar* chars}, ${3:CFIndex numChars}, ${4:CFIndex capacity}, ${5:CFAllocatorRef externalCharactersAllocator})'
  'CFStringCreateWithBytes':
    'prefix': 'CFStringCreateWithBytes'
    'body': 'CFStringCreateWithBytes(${1:CFAllocatorRef alloc}, ${2:UInt8* bytes}, ${3:CFIndex numBytes}, ${4:CFStringEncoding encoding}, ${5:Boolean isExternalRepresentation})'
  'CFStringCreateWithBytesNoCopy':
    'prefix': 'CFStringCreateWithBytesNoCopy'
    'body': 'CFStringCreateWithBytesNoCopy(${1:CFAllocatorRef alloc}, ${2:UInt8* bytes}, ${3:CFIndex numBytes}, ${4:CFStringEncoding encoding}, ${5:Boolean isExternalRepresentation}, ${6:CFAllocatorRef contentsDeallocator})'
  'CFStringCreateWithCString':
    'prefix': 'CFStringCreateWithCString'
    'body': 'CFStringCreateWithCString(${1:CFAllocatorRef alloc}, ${2:char* cStr}, ${3:CFStringEncoding encoding})'
  'CFStringCreateWithCStringNoCopy':
    'prefix': 'CFStringCreateWithCStringNoCopy'
    'body': 'CFStringCreateWithCStringNoCopy(${1:CFAllocatorRef alloc}, ${2:char* cStr}, ${3:CFStringEncoding encoding}, ${4:CFAllocatorRef contentsDeallocator})'
  'CFStringCreateWithCharacters':
    'prefix': 'CFStringCreateWithCharacters'
    'body': 'CFStringCreateWithCharacters(${1:CFAllocatorRef alloc}, ${2:UniChar* chars}, ${3:CFIndex numChars})'
  'CFStringCreateWithCharactersNoCopy':
    'prefix': 'CFStringCreateWithCharactersNoCopy'
    'body': 'CFStringCreateWithCharactersNoCopy(${1:CFAllocatorRef alloc}, ${2:UniChar* chars}, ${3:CFIndex numChars}, ${4:CFAllocatorRef contentsDeallocator})'
  'CFStringCreateWithFileSystemRepresentation':
    'prefix': 'CFStringCreateWithFileSystemRepresentation'
    'body': 'CFStringCreateWithFileSystemRepresentation(${1:CFAllocatorRef alloc}, ${2:char* buffer})'
  'CFStringCreateWithFormat':
    'prefix': 'CFStringCreateWithFormat'
    'body': 'CFStringCreateWithFormat(${1:CFAllocatorRef alloc}, ${2:CFDictionaryRef formatOptions}, ${3:CFStringRef format})'
  'CFStringCreateWithFormatAndArguments':
    'prefix': 'CFStringCreateWithFormatAndArguments'
    'body': 'CFStringCreateWithFormatAndArguments(${1:CFAllocatorRef alloc}, ${2:CFDictionaryRef formatOptions}, ${3:CFStringRef format}, ${4:va_list arguments})'
  'CFStringCreateWithPascalString':
    'prefix': 'CFStringCreateWithPascalString'
    'body': 'CFStringCreateWithPascalString(${1:CFAllocatorRef alloc}, ${2:ConstStr255Param pStr}, ${3:CFStringEncoding encoding})'
  'CFStringCreateWithPascalStringNoCopy':
    'prefix': 'CFStringCreateWithPascalStringNoCopy'
    'body': 'CFStringCreateWithPascalStringNoCopy(${1:CFAllocatorRef alloc}, ${2:ConstStr255Param pStr}, ${3:CFStringEncoding encoding}, ${4:CFAllocatorRef contentsDeallocator})'
  'CFStringCreateWithSubstring':
    'prefix': 'CFStringCreateWithSubstring'
    'body': 'CFStringCreateWithSubstring(${1:CFAllocatorRef alloc}, ${2:CFStringRef str}, ${3:CFRange range})'
  'CFStringDelete':
    'prefix': 'CFStringDelete'
    'body': 'CFStringDelete(${1:CFMutableStringRef theString}, ${2:CFRange range})'
  'CFStringFind':
    'prefix': 'CFStringFind'
    'body': 'CFStringFind(${1:CFStringRef theString}, ${2:CFStringRef stringToFind}, ${3:CFStringCompareFlags compareOptions})'
  'CFStringFindAndReplace':
    'prefix': 'CFStringFindAndReplace'
    'body': 'CFStringFindAndReplace(${1:CFMutableStringRef theString}, ${2:CFStringRef stringToFind}, ${3:CFStringRef replacementString}, ${4:CFRange rangeToSearch}, ${5:CFStringCompareFlags compareOptions})'
  'CFStringFindCharacterFromSet':
    'prefix': 'CFStringFindCharacterFromSet'
    'body': 'CFStringFindCharacterFromSet(${1:CFStringRef theString}, ${2:CFCharacterSetRef theSet}, ${3:CFRange rangeToSearch}, ${4:CFStringCompareFlags searchOptions}, ${5:CFRange* result})'
  'CFStringFindWithOptions':
    'prefix': 'CFStringFindWithOptions'
    'body': 'CFStringFindWithOptions(${1:CFStringRef theString}, ${2:CFStringRef stringToFind}, ${3:CFRange rangeToSearch}, ${4:CFStringCompareFlags searchOptions}, ${5:CFRange* result})'
  'CFStringFindWithOptionsAndLocale':
    'prefix': 'CFStringFindWithOptionsAndLocale'
    'body': 'CFStringFindWithOptionsAndLocale(${1:CFStringRef theString}, ${2:CFStringRef stringToFind}, ${3:CFRange rangeToSearch}, ${4:CFStringCompareFlags searchOptions}, ${5:CFLocaleRef locale}, ${6:CFRange* result})'
  'CFStringFold':
    'prefix': 'CFStringFold'
    'body': 'CFStringFold(${1:CFMutableStringRef theString}, ${2:CFStringCompareFlags theFlags}, ${3:CFLocaleRef theLocale})'
  'CFStringGetBytes':
    'prefix': 'CFStringGetBytes'
    'body': 'CFStringGetBytes(${1:CFStringRef theString}, ${2:CFRange range}, ${3:CFStringEncoding encoding}, ${4:UInt8 lossByte}, ${5:Boolean isExternalRepresentation}, ${6:UInt8* buffer}, ${7:CFIndex maxBufLen}, ${8:CFIndex* usedBufLen})'
  'CFStringGetCString':
    'prefix': 'CFStringGetCString'
    'body': 'CFStringGetCString(${1:CFStringRef theString}, ${2:char* buffer}, ${3:CFIndex bufferSize}, ${4:CFStringEncoding encoding})'
  'CFStringGetCStringPtr':
    'prefix': 'CFStringGetCStringPtr'
    'body': 'CFStringGetCStringPtr(${1:CFStringRef theString}, ${2:CFStringEncoding encoding})'
  'CFStringGetCharacterAtIndex':
    'prefix': 'CFStringGetCharacterAtIndex'
    'body': 'CFStringGetCharacterAtIndex(${1:CFStringRef theString}, ${2:CFIndex idx})'
  'CFStringGetCharacterFromInlineBuffer':
    'prefix': 'CFStringGetCharacterFromInlineBuffer'
    'body': 'CFStringGetCharacterFromInlineBuffer(${1:CFStringInlineBuffer* buf}, ${2:CFIndex idx})'
  'CFStringGetCharacters':
    'prefix': 'CFStringGetCharacters'
    'body': 'CFStringGetCharacters(${1:CFStringRef theString}, ${2:CFRange range}, ${3:UniChar* buffer})'
  'CFStringGetCharactersPtr':
    'prefix': 'CFStringGetCharactersPtr'
    'body': 'CFStringGetCharactersPtr(${1:CFStringRef theString})'
  'CFStringGetDoubleValue':
    'prefix': 'CFStringGetDoubleValue'
    'body': 'CFStringGetDoubleValue(${1:CFStringRef str})'
  'CFStringGetFastestEncoding':
    'prefix': 'CFStringGetFastestEncoding'
    'body': 'CFStringGetFastestEncoding(${1:CFStringRef theString})'
  'CFStringGetFileSystemRepresentation':
    'prefix': 'CFStringGetFileSystemRepresentation'
    'body': 'CFStringGetFileSystemRepresentation(${1:CFStringRef string}, ${2:char* buffer}, ${3:CFIndex maxBufLen})'
  'CFStringGetHyphenationLocationBeforeIndex':
    'prefix': 'CFStringGetHyphenationLocationBeforeIndex'
    'body': 'CFStringGetHyphenationLocationBeforeIndex(${1:CFStringRef string}, ${2:CFIndex location}, ${3:CFRange limitRange}, ${4:CFOptionFlags options}, ${5:CFLocaleRef locale}, ${6:UTF32Char* character})'
  'CFStringGetIntValue':
    'prefix': 'CFStringGetIntValue'
    'body': 'CFStringGetIntValue(${1:CFStringRef str})'
  'CFStringGetLength':
    'prefix': 'CFStringGetLength'
    'body': 'CFStringGetLength(${1:CFStringRef theString})'
  'CFStringGetLineBounds':
    'prefix': 'CFStringGetLineBounds'
    'body': 'CFStringGetLineBounds(${1:CFStringRef theString}, ${2:CFRange range}, ${3:CFIndex* lineBeginIndex}, ${4:CFIndex* lineEndIndex}, ${5:CFIndex* contentsEndIndex})'
  'CFStringGetListOfAvailableEncodings':
    'prefix': 'CFStringGetListOfAvailableEncodings'
    'body': 'CFStringGetListOfAvailableEncodings()'
  'CFStringGetLongCharacterForSurrogatePair':
    'prefix': 'CFStringGetLongCharacterForSurrogatePair'
    'body': 'CFStringGetLongCharacterForSurrogatePair(${1:UniChar surrogateHigh}, ${2:UniChar surrogateLow})'
  'CFStringGetMaximumSizeForEncoding':
    'prefix': 'CFStringGetMaximumSizeForEncoding'
    'body': 'CFStringGetMaximumSizeForEncoding(${1:CFIndex length}, ${2:CFStringEncoding encoding})'
  'CFStringGetMaximumSizeOfFileSystemRepresentation':
    'prefix': 'CFStringGetMaximumSizeOfFileSystemRepresentation'
    'body': 'CFStringGetMaximumSizeOfFileSystemRepresentation(${1:CFStringRef string})'
  'CFStringGetMostCompatibleMacStringEncoding':
    'prefix': 'CFStringGetMostCompatibleMacStringEncoding'
    'body': 'CFStringGetMostCompatibleMacStringEncoding(${1:CFStringEncoding encoding})'
  'CFStringGetNameOfEncoding':
    'prefix': 'CFStringGetNameOfEncoding'
    'body': 'CFStringGetNameOfEncoding(${1:CFStringEncoding encoding})'
  'CFStringGetParagraphBounds':
    'prefix': 'CFStringGetParagraphBounds'
    'body': 'CFStringGetParagraphBounds(${1:CFStringRef string}, ${2:CFRange range}, ${3:CFIndex* parBeginIndex}, ${4:CFIndex* parEndIndex}, ${5:CFIndex* contentsEndIndex})'
  'CFStringGetPascalString':
    'prefix': 'CFStringGetPascalString'
    'body': 'CFStringGetPascalString(${1:CFStringRef theString}, ${2:StringPtr buffer}, ${3:CFIndex bufferSize}, ${4:CFStringEncoding encoding})'
  'CFStringGetPascalStringPtr':
    'prefix': 'CFStringGetPascalStringPtr'
    'body': 'CFStringGetPascalStringPtr(${1:CFStringRef theString}, ${2:CFStringEncoding encoding})'
  'CFStringGetRangeOfComposedCharactersAtIndex':
    'prefix': 'CFStringGetRangeOfComposedCharactersAtIndex'
    'body': 'CFStringGetRangeOfComposedCharactersAtIndex(${1:CFStringRef theString}, ${2:CFIndex theIndex})'
  'CFStringGetSmallestEncoding':
    'prefix': 'CFStringGetSmallestEncoding'
    'body': 'CFStringGetSmallestEncoding(${1:CFStringRef theString})'
  'CFStringGetSurrogatePairForLongCharacter':
    'prefix': 'CFStringGetSurrogatePairForLongCharacter'
    'body': 'CFStringGetSurrogatePairForLongCharacter(${1:UTF32Char character}, ${2:UniChar* surrogates})'
  'CFStringGetSystemEncoding':
    'prefix': 'CFStringGetSystemEncoding'
    'body': 'CFStringGetSystemEncoding()'
  'CFStringGetTypeID':
    'prefix': 'CFStringGetTypeID'
    'body': 'CFStringGetTypeID()'
  'CFStringHasPrefix':
    'prefix': 'CFStringHasPrefix'
    'body': 'CFStringHasPrefix(${1:CFStringRef theString}, ${2:CFStringRef prefix})'
  'CFStringHasSuffix':
    'prefix': 'CFStringHasSuffix'
    'body': 'CFStringHasSuffix(${1:CFStringRef theString}, ${2:CFStringRef suffix})'
  'CFStringInitInlineBuffer':
    'prefix': 'CFStringInitInlineBuffer'
    'body': 'CFStringInitInlineBuffer(${1:CFStringRef str}, ${2:CFStringInlineBuffer* buf}, ${3:CFRange range})'
  'CFStringInsert':
    'prefix': 'CFStringInsert'
    'body': 'CFStringInsert(${1:CFMutableStringRef str}, ${2:CFIndex idx}, ${3:CFStringRef insertedStr})'
  'CFStringIsEncodingAvailable':
    'prefix': 'CFStringIsEncodingAvailable'
    'body': 'CFStringIsEncodingAvailable(${1:CFStringEncoding encoding})'
  'CFStringIsHyphenationAvailableForLocale':
    'prefix': 'CFStringIsHyphenationAvailableForLocale'
    'body': 'CFStringIsHyphenationAvailableForLocale(${1:CFLocaleRef locale})'
  'CFStringIsSurrogateHighCharacter':
    'prefix': 'CFStringIsSurrogateHighCharacter'
    'body': 'CFStringIsSurrogateHighCharacter(${1:UniChar character})'
  'CFStringIsSurrogateLowCharacter':
    'prefix': 'CFStringIsSurrogateLowCharacter'
    'body': 'CFStringIsSurrogateLowCharacter(${1:UniChar character})'
  'CFStringLowercase':
    'prefix': 'CFStringLowercase'
    'body': 'CFStringLowercase(${1:CFMutableStringRef theString}, ${2:CFLocaleRef locale})'
  'CFStringNormalize':
    'prefix': 'CFStringNormalize'
    'body': 'CFStringNormalize(${1:CFMutableStringRef theString}, ${2:CFStringNormalizationForm theForm})'
  'CFStringPad':
    'prefix': 'CFStringPad'
    'body': 'CFStringPad(${1:CFMutableStringRef theString}, ${2:CFStringRef padString}, ${3:CFIndex length}, ${4:CFIndex indexIntoPad})'
  'CFStringReplace':
    'prefix': 'CFStringReplace'
    'body': 'CFStringReplace(${1:CFMutableStringRef theString}, ${2:CFRange range}, ${3:CFStringRef replacement})'
  'CFStringReplaceAll':
    'prefix': 'CFStringReplaceAll'
    'body': 'CFStringReplaceAll(${1:CFMutableStringRef theString}, ${2:CFStringRef replacement})'
  'CFStringSetExternalCharactersNoCopy':
    'prefix': 'CFStringSetExternalCharactersNoCopy'
    'body': 'CFStringSetExternalCharactersNoCopy(${1:CFMutableStringRef theString}, ${2:UniChar* chars}, ${3:CFIndex length}, ${4:CFIndex capacity})'
  'CFStringTokenizerAdvanceToNextToken':
    'prefix': 'CFStringTokenizerAdvanceToNextToken'
    'body': 'CFStringTokenizerAdvanceToNextToken(${1:CFStringTokenizerRef tokenizer})'
  'CFStringTokenizerCopyBestStringLanguage':
    'prefix': 'CFStringTokenizerCopyBestStringLanguage'
    'body': 'CFStringTokenizerCopyBestStringLanguage(${1:CFStringRef string}, ${2:CFRange range})'
  'CFStringTokenizerCopyCurrentTokenAttribute':
    'prefix': 'CFStringTokenizerCopyCurrentTokenAttribute'
    'body': 'CFStringTokenizerCopyCurrentTokenAttribute(${1:CFStringTokenizerRef tokenizer}, ${2:CFOptionFlags attribute})'
  'CFStringTokenizerCreate':
    'prefix': 'CFStringTokenizerCreate'
    'body': 'CFStringTokenizerCreate(${1:CFAllocatorRef alloc}, ${2:CFStringRef string}, ${3:CFRange range}, ${4:CFOptionFlags options}, ${5:CFLocaleRef locale})'
  'CFStringTokenizerGetCurrentSubTokens':
    'prefix': 'CFStringTokenizerGetCurrentSubTokens'
    'body': 'CFStringTokenizerGetCurrentSubTokens(${1:CFStringTokenizerRef tokenizer}, ${2:CFRange* ranges}, ${3:CFIndex maxRangeLength}, ${4:CFMutableArrayRef derivedSubTokens})'
  'CFStringTokenizerGetCurrentTokenRange':
    'prefix': 'CFStringTokenizerGetCurrentTokenRange'
    'body': 'CFStringTokenizerGetCurrentTokenRange(${1:CFStringTokenizerRef tokenizer})'
  'CFStringTokenizerGetTypeID':
    'prefix': 'CFStringTokenizerGetTypeID'
    'body': 'CFStringTokenizerGetTypeID()'
  'CFStringTokenizerGoToTokenAtIndex':
    'prefix': 'CFStringTokenizerGoToTokenAtIndex'
    'body': 'CFStringTokenizerGoToTokenAtIndex(${1:CFStringTokenizerRef tokenizer}, ${2:CFIndex index})'
  'CFStringTokenizerSetString':
    'prefix': 'CFStringTokenizerSetString'
    'body': 'CFStringTokenizerSetString(${1:CFStringTokenizerRef tokenizer}, ${2:CFStringRef string}, ${3:CFRange range})'
  'CFStringTransform':
    'prefix': 'CFStringTransform'
    'body': 'CFStringTransform(${1:CFMutableStringRef string}, ${2:CFRange* range}, ${3:CFStringRef transform}, ${4:Boolean reverse})'
  'CFStringTrim':
    'prefix': 'CFStringTrim'
    'body': 'CFStringTrim(${1:CFMutableStringRef theString}, ${2:CFStringRef trimString})'
  'CFStringTrimWhitespace':
    'prefix': 'CFStringTrimWhitespace'
    'body': 'CFStringTrimWhitespace(${1:CFMutableStringRef theString})'
  'CFStringUppercase':
    'prefix': 'CFStringUppercase'
    'body': 'CFStringUppercase(${1:CFMutableStringRef theString}, ${2:CFLocaleRef locale})'
  'CFSwapInt16':
    'prefix': 'CFSwapInt16'
    'body': 'CFSwapInt16(${1:uint16_t arg})'
  'CFSwapInt16BigToHost':
    'prefix': 'CFSwapInt16BigToHost'
    'body': 'CFSwapInt16BigToHost(${1:uint16_t arg})'
  'CFSwapInt16HostToBig':
    'prefix': 'CFSwapInt16HostToBig'
    'body': 'CFSwapInt16HostToBig(${1:uint16_t arg})'
  'CFSwapInt16HostToLittle':
    'prefix': 'CFSwapInt16HostToLittle'
    'body': 'CFSwapInt16HostToLittle(${1:uint16_t arg})'
  'CFSwapInt16LittleToHost':
    'prefix': 'CFSwapInt16LittleToHost'
    'body': 'CFSwapInt16LittleToHost(${1:uint16_t arg})'
  'CFSwapInt32':
    'prefix': 'CFSwapInt32'
    'body': 'CFSwapInt32(${1:uint32_t arg})'
  'CFSwapInt32BigToHost':
    'prefix': 'CFSwapInt32BigToHost'
    'body': 'CFSwapInt32BigToHost(${1:uint32_t arg})'
  'CFSwapInt32HostToBig':
    'prefix': 'CFSwapInt32HostToBig'
    'body': 'CFSwapInt32HostToBig(${1:uint32_t arg})'
  'CFSwapInt32HostToLittle':
    'prefix': 'CFSwapInt32HostToLittle'
    'body': 'CFSwapInt32HostToLittle(${1:uint32_t arg})'
  'CFSwapInt32LittleToHost':
    'prefix': 'CFSwapInt32LittleToHost'
    'body': 'CFSwapInt32LittleToHost(${1:uint32_t arg})'
  'CFSwapInt64':
    'prefix': 'CFSwapInt64'
    'body': 'CFSwapInt64(${1:uint64_t arg})'
  'CFSwapInt64BigToHost':
    'prefix': 'CFSwapInt64BigToHost'
    'body': 'CFSwapInt64BigToHost(${1:uint64_t arg})'
  'CFSwapInt64HostToBig':
    'prefix': 'CFSwapInt64HostToBig'
    'body': 'CFSwapInt64HostToBig(${1:uint64_t arg})'
  'CFSwapInt64HostToLittle':
    'prefix': 'CFSwapInt64HostToLittle'
    'body': 'CFSwapInt64HostToLittle(${1:uint64_t arg})'
  'CFSwapInt64LittleToHost':
    'prefix': 'CFSwapInt64LittleToHost'
    'body': 'CFSwapInt64LittleToHost(${1:uint64_t arg})'
  'CFTimeZoneCopyAbbreviation':
    'prefix': 'CFTimeZoneCopyAbbreviation'
    'body': 'CFTimeZoneCopyAbbreviation(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})'
  'CFTimeZoneCopyAbbreviationDictionary':
    'prefix': 'CFTimeZoneCopyAbbreviationDictionary'
    'body': 'CFTimeZoneCopyAbbreviationDictionary()'
  'CFTimeZoneCopyDefault':
    'prefix': 'CFTimeZoneCopyDefault'
    'body': 'CFTimeZoneCopyDefault()'
  'CFTimeZoneCopyKnownNames':
    'prefix': 'CFTimeZoneCopyKnownNames'
    'body': 'CFTimeZoneCopyKnownNames()'
  'CFTimeZoneCopyLocalizedName':
    'prefix': 'CFTimeZoneCopyLocalizedName'
    'body': 'CFTimeZoneCopyLocalizedName(${1:CFTimeZoneRef tz}, ${2:CFTimeZoneNameStyle style}, ${3:CFLocaleRef locale})'
  'CFTimeZoneCopySystem':
    'prefix': 'CFTimeZoneCopySystem'
    'body': 'CFTimeZoneCopySystem()'
  'CFTimeZoneCreate':
    'prefix': 'CFTimeZoneCreate'
    'body': 'CFTimeZoneCreate(${1:CFAllocatorRef allocator}, ${2:CFStringRef name}, ${3:CFDataRef data})'
  'CFTimeZoneCreateWithName':
    'prefix': 'CFTimeZoneCreateWithName'
    'body': 'CFTimeZoneCreateWithName(${1:CFAllocatorRef allocator}, ${2:CFStringRef name}, ${3:Boolean tryAbbrev})'
  'CFTimeZoneCreateWithTimeIntervalFromGMT':
    'prefix': 'CFTimeZoneCreateWithTimeIntervalFromGMT'
    'body': 'CFTimeZoneCreateWithTimeIntervalFromGMT(${1:CFAllocatorRef allocator}, ${2:CFTimeInterval ti})'
  'CFTimeZoneGetData':
    'prefix': 'CFTimeZoneGetData'
    'body': 'CFTimeZoneGetData(${1:CFTimeZoneRef tz})'
  'CFTimeZoneGetDaylightSavingTimeOffset':
    'prefix': 'CFTimeZoneGetDaylightSavingTimeOffset'
    'body': 'CFTimeZoneGetDaylightSavingTimeOffset(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})'
  'CFTimeZoneGetName':
    'prefix': 'CFTimeZoneGetName'
    'body': 'CFTimeZoneGetName(${1:CFTimeZoneRef tz})'
  'CFTimeZoneGetNextDaylightSavingTimeTransition':
    'prefix': 'CFTimeZoneGetNextDaylightSavingTimeTransition'
    'body': 'CFTimeZoneGetNextDaylightSavingTimeTransition(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})'
  'CFTimeZoneGetSecondsFromGMT':
    'prefix': 'CFTimeZoneGetSecondsFromGMT'
    'body': 'CFTimeZoneGetSecondsFromGMT(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})'
  'CFTimeZoneGetTypeID':
    'prefix': 'CFTimeZoneGetTypeID'
    'body': 'CFTimeZoneGetTypeID()'
  'CFTimeZoneIsDaylightSavingTime':
    'prefix': 'CFTimeZoneIsDaylightSavingTime'
    'body': 'CFTimeZoneIsDaylightSavingTime(${1:CFTimeZoneRef tz}, ${2:CFAbsoluteTime at})'
  'CFTimeZoneResetSystem':
    'prefix': 'CFTimeZoneResetSystem'
    'body': 'CFTimeZoneResetSystem()'
  'CFTimeZoneSetAbbreviationDictionary':
    'prefix': 'CFTimeZoneSetAbbreviationDictionary'
    'body': 'CFTimeZoneSetAbbreviationDictionary(${1:CFDictionaryRef dict})'
  'CFTimeZoneSetDefault':
    'prefix': 'CFTimeZoneSetDefault'
    'body': 'CFTimeZoneSetDefault(${1:CFTimeZoneRef tz})'
  'CFTreeAppendChild':
    'prefix': 'CFTreeAppendChild'
    'body': 'CFTreeAppendChild(${1:CFTreeRef tree}, ${2:CFTreeRef newChild})'
  'CFTreeApplyFunctionToChildren':
    'prefix': 'CFTreeApplyFunctionToChildren'
    'body': 'CFTreeApplyFunctionToChildren(${1:CFTreeRef tree}, ${2:CFTreeApplierFunction applier}, ${3:void* context})'
  'CFTreeCreate':
    'prefix': 'CFTreeCreate'
    'body': 'CFTreeCreate(${1:CFAllocatorRef allocator}, ${2:CFTreeContext* context})'
  'CFTreeFindRoot':
    'prefix': 'CFTreeFindRoot'
    'body': 'CFTreeFindRoot(${1:CFTreeRef tree})'
  'CFTreeGetChildAtIndex':
    'prefix': 'CFTreeGetChildAtIndex'
    'body': 'CFTreeGetChildAtIndex(${1:CFTreeRef tree}, ${2:CFIndex idx})'
  'CFTreeGetChildCount':
    'prefix': 'CFTreeGetChildCount'
    'body': 'CFTreeGetChildCount(${1:CFTreeRef tree})'
  'CFTreeGetChildren':
    'prefix': 'CFTreeGetChildren'
    'body': 'CFTreeGetChildren(${1:CFTreeRef tree}, ${2:CFTreeRef* children})'
  'CFTreeGetContext':
    'prefix': 'CFTreeGetContext'
    'body': 'CFTreeGetContext(${1:CFTreeRef tree}, ${2:CFTreeContext* context})'
  'CFTreeGetFirstChild':
    'prefix': 'CFTreeGetFirstChild'
    'body': 'CFTreeGetFirstChild(${1:CFTreeRef tree})'
  'CFTreeGetNextSibling':
    'prefix': 'CFTreeGetNextSibling'
    'body': 'CFTreeGetNextSibling(${1:CFTreeRef tree})'
  'CFTreeGetParent':
    'prefix': 'CFTreeGetParent'
    'body': 'CFTreeGetParent(${1:CFTreeRef tree})'
  'CFTreeGetTypeID':
    'prefix': 'CFTreeGetTypeID'
    'body': 'CFTreeGetTypeID()'
  'CFTreeInsertSibling':
    'prefix': 'CFTreeInsertSibling'
    'body': 'CFTreeInsertSibling(${1:CFTreeRef tree}, ${2:CFTreeRef newSibling})'
  'CFTreePrependChild':
    'prefix': 'CFTreePrependChild'
    'body': 'CFTreePrependChild(${1:CFTreeRef tree}, ${2:CFTreeRef newChild})'
  'CFTreeRemove':
    'prefix': 'CFTreeRemove'
    'body': 'CFTreeRemove(${1:CFTreeRef tree})'
  'CFTreeRemoveAllChildren':
    'prefix': 'CFTreeRemoveAllChildren'
    'body': 'CFTreeRemoveAllChildren(${1:CFTreeRef tree})'
  'CFTreeSetContext':
    'prefix': 'CFTreeSetContext'
    'body': 'CFTreeSetContext(${1:CFTreeRef tree}, ${2:CFTreeContext* context})'
  'CFTreeSortChildren':
    'prefix': 'CFTreeSortChildren'
    'body': 'CFTreeSortChildren(${1:CFTreeRef tree}, ${2:CFComparatorFunction comparator}, ${3:void* context})'
  'CFURLCanBeDecomposed':
    'prefix': 'CFURLCanBeDecomposed'
    'body': 'CFURLCanBeDecomposed(${1:CFURLRef anURL})'
  'CFURLClearResourcePropertyCache':
    'prefix': 'CFURLClearResourcePropertyCache'
    'body': 'CFURLClearResourcePropertyCache(${1:CFURLRef url})'
  'CFURLClearResourcePropertyCacheForKey':
    'prefix': 'CFURLClearResourcePropertyCacheForKey'
    'body': 'CFURLClearResourcePropertyCacheForKey(${1:CFURLRef url}, ${2:CFStringRef key})'
  'CFURLCopyAbsoluteURL':
    'prefix': 'CFURLCopyAbsoluteURL'
    'body': 'CFURLCopyAbsoluteURL(${1:CFURLRef relativeURL})'
  'CFURLCopyFileSystemPath':
    'prefix': 'CFURLCopyFileSystemPath'
    'body': 'CFURLCopyFileSystemPath(${1:CFURLRef anURL}, ${2:CFURLPathStyle pathStyle})'
  'CFURLCopyFragment':
    'prefix': 'CFURLCopyFragment'
    'body': 'CFURLCopyFragment(${1:CFURLRef anURL}, ${2:CFStringRef charactersToLeaveEscaped})'
  'CFURLCopyHostName':
    'prefix': 'CFURLCopyHostName'
    'body': 'CFURLCopyHostName(${1:CFURLRef anURL})'
  'CFURLCopyLastPathComponent':
    'prefix': 'CFURLCopyLastPathComponent'
    'body': 'CFURLCopyLastPathComponent(${1:CFURLRef url})'
  'CFURLCopyNetLocation':
    'prefix': 'CFURLCopyNetLocation'
    'body': 'CFURLCopyNetLocation(${1:CFURLRef anURL})'
  'CFURLCopyParameterString':
    'prefix': 'CFURLCopyParameterString'
    'body': 'CFURLCopyParameterString(${1:CFURLRef anURL}, ${2:CFStringRef charactersToLeaveEscaped})'
  'CFURLCopyPassword':
    'prefix': 'CFURLCopyPassword'
    'body': 'CFURLCopyPassword(${1:CFURLRef anURL})'
  'CFURLCopyPath':
    'prefix': 'CFURLCopyPath'
    'body': 'CFURLCopyPath(${1:CFURLRef anURL})'
  'CFURLCopyPathExtension':
    'prefix': 'CFURLCopyPathExtension'
    'body': 'CFURLCopyPathExtension(${1:CFURLRef url})'
  'CFURLCopyQueryString':
    'prefix': 'CFURLCopyQueryString'
    'body': 'CFURLCopyQueryString(${1:CFURLRef anURL}, ${2:CFStringRef charactersToLeaveEscaped})'
  'CFURLCopyResourcePropertiesForKeys':
    'prefix': 'CFURLCopyResourcePropertiesForKeys'
    'body': 'CFURLCopyResourcePropertiesForKeys(${1:CFURLRef url}, ${2:CFArrayRef keys}, ${3:CFErrorRef* error})'
  'CFURLCopyResourcePropertyForKey':
    'prefix': 'CFURLCopyResourcePropertyForKey'
    'body': 'CFURLCopyResourcePropertyForKey(${1:CFURLRef url}, ${2:CFStringRef key}, ${3:void* propertyValueTypeRefPtr}, ${4:CFErrorRef* error})'
  'CFURLCopyResourceSpecifier':
    'prefix': 'CFURLCopyResourceSpecifier'
    'body': 'CFURLCopyResourceSpecifier(${1:CFURLRef anURL})'
  'CFURLCopyScheme':
    'prefix': 'CFURLCopyScheme'
    'body': 'CFURLCopyScheme(${1:CFURLRef anURL})'
  'CFURLCopyStrictPath':
    'prefix': 'CFURLCopyStrictPath'
    'body': 'CFURLCopyStrictPath(${1:CFURLRef anURL}, ${2:Boolean* isAbsolute})'
  'CFURLCopyUserName':
    'prefix': 'CFURLCopyUserName'
    'body': 'CFURLCopyUserName(${1:CFURLRef anURL})'
  'CFURLCreateAbsoluteURLWithBytes':
    'prefix': 'CFURLCreateAbsoluteURLWithBytes'
    'body': 'CFURLCreateAbsoluteURLWithBytes(${1:CFAllocatorRef alloc}, ${2:UInt8* relativeURLBytes}, ${3:CFIndex length}, ${4:CFStringEncoding encoding}, ${5:CFURLRef baseURL}, ${6:Boolean useCompatibilityMode})'
  'CFURLCreateBookmarkData':
    'prefix': 'CFURLCreateBookmarkData'
    'body': 'CFURLCreateBookmarkData(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFURLBookmarkCreationOptions options}, ${4:CFArrayRef resourcePropertiesToInclude}, ${5:CFURLRef relativeToURL}, ${6:CFErrorRef* error})'
  'CFURLCreateBookmarkDataFromFile':
    'prefix': 'CFURLCreateBookmarkDataFromFile'
    'body': 'CFURLCreateBookmarkDataFromFile(${1:CFAllocatorRef allocator}, ${2:CFURLRef fileURL}, ${3:CFErrorRef* errorRef})'
  'CFURLCreateByResolvingBookmarkData':
    'prefix': 'CFURLCreateByResolvingBookmarkData'
    'body': 'CFURLCreateByResolvingBookmarkData(${1:CFAllocatorRef allocator}, ${2:CFDataRef bookmark}, ${3:CFURLBookmarkResolutionOptions options}, ${4:CFURLRef relativeToURL}, ${5:CFArrayRef resourcePropertiesToInclude}, ${6:Boolean* isStale}, ${7:CFErrorRef* error})'
  'CFURLCreateCopyAppendingPathComponent':
    'prefix': 'CFURLCreateCopyAppendingPathComponent'
    'body': 'CFURLCreateCopyAppendingPathComponent(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFStringRef pathComponent}, ${4:Boolean isDirectory})'
  'CFURLCreateCopyAppendingPathExtension':
    'prefix': 'CFURLCreateCopyAppendingPathExtension'
    'body': 'CFURLCreateCopyAppendingPathExtension(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFStringRef extension})'
  'CFURLCreateCopyDeletingLastPathComponent':
    'prefix': 'CFURLCreateCopyDeletingLastPathComponent'
    'body': 'CFURLCreateCopyDeletingLastPathComponent(${1:CFAllocatorRef allocator}, ${2:CFURLRef url})'
  'CFURLCreateCopyDeletingPathExtension':
    'prefix': 'CFURLCreateCopyDeletingPathExtension'
    'body': 'CFURLCreateCopyDeletingPathExtension(${1:CFAllocatorRef allocator}, ${2:CFURLRef url})'
  'CFURLCreateData':
    'prefix': 'CFURLCreateData'
    'body': 'CFURLCreateData(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFStringEncoding encoding}, ${4:Boolean escapeWhitespace})'
  'CFURLCreateDataAndPropertiesFromResource':
    'prefix': 'CFURLCreateDataAndPropertiesFromResource'
    'body': 'CFURLCreateDataAndPropertiesFromResource(${1:CFAllocatorRef alloc}, ${2:CFURLRef url}, ${3:CFDataRef* resourceData}, ${4:CFDictionaryRef* properties}, ${5:CFArrayRef desiredProperties}, ${6:SInt32* errorCode})'
  'CFURLCreateFilePathURL':
    'prefix': 'CFURLCreateFilePathURL'
    'body': 'CFURLCreateFilePathURL(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFErrorRef* error})'
  'CFURLCreateFileReferenceURL':
    'prefix': 'CFURLCreateFileReferenceURL'
    'body': 'CFURLCreateFileReferenceURL(${1:CFAllocatorRef allocator}, ${2:CFURLRef url}, ${3:CFErrorRef* error})'
  'CFURLCreateFromFSRef':
    'prefix': 'CFURLCreateFromFSRef'
    'body': 'CFURLCreateFromFSRef(${1:CFAllocatorRef allocator}, ${2:struct FSRef* fsRef})'
  'CFURLCreateFromFileSystemRepresentation':
    'prefix': 'CFURLCreateFromFileSystemRepresentation'
    'body': 'CFURLCreateFromFileSystemRepresentation(${1:CFAllocatorRef allocator}, ${2:UInt8* buffer}, ${3:CFIndex bufLen}, ${4:Boolean isDirectory})'
  'CFURLCreateFromFileSystemRepresentationRelativeToBase':
    'prefix': 'CFURLCreateFromFileSystemRepresentationRelativeToBase'
    'body': 'CFURLCreateFromFileSystemRepresentationRelativeToBase(${1:CFAllocatorRef allocator}, ${2:UInt8* buffer}, ${3:CFIndex bufLen}, ${4:Boolean isDirectory}, ${5:CFURLRef baseURL})'
  'CFURLCreatePropertyFromResource':
    'prefix': 'CFURLCreatePropertyFromResource'
    'body': 'CFURLCreatePropertyFromResource(${1:CFAllocatorRef alloc}, ${2:CFURLRef url}, ${3:CFStringRef property}, ${4:SInt32* errorCode})'
  'CFURLCreateResourcePropertiesForKeysFromBookmarkData':
    'prefix': 'CFURLCreateResourcePropertiesForKeysFromBookmarkData'
    'body': 'CFURLCreateResourcePropertiesForKeysFromBookmarkData(${1:CFAllocatorRef allocator}, ${2:CFArrayRef resourcePropertiesToReturn}, ${3:CFDataRef bookmark})'
  'CFURLCreateResourcePropertyForKeyFromBookmarkData':
    'prefix': 'CFURLCreateResourcePropertyForKeyFromBookmarkData'
    'body': 'CFURLCreateResourcePropertyForKeyFromBookmarkData(${1:CFAllocatorRef allocator}, ${2:CFStringRef resourcePropertyKey}, ${3:CFDataRef bookmark})'
  'CFURLCreateStringByAddingPercentEscapes':
    'prefix': 'CFURLCreateStringByAddingPercentEscapes'
    'body': 'CFURLCreateStringByAddingPercentEscapes(${1:CFAllocatorRef allocator}, ${2:CFStringRef originalString}, ${3:CFStringRef charactersToLeaveUnescaped}, ${4:CFStringRef legalURLCharactersToBeEscaped}, ${5:CFStringEncoding encoding})'
  'CFURLCreateStringByReplacingPercentEscapes':
    'prefix': 'CFURLCreateStringByReplacingPercentEscapes'
    'body': 'CFURLCreateStringByReplacingPercentEscapes(${1:CFAllocatorRef allocator}, ${2:CFStringRef originalString}, ${3:CFStringRef charactersToLeaveEscaped})'
  'CFURLCreateStringByReplacingPercentEscapesUsingEncoding':
    'prefix': 'CFURLCreateStringByReplacingPercentEscapesUsingEncoding'
    'body': 'CFURLCreateStringByReplacingPercentEscapesUsingEncoding(${1:CFAllocatorRef allocator}, ${2:CFStringRef origString}, ${3:CFStringRef charsToLeaveEscaped}, ${4:CFStringEncoding encoding})'
  'CFURLCreateWithBytes':
    'prefix': 'CFURLCreateWithBytes'
    'body': 'CFURLCreateWithBytes(${1:CFAllocatorRef allocator}, ${2:UInt8* URLBytes}, ${3:CFIndex length}, ${4:CFStringEncoding encoding}, ${5:CFURLRef baseURL})'
  'CFURLCreateWithFileSystemPath':
    'prefix': 'CFURLCreateWithFileSystemPath'
    'body': 'CFURLCreateWithFileSystemPath(${1:CFAllocatorRef allocator}, ${2:CFStringRef filePath}, ${3:CFURLPathStyle pathStyle}, ${4:Boolean isDirectory})'
  'CFURLCreateWithFileSystemPathRelativeToBase':
    'prefix': 'CFURLCreateWithFileSystemPathRelativeToBase'
    'body': 'CFURLCreateWithFileSystemPathRelativeToBase(${1:CFAllocatorRef allocator}, ${2:CFStringRef filePath}, ${3:CFURLPathStyle pathStyle}, ${4:Boolean isDirectory}, ${5:CFURLRef baseURL})'
  'CFURLCreateWithString':
    'prefix': 'CFURLCreateWithString'
    'body': 'CFURLCreateWithString(${1:CFAllocatorRef allocator}, ${2:CFStringRef URLString}, ${3:CFURLRef baseURL})'
  'CFURLDestroyResource':
    'prefix': 'CFURLDestroyResource'
    'body': 'CFURLDestroyResource(${1:CFURLRef url}, ${2:SInt32* errorCode})'
  'CFURLEnumeratorCreateForDirectoryURL':
    'prefix': 'CFURLEnumeratorCreateForDirectoryURL'
    'body': 'CFURLEnumeratorCreateForDirectoryURL(${1:CFAllocatorRef alloc}, ${2:CFURLRef directoryURL}, ${3:CFURLEnumeratorOptions option}, ${4:CFArrayRef propertyKeys})'
  'CFURLEnumeratorCreateForMountedVolumes':
    'prefix': 'CFURLEnumeratorCreateForMountedVolumes'
    'body': 'CFURLEnumeratorCreateForMountedVolumes(${1:CFAllocatorRef alloc}, ${2:CFURLEnumeratorOptions option}, ${3:CFArrayRef propertyKeys})'
  'CFURLEnumeratorGetDescendentLevel':
    'prefix': 'CFURLEnumeratorGetDescendentLevel'
    'body': 'CFURLEnumeratorGetDescendentLevel(${1:CFURLEnumeratorRef enumerator})'
  'CFURLEnumeratorGetNextURL':
    'prefix': 'CFURLEnumeratorGetNextURL'
    'body': 'CFURLEnumeratorGetNextURL(${1:CFURLEnumeratorRef enumerator}, ${2:CFURLRef* url}, ${3:CFErrorRef* error})'
  'CFURLEnumeratorGetSourceDidChange':
    'prefix': 'CFURLEnumeratorGetSourceDidChange'
    'body': 'CFURLEnumeratorGetSourceDidChange(${1:CFURLEnumeratorRef enumerator})'
  'CFURLEnumeratorGetTypeID':
    'prefix': 'CFURLEnumeratorGetTypeID'
    'body': 'CFURLEnumeratorGetTypeID()'
  'CFURLEnumeratorSkipDescendents':
    'prefix': 'CFURLEnumeratorSkipDescendents'
    'body': 'CFURLEnumeratorSkipDescendents(${1:CFURLEnumeratorRef enumerator})'
  'CFURLGetBaseURL':
    'prefix': 'CFURLGetBaseURL'
    'body': 'CFURLGetBaseURL(${1:CFURLRef anURL})'
  'CFURLGetByteRangeForComponent':
    'prefix': 'CFURLGetByteRangeForComponent'
    'body': 'CFURLGetByteRangeForComponent(${1:CFURLRef url}, ${2:CFURLComponentType component}, ${3:CFRange* rangeIncludingSeparators})'
  'CFURLGetBytes':
    'prefix': 'CFURLGetBytes'
    'body': 'CFURLGetBytes(${1:CFURLRef url}, ${2:UInt8* buffer}, ${3:CFIndex bufferLength})'
  'CFURLGetFSRef':
    'prefix': 'CFURLGetFSRef'
    'body': 'CFURLGetFSRef(${1:CFURLRef url}, ${2:struct FSRef* fsRef})'
  'CFURLGetFileSystemRepresentation':
    'prefix': 'CFURLGetFileSystemRepresentation'
    'body': 'CFURLGetFileSystemRepresentation(${1:CFURLRef url}, ${2:Boolean resolveAgainstBase}, ${3:UInt8* buffer}, ${4:CFIndex maxBufLen})'
  'CFURLGetPortNumber':
    'prefix': 'CFURLGetPortNumber'
    'body': 'CFURLGetPortNumber(${1:CFURLRef anURL})'
  'CFURLGetString':
    'prefix': 'CFURLGetString'
    'body': 'CFURLGetString(${1:CFURLRef anURL})'
  'CFURLGetTypeID':
    'prefix': 'CFURLGetTypeID'
    'body': 'CFURLGetTypeID()'
  'CFURLHasDirectoryPath':
    'prefix': 'CFURLHasDirectoryPath'
    'body': 'CFURLHasDirectoryPath(${1:CFURLRef anURL})'
  'CFURLIsFileReferenceURL':
    'prefix': 'CFURLIsFileReferenceURL'
    'body': 'CFURLIsFileReferenceURL(${1:CFURLRef url})'
  'CFURLResourceIsReachable':
    'prefix': 'CFURLResourceIsReachable'
    'body': 'CFURLResourceIsReachable(${1:CFURLRef url}, ${2:CFErrorRef* error})'
  'CFURLSetResourcePropertiesForKeys':
    'prefix': 'CFURLSetResourcePropertiesForKeys'
    'body': 'CFURLSetResourcePropertiesForKeys(${1:CFURLRef url}, ${2:CFDictionaryRef keyedPropertyValues}, ${3:CFErrorRef* error})'
  'CFURLSetResourcePropertyForKey':
    'prefix': 'CFURLSetResourcePropertyForKey'
    'body': 'CFURLSetResourcePropertyForKey(${1:CFURLRef url}, ${2:CFStringRef key}, ${3:CFTypeRef propertyValue}, ${4:CFErrorRef* error})'
  'CFURLSetTemporaryResourcePropertyForKey':
    'prefix': 'CFURLSetTemporaryResourcePropertyForKey'
    'body': 'CFURLSetTemporaryResourcePropertyForKey(${1:CFURLRef url}, ${2:CFStringRef key}, ${3:CFTypeRef propertyValue})'
  'CFURLWriteBookmarkDataToFile':
    'prefix': 'CFURLWriteBookmarkDataToFile'
    'body': 'CFURLWriteBookmarkDataToFile(${1:CFDataRef bookmarkRef}, ${2:CFURLRef fileURL}, ${3:CFURLBookmarkFileCreationOptions options}, ${4:CFErrorRef* errorRef})'
  'CFURLWriteDataAndPropertiesToResource':
    'prefix': 'CFURLWriteDataAndPropertiesToResource'
    'body': 'CFURLWriteDataAndPropertiesToResource(${1:CFURLRef url}, ${2:CFDataRef dataToWrite}, ${3:CFDictionaryRef propertiesToWrite}, ${4:SInt32* errorCode})'
  'CFUUIDCreate':
    'prefix': 'CFUUIDCreate'
    'body': 'CFUUIDCreate(${1:CFAllocatorRef alloc})'
  'CFUUIDCreateFromString':
    'prefix': 'CFUUIDCreateFromString'
    'body': 'CFUUIDCreateFromString(${1:CFAllocatorRef alloc}, ${2:CFStringRef uuidStr})'
  'CFUUIDCreateFromUUIDBytes':
    'prefix': 'CFUUIDCreateFromUUIDBytes'
    'body': 'CFUUIDCreateFromUUIDBytes(${1:CFAllocatorRef alloc}, ${2:CFUUIDBytes bytes})'
  'CFUUIDCreateString':
    'prefix': 'CFUUIDCreateString'
    'body': 'CFUUIDCreateString(${1:CFAllocatorRef alloc}, ${2:CFUUIDRef uuid})'
  'CFUUIDCreateWithBytes':
    'prefix': 'CFUUIDCreateWithBytes'
    'body': 'CFUUIDCreateWithBytes(${1:CFAllocatorRef alloc}, ${2:UInt8 byte0}, ${3:UInt8 byte1}, ${4:UInt8 byte2}, ${5:UInt8 byte3}, ${6:UInt8 byte4}, ${7:UInt8 byte5}, ${8:UInt8 byte6}, ${9:UInt8 byte7}, ${10:UInt8 byte8}, ${11:UInt8 byte9}, ${12:UInt8 byte10}, ${13:UInt8 byte11}, ${14:UInt8 byte12}, ${15:UInt8 byte13}, ${16:UInt8 byte14}, ${17:UInt8 byte15})'
  'CFUUIDGetConstantUUIDWithBytes':
    'prefix': 'CFUUIDGetConstantUUIDWithBytes'
    'body': 'CFUUIDGetConstantUUIDWithBytes(${1:CFAllocatorRef alloc}, ${2:UInt8 byte0}, ${3:UInt8 byte1}, ${4:UInt8 byte2}, ${5:UInt8 byte3}, ${6:UInt8 byte4}, ${7:UInt8 byte5}, ${8:UInt8 byte6}, ${9:UInt8 byte7}, ${10:UInt8 byte8}, ${11:UInt8 byte9}, ${12:UInt8 byte10}, ${13:UInt8 byte11}, ${14:UInt8 byte12}, ${15:UInt8 byte13}, ${16:UInt8 byte14}, ${17:UInt8 byte15})'
  'CFUUIDGetTypeID':
    'prefix': 'CFUUIDGetTypeID'
    'body': 'CFUUIDGetTypeID()'
  'CFUUIDGetUUIDBytes':
    'prefix': 'CFUUIDGetUUIDBytes'
    'body': 'CFUUIDGetUUIDBytes(${1:CFUUIDRef uuid})'
  'CFWriteStreamCanAcceptBytes':
    'prefix': 'CFWriteStreamCanAcceptBytes'
    'body': 'CFWriteStreamCanAcceptBytes(${1:CFWriteStreamRef stream})'
  'CFWriteStreamClose':
    'prefix': 'CFWriteStreamClose'
    'body': 'CFWriteStreamClose(${1:CFWriteStreamRef stream})'
  'CFWriteStreamCopyDispatchQueue':
    'prefix': 'CFWriteStreamCopyDispatchQueue'
    'body': 'CFWriteStreamCopyDispatchQueue(${1:CFWriteStreamRef stream})'
  'CFWriteStreamCopyError':
    'prefix': 'CFWriteStreamCopyError'
    'body': 'CFWriteStreamCopyError(${1:CFWriteStreamRef stream})'
  'CFWriteStreamCopyProperty':
    'prefix': 'CFWriteStreamCopyProperty'
    'body': 'CFWriteStreamCopyProperty(${1:CFWriteStreamRef stream}, ${2:CFStringRef propertyName})'
  'CFWriteStreamCreateWithAllocatedBuffers':
    'prefix': 'CFWriteStreamCreateWithAllocatedBuffers'
    'body': 'CFWriteStreamCreateWithAllocatedBuffers(${1:CFAllocatorRef alloc}, ${2:CFAllocatorRef bufferAllocator})'
  'CFWriteStreamCreateWithBuffer':
    'prefix': 'CFWriteStreamCreateWithBuffer'
    'body': 'CFWriteStreamCreateWithBuffer(${1:CFAllocatorRef alloc}, ${2:UInt8* buffer}, ${3:CFIndex bufferCapacity})'
  'CFWriteStreamCreateWithFile':
    'prefix': 'CFWriteStreamCreateWithFile'
    'body': 'CFWriteStreamCreateWithFile(${1:CFAllocatorRef alloc}, ${2:CFURLRef fileURL})'
  'CFWriteStreamGetError':
    'prefix': 'CFWriteStreamGetError'
    'body': 'CFWriteStreamGetError(${1:CFWriteStreamRef stream})'
  'CFWriteStreamGetStatus':
    'prefix': 'CFWriteStreamGetStatus'
    'body': 'CFWriteStreamGetStatus(${1:CFWriteStreamRef stream})'
  'CFWriteStreamGetTypeID':
    'prefix': 'CFWriteStreamGetTypeID'
    'body': 'CFWriteStreamGetTypeID()'
  'CFWriteStreamOpen':
    'prefix': 'CFWriteStreamOpen'
    'body': 'CFWriteStreamOpen(${1:CFWriteStreamRef stream})'
  'CFWriteStreamScheduleWithRunLoop':
    'prefix': 'CFWriteStreamScheduleWithRunLoop'
    'body': 'CFWriteStreamScheduleWithRunLoop(${1:CFWriteStreamRef stream}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})'
  'CFWriteStreamSetClient':
    'prefix': 'CFWriteStreamSetClient'
    'body': 'CFWriteStreamSetClient(${1:CFWriteStreamRef stream}, ${2:CFOptionFlags streamEvents}, ${3:CFWriteStreamClientCallBack clientCB}, ${4:CFStreamClientContext* clientContext})'
  'CFWriteStreamSetDispatchQueue':
    'prefix': 'CFWriteStreamSetDispatchQueue'
    'body': 'CFWriteStreamSetDispatchQueue(${1:CFWriteStreamRef stream}, ${2:dispatch_queue_t q})'
  'CFWriteStreamSetProperty':
    'prefix': 'CFWriteStreamSetProperty'
    'body': 'CFWriteStreamSetProperty(${1:CFWriteStreamRef stream}, ${2:CFStringRef propertyName}, ${3:CFTypeRef propertyValue})'
  'CFWriteStreamUnscheduleFromRunLoop':
    'prefix': 'CFWriteStreamUnscheduleFromRunLoop'
    'body': 'CFWriteStreamUnscheduleFromRunLoop(${1:CFWriteStreamRef stream}, ${2:CFRunLoopRef runLoop}, ${3:CFStringRef runLoopMode})'
  'CFWriteStreamWrite':
    'prefix': 'CFWriteStreamWrite'
    'body': 'CFWriteStreamWrite(${1:CFWriteStreamRef stream}, ${2:UInt8* buffer}, ${3:CFIndex bufferLength})'
