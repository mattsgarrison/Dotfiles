{"mode":"editor","version":"0.69.0","windowDimensions":{"x":768,"y":22,"width":1269,"height":1414},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/mattgarrison/Projects/betterness_project/ios","buffers":[{"text":"class RootController < UIViewController\n  stylesheet :root\n\n  layout :root do\n    @label = subview(UILabel, :label)\n    @long_button = subview(UIButton.rounded_rect, :long_button)\n    @tweeter = subview(MotionAwesome.button(:twitter), :tweet_button)\n    @gear = subview(MotionAwesome.button(:cog), :settings_button)\n  end\n\n  def init\n    super\n    $categories = Categories.new\n    self\n  end\n\n  def viewWillAppear(animated)\n    @quips.filter_quips\n    view.restyle!\n  end\n\n  def viewDidAppear(animated)\n    super\n    unless @intro_shown\n      @panel1 = MYIntroductionPanel.alloc.initWithimage(\"SampleImage1.png\".uiimage, title: \"The 8 Agreements of the Game\",description:\"\")\n      @panel2 = MYIntroductionPanel.alloc.initWithimage(\"a1.png\".uiimage, title: 'Agree to be Honest', description:\"If you are not ready for an honest answer, skip the question.\")\n      @panel3 = MYIntroductionPanel.alloc.initWithimage(\"a2.png\".uiimage ,title: 'Agree to be Compassionate', description:\"Be honest with kindness, do no harm.\")\n      @panel4 = MYIntroductionPanel.alloc.initWithimage(\"a3.png\".uiimage ,title: 'Agree to be Open', description:\"Accept every thing that is said as being true for the one that says it.\")\n      @panel5 = MYIntroductionPanel.alloc.initWithimage(\"a4.png\".uiimage ,title: 'Agree to Listen', description:\"After asking a question, stop talking. Seek to understand before being understood.\")\n      @panel6 = MYIntroductionPanel.alloc.initWithimage(\"a5.png\".uiimage ,title: 'Agree to the Conversation', description:\"When your partner is done talking, explore deeper. Ask questions like \\\"Why\\\" and \\\"How did that make you feel?\\\"\")\n      @panel7 = MYIntroductionPanel.alloc.initWithimage(\"a6.png\".uiimage ,title: 'Agree to Trust', description:\"Don't be offensive or get defensive.\")\n      @panel8 = MYIntroductionPanel.alloc.initWithimage(\"a7.png\".uiimage ,title: 'Agree to Express Gratitude', description:\"After each question, thank your partner.\")\n      @panel9 = MYIntroductionPanel.alloc.initWithimage(\"a8.png\".uiimage ,title: 'Agree to Smile', description:\"Laugh and HAVE FUN!!\")\n      @panels = [@panel1, @panel2, @panel3, @panel4, @panel5, @panel6, @panel7, @panel8, @panel9]\n      @introductionView = MYIntroductionView.alloc.initWithFrame(CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height),panels:@panels)\n      @introductionView.delegate = self;\n      @introductionView.backgroundImage = 'SampleBackground.png'.uiimage\n      @introductionView.showInView(self.view)\n      @intro_shown = true\n    end\n  end\n\n  def layoutDidLoad\n\n    # Title for this view\n    self.title = \"Start 2 Talk\"\n    # Quips engine\n    @quips = Quips.new\n\n    @long_button.accessibilityLabel = 'Next Button'\n    # all button code\n    self.initialize_buttons\n\n    # make navigation use our special button\n    @gear.frame = [[0,0],[28,28]]\n    @nav_bar_settings = UIBarButtonItem.alloc.initWithCustomView(@gear)\n    self.navigationItem.leftBarButtonItem = @nav_bar_settings\n    if TWTweetComposeViewController.canSendTweet\n      @tweeter.frame = [[0,0],[28,28]]\n      @nav_bar_tweet  = UIBarButtonItem.alloc.initWithCustomView(@tweeter)\n      #@button = UIButton.alloc.initWithFrame([0, 0, 28, 28])\n      #@nav_bar_tweet  = UIBarButtonItem.alloc.initWithCustomView(@button)\n      self.navigationItem.rightBarButtonItem = @nav_bar_tweet\n    end\n\n  end\n\n  def initialize_buttons\n    # Use custom button for navigation button and events for stopper button\n    @gear.on(:touch) do\n      @settings = SettingsController.new\n      self.navigationController << @settings\n    end\n\n    if TWTweetComposeViewController.canSendTweet\n      @tweeter.on(:touch) do\n        @twitter_controller = TWTweetComposeViewController.new\n        @twitter_controller.setInitialText(@quips.current_quip)\n        @twitter_controller.addURL(NSURL.URLWithString(\"http://start2talk2.me\"))\n        self.navigationController.presentModalViewController(@twitter_controller, animated:true)\n\n      end\n    end\n    # On touch pull the next line\n    @long_button.on(:touch) do\n      @label.text = @quips.next_line\n      @label.fit_to_size(40)\n    end\n  end\n\n  def introductionDidFinishWithType(finishType)\n    if (finishType == MYFinishTypeSkipButton)\n      #ap \"Did Finish Introduction By Skipping It\"\n    elsif (finishType == MYFinishTypeSwipeOut)\n      #ap \"Did Finish Introduction By Swiping Out\"\n    end\n\n  end\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[51,27],[51,27]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":26,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/betterness_project/ios/app/controllers/root_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3c9052bc616a24ce72f2d78b451537a598a789a7","deserializer":"TextBuffer"},{"text":"class AppDelegate\n  $DOMAIN = \"start2talk2me.herokuapp.com\"\n\n  def application(application, didFinishLaunchingWithOptions:launchOptions)\n    @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)\n    myNavController = RootController.alloc.init\n\n    @window.rootViewController = UINavigationController.alloc.initWithRootViewController(myNavController)\n    @window.rootViewController.wantsFullScreenLayout = true\n    #Splash Screen\n    image_view = UIImageView.alloc.initWithImage('Default'.uiimage) # automatically grabs correct image for phone\n    @window.rootViewController.view << image_view\n    @window.rootViewController.view.bringSubviewToFront(image_view)\n    # normal\n    @window.makeKeyAndVisible\n\n    # fade out splash image\n    image_view.fade_out (duration: 1.0,\n                          delay: 0.2,\n                          options: UIViewAnimationOptionCurveLinear,\n                          opacity: 0) {\n      image_view.removeFromSuperview\n      image_view = nil #little extra cleanup\n    }\n\n\n    true\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":28},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/betterness_project/ios/app/app_delegate.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1e176b356545297ea355739795aa129fc7ffb49e","deserializer":"TextBuffer"},{"text":"class SettingsController < UIViewController\n\n  def loadView\n    super\n\n    @table_view =  @table_view = UITableView.alloc.initWithFrame(CGRectZero, style:UITableViewStyleGrouped)\n    @table_view.frame = self.content_frame\n    @table_view.dataSource = self\n    @table_view.delegate = self\n    @table_view.rowHeight = 40\n    self.view.addSubview @table_view\n  end\n\n  def viewDidLoad\n    view.backgroundColor = UIColor.whiteColor\n  end\n\n  def viewDidUnload\n    @table_view = nil\n  end\n\n  def viewWillDisappear(animated)\n    #rehash the chatoms available depending on current settings\n    #$chatoms.filter($categories.live_list)\n  end\n\n  def numberOfSectionsInTableView(tableView)\n    1\n  end\n\n  def tableView(tableView, numberOfRowsInSection:section)\n    $categories.category_list.length\n  end\n\n  def tableView(tableView, cellForRowAtIndexPath:indexPath)\n    category = $categories.category_list[indexPath.row]\n    cell = CategoryInfoCell.cellForInfo(category, inTableView:tableView)\n    @switch = UISwitch.alloc.initWithFrame([[0, 0], [150, 25]])\n    @switch.addTarget(self, action:'category_switch_is_changed:', forControlEvents:UIControlEventValueChanged)\n    @switch.on = category.in_use\n    cell.accessoryView = @switch\n    cell\n  end\n\n  def tableView(tableView,didSelectRowAtIndexPath:indexPath)\n    tableView.deselectRowAtIndexPath(indexPath, animated:true)\n  end\n\n  def tableView(tableView, titleForHeaderInSection:section)\n    result = nil\n    if (tableView == @table_view && section == 0)\n      result = \"Categories\"\n    end\n    result\n  end\n\n  def tableView(tableView, heightForHeaderInSection:section)\n    if(tableView = @table_view)\n      if(section == 0)\n        result = 30\n      end\n    end\n    result\n  end\n\n  def tableView(tableView, viewForFooterInSection:section)\n    result = nil\n  end\n\n  def tableView(tableView, heightForFooterInSection:section)\n    if(tableView = @table_view)\n      if(section == 0)\n        result = 30\n      end\n    end\n    result\n  end\n\n  def category_switch_is_changed(sender)\n    owner_cell = sender.superview\n    owner_cell_index_path = @table_view.indexPathForCell(owner_cell)\n    category = $categories.category_list[owner_cell_index_path.row]\n\n    category.in_use = sender.on?\n    category.save_preference\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[19,5],[19,5]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":30,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[55,0],[55,2]],"newRange":[[55,0],[55,0]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[35,55],[35,56]],"newRange":[[35,55],[35,55]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[87,0],[88,0]],"newRange":[[87,0],[87,0]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/betterness_project/ios/app/controllers/settings_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"36bfba00da93fdcc953b802ac42255907907bcff","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":26,"softTabs":true,"scrollTop":980,"scrollLeft":0,"displayBuffer":{"id":27,"softWrap":false,"editorWidthInChars":61,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/betterness_project/ios/app/controllers/root_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":30,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":31,"softWrap":false,"editorWidthInChars":80,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/betterness_project/ios/app/controllers/settings_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":28,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":29,"softWrap":false,"editorWidthInChars":77,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/betterness_project/ios/app/app_delegate.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/mattgarrison/Projects/betterness_project/ios/app/controllers/settings_controller.rb","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{}},"fuzzy-finder":{"/Users/mattgarrison/Projects/betterness_project/ios/app/controllers/root_controller.rb":1395169693388,"/Users/mattgarrison/Projects/betterness_project/ios/app/app_delegate.rb":1395169673460,"/Users/mattgarrison/Projects/betterness_project/ios/app/controllers/settings_controller.rb":1395169710422},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":3292781},"tree-view":{"directoryExpansionStates":{"app":{"controllers":{},"models":{}}},"selectedPath":"/Users/mattgarrison/Projects/betterness_project/ios/app/models","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}