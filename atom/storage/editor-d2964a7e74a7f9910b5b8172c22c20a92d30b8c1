{"mode":"editor","version":"0.69.0","windowDimensions":{"x":735,"y":95,"width":1825,"height":1341},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/mattgarrison/Projects/ombud/coaxer","buffers":[{"text":"module ApplicationHelper\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":42},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/ombud/coaxer/Coaxer/app/helpers/application_helper.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"eef3d3adce96afe8b14c19b6135323f47543d979","deserializer":"TextBuffer"},{"text":"class Api::RulesController < ApplicationController\n  before_action :set_api_rule, only: [:show, :edit, :update, :destroy]\n  before_action :is_user_admin?\n  # GET /api/rules\n  # GET /api/rules.json\n  def index\n    @api_rules = Api::Rule.all\n  end\n\n  # GET /api/rules/1\n  # GET /api/rules/1.json\n  def show\n\n  end\n\n  # GET /api/rules/new\n  def new\n    @api_rule = Api::Rule.new\n  end\n\n  # GET /api/rules/1/edit\n  def edit\n  end\n\n  # POST /api/rules\n  # POST /api/rules.json\n  def create\n    #@api_rule = Api::Rule.new(name: api_rule_params.name, description: api_rule_params.description,\n    #  active_at: api_rule_params.active_at, events: api_rule_params)\n    #TODO: events are brought in as a string from the params, while the serializer expects an array\n    # override the initializer and setter to parse the input correctly for this field\n    @api_rule = Api::Rule.new api_rule_params\n    respond_to do |format|\n      if @api_rule.save\n        format.html { redirect_to @api_rule, notice: 'Rule was successfully created.' }\n        format.json { render action: 'show', status: :created, location: @api_rule }\n      else\n        format.html { render action: 'new' }\n        format.json { render json: @api_rule.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # PATCH/PUT /api/rules/1\n  # PATCH/PUT /api/rules/1.json\n  def update\n    respond_to do |format|\n      if @api_rule.update(api_rule_params)\n        format.html { redirect_to @api_rule, notice: 'Rule was successfully updated.' }\n        format.json { head :no_content }\n      else\n        format.html { render action: 'edit' }\n        format.json { render json: @api_rule.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # DELETE /api/rules/1\n  # DELETE /api/rules/1.json\n  def destroy\n    @api_rule.destroy\n    respond_to do |format|\n      format.html { redirect_to api_rules_url }\n      format.json { head :no_content }\n    end\n  end\n\n  private\n    # Use callbacks to share common setup or constraints between actions.\n    def set_api_rule\n      @api_rule = Api::Rule.all.find(params[:id])\n    end\n\n    def is_user_admin?\n      # mocked out method that would tie into an Auth system\n      # would reject/redirect users who were not admins\n      true\n    end\n\n    # Never trust parameters from the scary internet, only allow the white list through.\n    def api_rule_params\n\n      params.require('api_rule').permit(:name, :description,:active_at, :events)\n    end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":46},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/ombud/coaxer/Coaxer/app/controllers/api/rules_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"7655f71225df24f5daeda690c084e78d8a95ef6a","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":42,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":43,"softWrap":false,"editorWidthInChars":133,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/ombud/coaxer/Coaxer/app/helpers/application_helper.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":46,"softTabs":true,"scrollTop":970,"scrollLeft":0,"displayBuffer":{"id":47,"softWrap":false,"editorWidthInChars":133,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/ombud/coaxer/Coaxer/app/controllers/api/rules_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/mattgarrison/Projects/ombud/coaxer/Coaxer/app/controllers/api/rules_controller.rb","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"core:move-up":{"count":28,"name":"core:move-up","lastRun":1394316644204},"core:move-down":{"count":9,"name":"core:move-down","lastRun":1394316640221},"tree-view:expand-directory":{"count":3,"name":"tree-view:expand-directory","lastRun":1394316640458},"tree-view:open-selected-entry":{"count":1,"name":"tree-view:open-selected-entry","lastRun":1394316644508},"core:close":{"count":12,"name":"core:close","lastRun":1394316935345},"command-palette:toggle":{"count":8,"name":"command-palette:toggle","lastRun":1394316821684},"editor:consolidate-selections":{"count":2,"name":"editor:consolidate-selections","lastRun":1394316920505},"application:open-your-keymap":{"count":1,"name":"application:open-your-keymap","lastRun":1394316755668},"keybinding-resolver:toggle":{"count":4,"name":"keybinding-resolver:toggle","lastRun":1394316820313},"core:backspace":{"count":12,"name":"core:backspace","lastRun":1394316826006},"vim-mode:insert-after":{"count":1,"name":"vim-mode:insert-after","lastRun":1394316793594},"pane:show-previous-item":{"count":2,"name":"pane:show-previous-item","lastRun":1394316921731},"settings-view:show-keybindings":{"count":1,"name":"settings-view:show-keybindings","lastRun":1394316832357},"application:new-file":{"count":1,"name":"application:new-file","lastRun":1394316916151},"fuzzy-finder:toggle-file-finder":{"count":1,"name":"fuzzy-finder:toggle-file-finder","lastRun":1394316919807},"application:quit":{"count":1,"name":"application:quit","lastRun":1394316942971}}},"fuzzy-finder":{"/Users/mattgarrison/Projects/ombud/coaxer/Coaxer/app/helpers/application_helper.rb":1394466667611,"/Users/mattgarrison/Projects/ombud/coaxer/Coaxer/app/controllers/api/rules_controller.rb":1394466955885},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":346353},"tree-view":{"directoryExpansionStates":{"Coaxer":{"app":{"controllers":{"api":{}},"helpers":{}}}},"selectedPath":"/Users/mattgarrison/Projects/ombud/coaxer/Coaxer/app/controllers/api/rules_controller.rb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}