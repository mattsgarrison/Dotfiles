{"mode":"editor","version":"0.69.0","windowDimensions":{"x":864,"y":51,"width":1614,"height":878},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios","buffers":[{"text":"module Api\n  class Car\n\n    def initialize\n      @client = AFMotion::Client.build(ENV['api_base_url']) do\n        #session_configuration :default\n        header \"Accept\", \"application/json\"\n        header 'Content-Type', 'application/json'\n        request_serializer :json\n      end\n    end\n\n    # TODO: Add new car/device to the account\n    #       List format for new car: GET    /api/v1/cars/new(.:format)\n    #                Create new car: PUT    /api/v1/cars/:id(.:format)\n    def list_all\n      list_result = nil\n      @client.get(\"#{ENV['api_base_url']}api/v1/cars/\") do |result|\n        ap result\n        if result.success?\n          p \"success\"\n          p result.object\n          list_result = result.object\n        elsif result.operation.response.statusCode.to_s =~ /40\\d/\n          p \"Request failed, HTTP 400 level error\"\n        elsif result.failure?\n          p \"other failure\"\n          p result.error.localizedDescription\n        end\n      end\n      list_result\n    end\n    # TODO: Remove car/device from the account\n    # =>                             DELETE /api/v1/cars/:id(.:format)\n\n    # TODO: List cars on the account (and their GPS location)\n    #                                GET    /api/v1/cars(.:format)\n    # TODO: Get car's school attendance preferences\n    #                                GET    /api/v1/cars/:car_id/preferences/school_attendances(.:format)\n    # TODO: Set car's school attendance preferences\n    #                                GET    /api/v1/cars/:car_id/preferences/school_attendances/new(.:format)\n    # TODO: query alerts on a car\n\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1386,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/car.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"12ca6cf9c49578b76648c989d93822dcd1c05e9c","deserializer":"TextBuffer"},{"text":"describe 'Api::SafetyMode' do\n  before do\n    @safety = Api::SafetyMode.new\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1394,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/safety_mode_spec.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"506fdd48bfce536dd103d2222a5bf89825d2e6e4","deserializer":"TextBuffer"},{"text":"describe \"Api::User\" do\n  extend WebStub::SpecHelpers\n  before do\n    # This does actually work, but I'm stubbing it out to avoid thrashing the API\n    disable_network_access!\n    @login_url = \"#{ENV['api_base_url']}api/v1/login\"\n    @good_credentials = {email: 'john@example.com', password: 'welcome'}\n    @good_name_bad_pw_credentials = {email: 'john@example.com', password: 'error'}\n    @bad_name_credentials = {email: 'error@example.com', password: 'welcome'}\n  end\n\n  it \"should reject bad credentials\" do\n    stub_request(:post, @login_url).\n        to_return(json: { success: false, auth_token: nil,\n                          message: \"Incorrect email or password\"},\n                        status_code: 401)\n    @user = Api::User.new(@bad_name_credentials[:email],\n                         @bad_name_credentials[:password])\n    @user.authenticate do |resp|\n      @resp = resp\n    end\n    wait 0.2 do\n      @resp[:token].should.equal nil\n      @resp[:message].should.equal \"Incorrect email or password\"\n      @resp[:status].should.equal 401\n    end\n  end\n\n  it \"should reject good usernames with bad passwords\" do\n    stub_request(:post, @login_url).\n        to_return(json: { success: false, auth_token: nil,\n                          message: \"Incorrect email or password\"},\n                        status_code: 401)\n    @user = Api::User.new(@good_name_bad_pw_credentials[:email],\n                         @good_name_bad_pw_credentials[:password])\n    @user.authenticate do |resp|\n      @resp = resp\n    end\n    wait 0.2 do\n      @resp[:token].should.equal nil\n      @resp[:message].should.equal \"Incorrect email or password\"\n      @resp[:status].should.equal 401\n    end\n  end\n\n  it \"should accept good usernames with good passwords\" do\n    stub_request(:post, @login_url).\n        to_return(json: { success: true, auth_token: '12abc34',\n                          user_email: @good_credentials[:email]},\n                        location: '/', status_code: 201)\n    @user = Api::User.new(@good_credentials[:email],\n                         @good_credentials[:password])\n    @user.authenticate do |resp|\n      @resp = resp\n    end\n    wait 0.2 do\n      @resp[:token].should.not.equal nil\n      @resp[:token].should.equal '12abc34'\n      @resp[:message].should.equal 'success'\n      @resp[:status].should.equal 201\n    end\n  end\n\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[43,5],[43,5]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1398,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/user_spec.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ce743a8dda51e4a2939e0c5d2935f5461f2619e9","deserializer":"TextBuffer"},{"text":"describe 'Api::ValetMode' do\n  before do\n    @valet = Api::ValetMode.new\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1402,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/valet_mode.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"db2144c1dcc69a716618a8b2e6e388036240a153","deserializer":"TextBuffer"},{"text":"describe 'Api::Car' do\n  extend WebStub::SpecHelpers\n  before do\n    disable_network_access!\n    @car = Api::Car.new\n    BASE_URL = \"https://localhost:3000/\"\n  end\n\n  it \"is a class\" do\n    @car.should.be.kind_of(Api::Car)\n  end\n\n  # it \"can get a list of cars associated to a user's AuthToken\" do\n  #   stub_request(:get, \"https://#{BASE_URL}/api/v1/cars/\").\n  #       to_return(body: \"[{name: 'Ferrari', gps:{lt: 90.2, ln: 30.1, al: 21.2}}]\",\n  #                 content_type: \"application/json\", delay: 0.3)\n  #   @cars = @car.list_all\n  #   @cars.should.equal \"[{name: 'Ferrari', gps:{lt: 90.2, ln: 30.1, al: 21.2}}]\"\n  # end\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1465},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/car_spec.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"aa0ae419f8dfd4775ef78481c14fb06e45badf96","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":1386,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":1387,"softWrap":false,"editorWidthInChars":100,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/car.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":1465,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":1466,"softWrap":false,"editorWidthInChars":104,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/car_spec.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":1394,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":1395,"softWrap":false,"editorWidthInChars":104,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/safety_mode_spec.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":1398,"softTabs":true,"scrollTop":1045,"scrollLeft":0,"displayBuffer":{"id":1399,"softWrap":false,"editorWidthInChars":104,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/user_spec.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":1402,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":1403,"softWrap":false,"editorWidthInChars":104,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/valet_mode.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/user_spec.rb","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"core:copy":{"count":154,"name":"core:copy","lastRun":1395336197376},"show-in-system:show":{"count":5,"name":"show-in-system:show","lastRun":1395256737959},"tree-view:add":{"count":9,"name":"tree-view:add","lastRun":1395348010678},"core:backspace":{"count":2907,"name":"core:backspace","lastRun":1395348033215},"editor:newline":{"count":596,"name":"editor:newline","lastRun":1395348037468},"core:save":{"count":969,"name":"core:save","lastRun":1395348038300},"command-palette:toggle":{"count":6,"name":"command-palette:toggle","lastRun":1395173231411},"pane:split-down":{"count":4,"name":"pane:split-down","lastRun":1395173232861},"core:move-up":{"count":838,"name":"core:move-up","lastRun":1395336181750},"snippets:next-tab-stop":{"count":324,"name":"snippets:next-tab-stop","lastRun":1395334726996},"snippets:expand":{"count":324,"name":"snippets:expand","lastRun":1395334726996},"editor:indent":{"count":322,"name":"editor:indent","lastRun":1395334726997},"core:move-down":{"count":1123,"name":"core:move-down","lastRun":1395336166359},"core:move-right":{"count":636,"name":"core:move-right","lastRun":1395335004917},"editor:move-to-end-of-screen-line":{"count":222,"name":"editor:move-to-end-of-screen-line","lastRun":1395335744831},"editor:move-to-first-character-of-line":{"count":165,"name":"editor:move-to-first-character-of-line","lastRun":1395335181744},"core:move-left":{"count":734,"name":"core:move-left","lastRun":1395336181952},"editor:move-to-end-of-word":{"count":38,"name":"editor:move-to-end-of-word","lastRun":1395334517248},"core:select-right":{"count":340,"name":"core:select-right","lastRun":1395334833049},"editor:select-to-first-character-of-line":{"count":166,"name":"editor:select-to-first-character-of-line","lastRun":1395334752723},"core:paste":{"count":255,"name":"core:paste","lastRun":1395336199108},"editor:move-to-beginning-of-word":{"count":143,"name":"editor:move-to-beginning-of-word","lastRun":1395334476062},"window:increase-font-size":{"count":3,"name":"window:increase-font-size","lastRun":1395078691620},"core:select-up":{"count":164,"name":"core:select-up","lastRun":1395334724272},"core:close":{"count":63,"name":"core:close","lastRun":1395678276705},"core:select-down":{"count":91,"name":"core:select-down","lastRun":1395334755277},"editor:select-to-end-of-line":{"count":91,"name":"editor:select-to-end-of-line","lastRun":1395334755659},"tree-view:move":{"count":3,"name":"tree-view:move","lastRun":1395082632142},"tree-view:remove":{"count":4,"name":"tree-view:remove","lastRun":1395240626496},"find-and-replace:select-next":{"count":24,"name":"find-and-replace:select-next","lastRun":1395334833768},"core:select-all":{"count":4,"name":"core:select-all","lastRun":1395244301586},"core:cut":{"count":39,"name":"core:cut","lastRun":1395334712808},"editor:newline-below":{"count":1,"name":"editor:newline-below","lastRun":1395083130163},"core:select-left":{"count":70,"name":"core:select-left","lastRun":1395331914315},"autocomplete:toggle":{"count":13,"name":"autocomplete:toggle","lastRun":1395334533505},"snippets:previous-tab-stop":{"count":56,"name":"snippets:previous-tab-stop","lastRun":1395334684549},"editor:outdent-selected-rows":{"count":56,"name":"editor:outdent-selected-rows","lastRun":1395334684549},"core:move-to-top":{"count":2,"name":"core:move-to-top","lastRun":1395177739594},"editor:select-to-beginning-of-word":{"count":46,"name":"editor:select-to-beginning-of-word","lastRun":1395332369199},"core:undo":{"count":63,"name":"core:undo","lastRun":1395334451729},"fuzzy-finder:toggle-file-finder":{"count":34,"name":"fuzzy-finder:toggle-file-finder","lastRun":1395336156173},"settings-view:open":{"count":1,"name":"settings-view:open","lastRun":1395089478728},"editor:toggle-line-comments":{"count":32,"name":"editor:toggle-line-comments","lastRun":1395335734110},"project-find:show":{"count":7,"name":"project-find:show","lastRun":1395334594052},"core:select-to-top":{"count":1,"name":"core:select-to-top","lastRun":1395155607468},"pane:show-previous-item":{"count":22,"name":"pane:show-previous-item","lastRun":1395334356744},"pane:show-next-item":{"count":22,"name":"pane:show-next-item","lastRun":1395327069606},"find-and-replace:show":{"count":4,"name":"find-and-replace:show","lastRun":1395244202484},"find-and-replace:find-next":{"count":7,"name":"find-and-replace:find-next","lastRun":1395160444920},"editor:select-to-end-of-word":{"count":33,"name":"editor:select-to-end-of-word","lastRun":1395327890274},"editor:consolidate-selections":{"count":4,"name":"editor:consolidate-selections","lastRun":1395326829520},"core:redo":{"count":2,"name":"core:redo","lastRun":1395163389450},"editor:split-selections-into-lines":{"count":1,"name":"editor:split-selections-into-lines","lastRun":1395177449196},"core:move-to-bottom":{"count":3,"name":"core:move-to-bottom","lastRun":1395259091769},"core:select-to-bottom":{"count":1,"name":"core:select-to-bottom","lastRun":1395255819000},"core:delete":{"count":1,"name":"core:delete","lastRun":1395260590554},"application:new-file":{"count":1,"name":"application:new-file","lastRun":1395334159020},"application:new-window":{"count":1,"name":"application:new-window","lastRun":1395334164942},"application:hide":{"count":1,"name":"application:hide","lastRun":1395544673200},"application:quit":{"count":1,"name":"application:quit","lastRun":1395678306338}}},"find-and-replace":{"viewState":{"findHistory":["font_family"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["ApplicationStylesheet","font_family","app_width","standard_button_as_link","HEAD","action"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}},"fuzzy-finder":{"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/car.rb":1395678287080,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/safety_mode_spec.rb":1395678303377,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/user_spec.rb":1395678303944,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/valet_mode.rb":1395678255717,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/car_spec.rb":1395678290132},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":19506},"tree-view":{"directoryExpansionStates":{"app":{"controllers":{},"models":{"api":{}},"services":{},"views":{}},"lib":{},"spec":{"controllers":{},"models":{"api":{}}}},"selectedPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/spec/models/api/user_spec.rb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":224,"width":235}}}