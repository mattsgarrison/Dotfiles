{"mode":"editor","version":1,"windowDimensions":{"x":1225,"y":22,"width":1328,"height":1178},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios","buffers":[{"text":"module Api\n  class Car\n    attr_accessor :client, :auth_token\n\n    def initialize(auth_token)\n      @auth_token = auth_token\n      raise \"No auth_token\" if auth_token.blank?\n      @client = AFMotion::Client.build_shared(ENV['api_base_url']) do\n        header \"Accept\", \"application/json\"\n        header 'Content-Type', 'application/json'\n        header \"X-Auth-Token\", \"#{auth_token}\"\n        #request_serializer :json\n        response_serializer :json\n      end\n    end\n\n    # Shows all cars associated with a user.\n    # car.all { |alerts, errors| ap alerts; ap errors }\n\n    def all(&callback)\n      raise 'No block passed' if callback.nil?\n      all_cars_url = \"api/v1/cars.json\"\n      @client.get(all_cars_url) do |result|\n        if result.success?\n          callback.call(result.object, nil)\n        elsif result.failure?\n          ap \"failure\"\n          ap result\n          callback.call(nil, result.error.localizedDescription)\n        end\n      end\n    end\n\n    def details(car_id, &callback)\n      raise 'No block passed' if callback.nil?\n      raise 'No car id provided' if car_id.blank?\n      #ap car_id.class\n      details_url = \"api/v1/cars/#{car_id}/details\"\n      ap details_url\n      @client.get(details_url) do |result|\n        if result.success?\n          callback.call(result.object, nil)\n        elsif result.failure?\n          ap \"failure\"\n          ap result\n          callback.call(nil, result.error.localizedDescription)\n        end\n      end\n    end\n\n    def update_valet_mode(car_id, status, &callback)\n      # Car is intialized with a user\n      ap \"updating valet mode\"\n      params = {id: car_id, status: status}\n      ap params\n      @client.post(\"api/v1/update_valet_mode.json\", params) do |result|\n        if result.success?\n          ap \"success, signal callback\"\n          ap result.object\n          callback.call(result.object, nil)\n        elsif result.failure?\n          ap \"failure\"\n          ap result.error.localizedDescription\n          callback.call(nil, result.error.localizedDescription)\n        end\n      end\n    end\n\n    # usage example:\n    # car.alerts(2) { |alerts, errors| ap alerts; ap errors }\n    def alerts(car_id, &callback)\n      raise 'No block passed' if callback.nil?\n      alerts_url = \"api/v1/cars/#{car_id}/car_alerts.json\"\n      @client.get(alerts_url) do |result|\n        if result.success?\n          callback.call(result.object, nil)\n        elsif result.failure?\n          callback.call(nil, result.error.localizedDescription)\n        end\n      end\n    end\n\n    # pending https://github.com/swjg-ventures/myautobrain/issues/200\n    # def delete_alert(alert_id, &callback)\n    #\n    # end\n    # pending https://github.com/swjg-ventures/myautobrain/issues/200\n    # def clear_alerts(&callback)\n    #\n    # end\n\n    # TODO: Remove car/device from the account\n    # =>                             DELETE /api/v1/cars/:id(.:format)\n\n    # TODO: List cars on the account (and their GPS location)\n    #                                GET    /api/v1/cars(.:format)\n    # TODO: Get car's school attendance preferences\n    #                                GET    /api/v1/cars/:car_id/preferences/school_attendances(.:format)\n    # TODO: Set car's school attendance preferences\n    #                                GET    /api/v1/cars/:car_id/preferences/school_attendances/new(.:format)\n\n\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[53,42],[53,42]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1044,"goalBufferRange":null},"deserializer":"Marker"},"2":{"id":2,"range":[[53,36],[53,42]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"3":{"id":3,"range":[[53,36],[53,42]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[50,0],[50,0]],"newRange":[[50,0],[66,0]],"oldText":"","newText":"    # Commented out until https://github.com/swjg-ventures/myautobrain/issues/199 is resolved\n    # def update_valet_mode(car_uid, status, &callback)\n    #   # Car is intialized with a user\n    #   params = {uid: car_uid, status: status}\n    #   @client.post(\"api/v1/update_valet_mode.json\", params) do |result|\n    #     if result.success?\n    #       ap \"success, signal callback\"\n    #       ap result.object\n    #       callback.call(result.object)\n    #     elsif result.failure?\n    #       ap \"failure\"\n    #       ap result.error.localizedDescription\n    #       callback.call(nil)\n    #     end\n    #   end\n    # end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[66,0],[83,0]],"newRange":[[66,0],[66,0]],"oldText":"    def update_valet_mode(car_uid, status, &callback)\n      # Car is intialized with a user\n      ap \"updating valet mode\"\n      params = {uid: car_uid, status: status}\n      ap params\n      @client.post(\"api/v1/update_valet_mode.json\", params) do |result|\n        if result.success?\n          ap \"success, signal callback\"\n          ap result.object\n          callback.call(result.object, nil)\n        elsif result.failure?\n          ap \"failure\"\n          ap result.error.localizedDescription\n          callback.call(nil, result.error.localizedDescription)\n        end\n      end\n    end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[51,4],[51,6]],"newRange":[[51,4],[51,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[52,4],[52,6]],"newRange":[[52,4],[52,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[53,4],[53,6]],"newRange":[[53,4],[53,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[54,4],[54,6]],"newRange":[[54,4],[54,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[55,4],[55,6]],"newRange":[[55,4],[55,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[56,4],[56,6]],"newRange":[[56,4],[56,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[57,4],[57,6]],"newRange":[[57,4],[57,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[58,4],[58,6]],"newRange":[[58,4],[58,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,4],[59,6]],"newRange":[[59,4],[59,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[60,4],[60,6]],"newRange":[[60,4],[60,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[61,4],[61,6]],"newRange":[[61,4],[61,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[62,4],[62,6]],"newRange":[[62,4],[62,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[63,4],[63,6]],"newRange":[[63,4],[63,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[64,4],[64,6]],"newRange":[[64,4],[64,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[65,4],[65,6]],"newRange":[[65,4],[65,4]],"oldText":"# ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[50,0],[50,0]],"newRange":[[50,0],[51,0]],"oldText":"","newText":"<<<<<<< HEAD\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[55,0],[55,0]],"newRange":[[55,0],[62,0]],"oldText":"","newText":"=======\n    def update_valet_mode(car_uid, status, &callback)\n      # Car is intialized with a user\n      ap \"updating valet mode\"\n      params = {uid: car_uid, status: status}\n      ap params\n>>>>>>> api_wrapping\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[66,0],[66,0]],"newRange":[[66,0],[67,0]],"oldText":"","newText":"<<<<<<< HEAD\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[72,0],[72,0]],"newRange":[[72,0],[79,0]],"oldText":"","newText":"=======\n          callback.call(result.object, nil)\n        elsif result.failure?\n          ap \"failure\"\n          ap result.error.localizedDescription\n          callback.call(nil, result.error.localizedDescription)\n>>>>>>> api_wrapping\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[50,0],[52,0]],"newRange":[[50,0],[50,0]],"oldText":"<<<<<<< HEAD\n    # Commented out until https://github.com/swjg-ventures/myautobrain/issues/199 is resolved\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[52,0],[56,0]],"newRange":[[52,0],[52,0]],"oldText":"      params = {uid: car_uid, status: status}\n=======\n    def update_valet_mode(car_uid, status, &callback)\n      # Car is intialized with a user\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[55,0],[56,0]],"newRange":[[55,0],[55,0]],"oldText":">>>>>>> api_wrapping\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[59,0],[66,0]],"newRange":[[59,0],[59,0]],"oldText":"<<<<<<< HEAD\n          callback.call(result.object)\n        elsif result.failure?\n          ap \"failure\"\n          ap result.error.localizedDescription\n          callback.call(nil)\n=======\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[64,0],[65,0]],"newRange":[[64,0],[64,0]],"oldText":">>>>>>> api_wrapping\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[53,17],[53,17]]},"newParams":{"range":[[53,16],[53,17]]},"deserializer":"MarkerPatch"},{"oldRange":[[53,16],[53,17]],"newRange":[[53,16],[53,16]],"oldText":"u","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[53,25],[53,25]]},"newParams":{"range":[[53,24],[53,25]]},"deserializer":"MarkerPatch"},{"oldRange":[[53,24],[53,25]],"newRange":[[53,24],[53,24]],"oldText":"u","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[50,31],[50,31]]},"newParams":{"range":[[50,30],[50,31]]},"deserializer":"MarkerPatch"},{"oldRange":[[50,30],[50,31]],"newRange":[[50,30],[50,30]],"oldText":"u","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[50,34],[50,40]],"newRange":[[50,34],[50,34]],"oldText":"status","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[50,34],[50,34]]},"newParams":{"reversed":true,"range":[[50,33],[50,34]]},"deserializer":"MarkerPatch"},{"oldRange":[[50,33],[50,34]],"newRange":[[50,33],[50,33]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[50,33],[50,33]]},"newParams":{"range":[[50,32],[50,33]]},"deserializer":"MarkerPatch"},{"oldRange":[[50,32],[50,33]],"newRange":[[50,32],[50,32]],"oldText":",","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,26],[53,42]],"newRange":[[53,26],[53,26]],"oldText":", status: status","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,26],[53,26]],"newRange":[[53,26],[53,27]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,27],[53,27]],"newRange":[[53,27],[53,28]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,28],[53,28]],"newRange":[[53,28],[53,29]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,29],[53,29]],"newRange":[[53,29],[53,30]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,30],[53,30]],"newRange":[[53,30],[53,31]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,31],[53,31]],"newRange":[[53,31],[53,32]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,32],[53,32]],"newRange":[[53,32],[53,33]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,33],[53,33]],"newRange":[[53,33],[53,34]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,34],[53,34]],"newRange":[[53,34],[53,35]],"oldText":"","newText":":","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,35],[53,35]],"newRange":[[53,35],[53,36]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,36],[53,36]],"newRange":[[53,36],[53,38]],"oldText":"","newText":"''","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"range":[[53,37],[53,37]]},"newParams":{"range":[[53,36],[53,36]]},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[53,36],[53,36]]},"newParams":{"range":[[53,36],[53,37]]},"deserializer":"MarkerPatch"},{"oldRange":[[53,36],[53,37]],"newRange":[[53,36],[53,36]],"oldText":"'","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[53,36],[53,36]]},"newParams":{"range":[[53,36],[53,37]]},"deserializer":"MarkerPatch"},{"oldRange":[[53,36],[53,37]],"newRange":[[53,36],[53,36]],"oldText":"'","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,36],[53,36]],"newRange":[[53,36],[53,38]],"oldText":"","newText":"''","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,37],[53,37]],"newRange":[[53,37],[53,38]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,38],[53,38]],"newRange":[[53,38],[53,39]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[53,39],[53,39]]},"newParams":{"reversed":true,"range":[[53,38],[53,39]]},"deserializer":"MarkerPatch"},{"oldRange":[[53,38],[53,39]],"newRange":[[53,38],[53,38]],"oldText":"n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[53,38],[53,38]]},"newParams":{"range":[[53,37],[53,38]]},"deserializer":"MarkerPatch"},{"oldRange":[[53,37],[53,38]],"newRange":[[53,37],[53,37]],"oldText":"o","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"range":[[53,37],[53,37]]},"newParams":{"range":[[53,36],[53,36]]},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":true,"range":[[53,36],[53,36]]},"newParams":{"reversed":false,"range":[[53,36],[53,37]]},"deserializer":"MarkerPatch"},{"oldRange":[[53,36],[53,37]],"newRange":[[53,36],[53,36]],"oldText":"'","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[53,36],[53,36]]},"newParams":{"range":[[53,36],[53,37]]},"deserializer":"MarkerPatch"},{"oldRange":[[53,36],[53,37]],"newRange":[[53,36],[53,36]],"oldText":"'","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[50,32],[50,32]],"newRange":[[50,32],[50,33]],"oldText":"","newText":",","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[50,33],[50,33]],"newRange":[[50,33],[50,34]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[50,34],[50,34]],"newRange":[[50,34],[50,35]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[50,35],[50,35]],"newRange":[[50,35],[50,36]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[50,36],[50,36]],"newRange":[[50,36],[50,37]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[50,37],[50,37]],"newRange":[[50,37],[50,38]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[50,38],[50,38]],"newRange":[[50,38],[50,39]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[50,39],[50,39]],"newRange":[[50,39],[50,40]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,36],[53,36]],"newRange":[[53,36],[53,37]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,37],[53,37]],"newRange":[[53,37],[53,38]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,38],[53,38]],"newRange":[[53,38],[53,39]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,39],[53,39]],"newRange":[[53,39],[53,40]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,40],[53,40]],"newRange":[[53,40],[53,41]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,41],[53,41]],"newRange":[[53,41],[53,42]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/car.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2d02e4f2c20b02afb18d614a65b9aab465f9af83","deserializer":"TextBuffer"},{"text":"module Api\n  class User\n    attr_accessor  :username, :password, :auth_token, :status, :message, :client, :logged_in_at\n    def initialize(username, password)\n      @username ||= username\n      @password ||= password\n      @api_url = ENV['api_base_url']\n      @client = nil\n    end\n\n    def authenticate(&callback)\n      raise 'No block passed' if callback.nil?\n      params = {user: {email: @username, password: @password}}\n      AFMotion::JSON.post(\"#{@api_url}api/v1/users/login\", params) do |result|\n        #TODO: handle network issues and timeouts\n        if result.success?\n          @logged_in_at = Time.now\n          @auth_token = result.object['auth_token']\n          @message = \"success\"\n          @status = result.operation.response.statusCode\n          @client = AFMotion::Client.build_shared(ENV['api_base_url']) do\n            header \"Accept\", \"application/json\"\n            header 'Content-Type', 'application/json'\n            header \"X-Auth-Token\", result.object['auth_token']\n            # request_serializer :json\n            response_serializer :json\n          end\n          callback.call({token: @auth_token, message: @message, status: @status})\n        elsif result.failure?\n\n          if result.operation.response.nil?\n            @message = result.error.localizedDescription\n            @status = nil\n            callback.call({token: @auth_token, message: @message, status: @status})\n          elsif result.operation.response.statusCode.to_s =~ /40\\d/\n            @message = result.object['message'] || result.error.localizedDescription\n            @status = result.operation.response.statusCode\n            callback.call({token: @auth_token, message: @message, status: @status})\n          else\n            # TODO: find out what this returns for network errors, bad server\n            # responses, etc\n            #App.alert(result.error.localizedDescription)\n            @message = \"Server Error\"\n            @status = result.operation.response.statusCode\n            callback.call({token: @auth_token, message: @message, status: @status})\n          end\n        end\n      end\n    end\n\n    # I don't think this needs to perform a callback\n    def invalidate_session\n      raise 'No session exists' if @auth_token.nil?\n      params = {email: @username, auth_token: @auth_token}\n      AFMotion::JSON.delete(\"#{@api_url}api/v1/users/logout\", params) do |result|\n        if result.success?\n          #ap @auth_token\n          @auth_token = nil\n          @message = result.object[\"success\"]\n          @status  = result.operation.response.statusCode\n          {token: @auth_token, message: @message, status: @status}\n        elsif result.failure?\n          nil\n        end\n      end\n\n    end\n\n    def enable_apple_push_token(&callback)\n      NSLog \"enabling push token for the server\"\n      raise 'No block passed' if callback.nil?\n      raise 'User did not permit push notifications.' if App::Persistence['push_token'].nil?\n      params = {token: App::Persistence['push_token']}\n      add_push_token_url = \"api/v1/users/add_apple_push_token.json\"\n      @client.post(add_push_token_url, params) do |result|\n        if result.success?\n          # success will return  :name, :apple_push_token, :enabled_at\n          {apple_push_token: result.object['apple_push_token'], enabled_at: result.object['apple_push_token'], status: result.operation.response.statusCode}\n        elsif result.failure?\n          if result.operation.response.nil?\n            callback.call(nil)\n          elsif result.operation.response.statusCode.to_s =~ /40\\d/\n            @message = result.object['message'] || result.error.localizedDescription\n            @status = result.operation.response.statusCode\n            callback.call({message: @message, status: @status})\n          else\n            # TODO: find out what this returns for network errors, bad server\n            # responses, etc\n            #App.alert(result.error.localizedDescription)\n            @message = \"Server Error\"\n            @status = result.operation.response.statusCode\n            callback.call({message: @message, status: @status})\n          end\n        end\n      end\n\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1048,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[53,0],[53,0]],"newRange":[[53,0],[54,0]],"oldText":"","newText":"      params = {user_email: @username, auth_token: @auth_token}\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[54,0],[55,0]],"newRange":[[54,0],[54,0]],"oldText":"      params = {email: @username, auth_token: @auth_token}\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[53,0],[53,0]],"newRange":[[53,0],[54,0]],"oldText":"","newText":"      params = {email: @username, auth_token: @auth_token}\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[54,0],[55,0]],"newRange":[[54,0],[54,0]],"oldText":"      params = {user_email: @username, auth_token: @auth_token}\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/user.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"28489eb8078bbe7d3acc5015bf3099344fe5a0bf","deserializer":"TextBuffer"},{"text":"module Api\n  class SafetyMode\n\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1052},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/safety_mode.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"35a91feca6f2f27180184c9c23aec87917d0db79","deserializer":"TextBuffer"},{"text":"# If we want to customize the refresh control https://github.com/rathahin/RHRefreshControl\n# TODO: possibly show which car we're showing alerts for in the tableheaderview\nclass AlertsController < UITableViewController\n  include SugarCube::Timer\n  ALERTS_CELL_ID = \"AlertsCell\"\n\n  def viewDidLoad\n    super\n    # only clear alerts after the user has viewed the alerts controller\n    UIApplication.sharedApplication.applicationIconBadgeNumber = 0;\n    set_reloader\n    @data = Array.new\n\n    refresh_alerts\n\n\n    rmq.stylesheet = AlertsControllerStylesheet\n\n    view.tap do |table|\n      table.delegate = self\n      table.dataSource = self\n      rmq(table).apply_style :table\n    end\n\n    # if @data.size == 0\n    #   empty_view = UIView.alloc.initWithFrame(self.tableView.frame)\n    #   empty_view.backgroundColor = :white.uicolor\n    #   empty_label = UILabel.alloc.initWithFrame(CGRectZero)\n    #   empty_label.text = \"No Alerts\"\n    #   empty_label.sizeToFit\n    #   empty_label.center = CGPointMake(empty_view.frame.size.width / 2, empty_view.frame.size.height / 2)\n    #\n    #   $empty_label = empty_label\n    #   empty_view.addSubview(empty_label)\n    #   self.tableView.tableHeaderView = empty_view\n    # end\n  end\n\n  def set_reloader\n    @refreshControl = UIRefreshControl.alloc.init\n    @refreshControl.tintColor = :black.uicolor\n    @refreshControl.addTarget self, action: :refresh_alerts, forControlEvents:UIControlEventValueChanged\n    self.refreshControl = @refreshControl\n  end\n\n  def refresh_alerts\n\n    log_in do |user, err|\n      p \"Refreshing alerts\"\n      ap user\n      if err.nil?\n        car = Api::Car.new(user.auth_token)\n        #TODO: Verify there is a preferred car id, throw error otherwise\n        car.alerts(App::Persistence['preferred_car_id']) do |alerts, err|\n          if err.nil?\n            #ap alerts\n\n            if alerts.size == 0\n              NSLog \"Alert count was 0\"\n              emptyView = UIView.alloc.initWithFrame(self.tableView.frame)\n              self.tableView.tableHeaderView = emptyView\n            else\n              @data = alerts.map do |alert|\n                {\n                  name: alert['message']\n                }\n              end\n              self.tableView.reloadData\n              self.tableView.tableHeaderView = nil\n            end\n\n          else\n\n            NSLog \"error loading alerts from car API\"\n          end\n        end\n      else\n        NSLog \"AlertsView could not log in.\"\n        #TODO: Show an error to the user\n      end\n    end\n    @refreshControl.endRefreshing\n  end\n\n\n  def tableView(table_view, numberOfRowsInSection: section)\n    @data.length\n  end\n\n  def tableView(table_view, heightForRowAtIndexPath: index_path)\n    rmq.stylesheet.alerts_cell_height\n  end\n\n  def tableView(table_view, cellForRowAtIndexPath: index_path)\n    data_row = @data[index_path.row]\n\n    cell = table_view.dequeueReusableCellWithIdentifier(ALERTS_CELL_ID) || begin\n      rmq.create(AlertsCell, :alerts_cell, reuse_identifier: ALERTS_CELL_ID).get\n    end\n\n    cell.update(data_row)\n    cell\n  end\n\n  # Remove if you are only supporting portrait\n  def supportedInterfaceOrientations\n    UIInterfaceOrientationMaskAll\n  end\n\n  # Remove if you are only supporting portrait\n  def willAnimateRotationToInterfaceOrientation(orientation, duration: duration)\n    rmq.all.reapply_styles\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1072},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/controllers/alerts_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4e7e1620e1b111c53f94e149e337e1992a274d61","deserializer":"TextBuffer"},{"text":"class KeyFobValetModeController < UIViewController\n  #class LoginViewController < UIViewController\n\n  def loadView\n    self.view = UIScrollView.new\n  end\n\n  def viewDidLoad\n    super\n    self.title = 'Key Fob Mode'\n    self.edgesForExtendedLayout = UIRectEdgeNone\n    init_navbar\n    rmq.stylesheet = KeyFobValetModeControllerStylesheet\n    rmq(self.view).apply_style :root_view\n\n    #self.title = 'KeyFob Valet mode'\n\n    rmq.append(UIView, :fuel_battery_level).tap do |q|\n      q.append(UILabel, :fuel_level_label)\n      q.append(UILabel, :battery_level_label)\n\n      q.append(UIImageView, :fuel_image)\n      q.append(UIImageView, :battery_image)\n    end\n\n    rmq.append(UIView, :core_functions).tap do |q|\n      q.append(UIImageView, :lock_door_image)\n      q.append(UIImageView, :unlock_trunk_image)\n      q.append(UIImageView, :start_engine_image)\n      q.append(UIImageView, :horn_image)\n    end\n\n    @valet_mode_label = rmq.append(UILabel, :valet_mode_label)\n    @valet_mode = rmq.append(UISwitch, :valet_mode_enabled).on(:change) do |sender|\n      style = sender.isOn ? :valet_mode_switch_enabled : :valet_mode_switch_disabled\n      buttons = sender.rmq.parent.find(UIButton).apply_style(style)\n    end\n\n    self.view.contentSize = [320, 600]\n  end\n\n  def viewWillAppear(animated)\n    super\n    p \"viewWillAppear\"\n    # prevent the screen from going to sleep\n    UIApplication.sharedApplication.idleTimerDisabled = true\n\n  end\n\n  def viewWillDisappear(animated)\n    # ap \"reenabling sleep\"\n    UIApplication.sharedApplication.idleTimerDisabled = false\n\n  end\n\n  def viewDidLoadAgain\n    super\n    p \"viewDidLoadAgain\"\n    rmq.stylesheet = LoginViewControllerStylesheet\n    rmq(self.view).apply_style :root_view\n\n    rmq.append(UIView, :form).tap do |q|\n      q.append(UILabel, :welcome_label)\n\n      @email    = q.append(UITextField, :email).get\n      @password = q.append(UITextField, :password).get\n\n      q.append(UIButton, :login_button).on(:tap) do |sender|\n        login\n      end\n\n      q.append(UIButton, :forgot_password_button).on(:tap) do |sender|\n        App.open_url(\"http://www.myautobrain.net\")\n      end\n      q.append(UIButton, :activate_device_button).on(:tap) do |sender|\n        App.open_url(\"http://www.myautobrain.net\")\n      end\n\n      q.append(UIImageView, :logo)\n\n      rmq(:form, self.view).on(:tap) do |sender|\n        rmq(UITextField).send(:resignFirstResponder) #Close keyboard)\n      end\n    end\n  end\n\n  def init_navbar\n    # generate the custom back button with the logo\n    back_image = UIImage.imageNamed('logos/nav_bar_back_image.png')\n    back_button = UIButton.alloc.initWithFrame(SugarCube::CoreGraphics.Rect(0, 0, 35.0, 35.0))\n    back_button.setBackgroundImage(back_image, forState: UIControlStateNormal)\n    #back_button.setTitle('<', forState: UIControlStateNormal)\n    back_button.addTarget(self, action: :nav_pop_back, forControlEvents: UIControlEventTouchUpInside)\n    back_button_item = UIBarButtonItem.alloc.initWithCustomView(back_button)\n    self.navigationItem.leftBarButtonItem = back_button_item;\n\n    # @right_nav_bar_button = UIBarButtonItem.alloc.init\n    # @right_nav_bar_button.title = 'Alerts'\n    # @right_nav_bar_button.style = UIBarButtonItemStylePlain\n    # @right_nav_bar_button.target = self\n    # @right_nav_bar_button.action = 'nav_right_button_action'\n    # self.navigationItem.rightBarButtonItem = @right_nav_bar_button\n  end\n\n  def nav_pop_back\n    self.navigationController.popViewControllerAnimated(true)\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[32,0],[36,7]],"tailed":true,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1076,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/controllers/key_fob_valet_mode_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"bf1e3702e460846d9b09978c26d9b0ca3e84c532","deserializer":"TextBuffer"},{"text":"class KeyFobValetModeControllerStylesheet < ApplicationStylesheet\n\n  def root_view(st)\n    st.background_color = color.white\n  end\n\n  def fuel_battery_level(st)\n    st.frame = {l: 20, t: 30, w: 240, h: 90}\n    st.background_color = color.white\n  end\n\n  def fuel_image(st)\n    st.frame = {l: 0, t: 30, w: 50, h: 60}\n    st.image = image.resource('fuel_image')\n  end\n\n  def fuel_level_label(st)\n    st.frame = {l: 55, t:25, w: 180, h: 40}\n    st.font = font.small\n    st.text = 'Fuel Level'\n  end\n\n  def battery_level_label(st)\n    st.frame = {l: 180, t:25, w: 200, h: 40}\n    st.font = font.small\n    st.text = 'Battery Level'\n  end\n\n  def battery_image(st)\n    st.frame = {l: 130, t: 30, w: 50, h: 60}\n    st.image = image.resource('battery_image')\n  end\n\n  def core_functions(st)\n    st.frame = {l: 0, t: 180, w: app_width, h: 200}\n    #st.background_color = color.yellow\n  end\n\n  def lock_door_image(st)\n    st.frame = {l: 5, t: 0, w: 150, h: 150}\n    st.image = image.resource('lock_door')\n  end\n\n  def unlock_trunk_image(st)\n    st.frame = {l: 155, t: 0, w: 150, h: 150}\n    st.image = image.resource('unlock_trunk')\n  end\n\n  def start_engine_image(st)\n    st.frame = {l: 5, t: 150, w: 150, h: 150}\n    st.image = image.resource('start_engine')\n  end\n\n  def horn_image(st)\n    st.frame = {l: 155, t: 150, w: 150, h: 150}\n    st.image = image.resource('horn')\n  end\n\n  def valet_mode_label(st)\n    st.text = 'Valet Mode'\n    st.font = font.small\n    st.frame = {l: 140, t: 480, w: 200, h: 40}\n  end\n\n  def valet_mode_enabled(st)\n    st.frame = {l: 140, t: 510}\n    st.on = true\n  end\n\n  def valet_mode_switch_enabled(st)\n    st.enabled = true\n  end\n\n  def valet_mode_switch_disabled(st)\n    st.enabled = false\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[58,0],[75,5]],"tailed":true,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":1084,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/stylesheets/key_fob_valet_mode_controller_stylesheet.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"78baf980153d388727e3c46d3afe8631aec8f223","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":1044,"softTabs":true,"scrollTop":916,"scrollLeft":0,"displayBuffer":{"id":1045,"softWrap":false,"editorWidthInChars":86,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/car.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":1072,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":1073,"softWrap":false,"editorWidthInChars":86,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/controllers/alerts_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":1076,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":1077,"softWrap":false,"editorWidthInChars":86,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/controllers/key_fob_valet_mode_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":1084,"softTabs":true,"scrollTop":769,"scrollLeft":0,"displayBuffer":{"id":1085,"softWrap":false,"editorWidthInChars":86,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/stylesheets/key_fob_valet_mode_controller_stylesheet.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":1048,"softTabs":true,"scrollTop":1297,"scrollLeft":0,"displayBuffer":{"id":1049,"softWrap":false,"editorWidthInChars":86,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/user.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":1052,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":1053,"softWrap":false,"editorWidthInChars":86,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/safety_mode.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/car.rb","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"autocomplete:toggle":{"count":1,"name":"autocomplete:toggle","lastRun":1396475691987},"find-and-replace:show":{"count":2,"name":"find-and-replace:show","lastRun":1396630971162},"tree-view:add-file":{"count":1,"name":"tree-view:add-file","lastRun":1396554719608},"project-find:show":{"count":1,"name":"project-find:show","lastRun":1396628963257},"command-palette:toggle":{"count":1,"name":"command-palette:toggle","lastRun":1396629113928},"settings-view:open":{"count":1,"name":"settings-view:open","lastRun":1396629115414},"tree-view:remove":{"count":1,"name":"tree-view:remove","lastRun":1396645464873}}},"find-and-replace":{"viewState":{"findHistory":["act","load_alerts_data","auth_","ap","plist","email"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["alert count","big_button"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}},"fuzzy-finder":{"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/car.rb":1396891709794,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/user.rb":1396883860819,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/safety_mode.rb":1396883863364,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/controllers/alerts_controller.rb":1396891338680,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/controllers/key_fob_valet_mode_controller.rb":1396891394487,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/stylesheets/key_fob_valet_mode_controller_stylesheet.rb":1396891402456},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":262603944},"tree-view":{"directoryExpansionStates":{"app":{"controllers":{},"models":{"api":{}},"stylesheets":{},"views":{}},"lib":{"monkeypatches":{}},"vendor":{"Pods":{}}},"selectedPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain-ios/app/models/api/car.rb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":47,"width":343}}}