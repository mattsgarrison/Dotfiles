{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1440,"height":874},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain","buffers":[{"text":"class Api::V1::UsersController < Api::V1::BaseController\n  respond_to :json\n\n  def add_apple_push_token\n    @smartphone = Smartphone.where(:user_id => current_user.id, :apple_push_token => user_params[:token]).first_or_create\n  end\n\nprivate\n  def user_params\n    params.permit(:token)\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[9,25],[9,25]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":463,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/controllers/api/v1/users_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f8b59f4df7729167232565c01f08a6c03256e261","deserializer":"TextBuffer"},{"text":"require 'test_helper'\n\nclass UserMessageProcessorTest < ActiveSupport::TestCase\n\n  def setup\n    @user = user!\n    @user.contacts.create! contact_type: 'phone_number', data: 7867631059\n    @car = Car.create! uid: 1, model: Device::STANDARD, phone_number: 9876543210, lt: 25.8323088, ln: -80.247739\n    CarUserRole.create! car_id: @car.id, user_id: @user.id, role: 'driver'\n  end\n\n  test 'valet on' do\n    raw_obd_data = %Q{ $$1, 6004,2013/06/18,03:40:05,25.93032,-80.18082,-21.9,0,0,0,0,0.0,6,1.3,205,0.0,12.7,18,1,01,0,0.0## }\n    payload = Payload.new raw_obd_data, \"gjeiorjgir9j\"\n    payload.save\n\n    user_message = UserMessage.create! raw_user_data: 'valet on', phone_number: 7867631059, user_id: @user.id,\n                                       inquiry_type: 'valet_on', status: 'inquiry_received_from_user'\n\n    RestService.client.clear\n    assert_empty RestService.client.requests\n    UserMessageProcessor.new(user_message.id).process\n\n    requests = RestService.client.requests\n    assert_match \"+XT:3007,#{ACCELERATION_IN_VALET_MODE},#{DECELERATION_IN_VALET_MODE}\", requests.first.last.last[:payload]\n\n    assert_match \"+XT:3004,#{THRESHOLD_SPEED_IN_VALET_MODE}\", requests.second.last.last[:payload]\n\n    expected = \"+XT:5003,0,3,25.93032,-80.16227,25.94485,-80.17154,25.94485,-80.1901,25.93032,-80.19937,25.91579,-80.1901,25.91579,-80.17154\"\n\n    assert_match expected, requests.third.last.last[:payload]\n\n    expected = \"Valet Mode has been turned on.\"\n    assert_match expected, requests.fourth.last.last[:message]\n\n    #Todo write test to make sure program comes up with proper geofence for valet mode\n    #coordinates = ValetMode.new(polygon_coordinates 6, 1, 'inradius'\n\n    #assert_match \"tbd\", coordinates\n  end\n\n  def test_car_alert_on_valet_on\n    user_message = UserMessage.create! raw_user_data: 'valet on', phone_number: 7867631059, user_id: @user.id,\n                                       inquiry_type: 'valet_on', status: 'inquiry_received_from_user'\n\n    subject = UserMessageProcessor.new(user_message.id)\n\n    assert_difference -> { CarAlert.count }, 1 do\n      subject.process\n    end\n    car_alert = CarAlert.last\n    assert_equal \"Valet Mode has been turned on.\", car_alert.message\n    assert_equal 'valet', car_alert.alert_type\n    assert_equal ['driver'], car_alert.user_types\n  end\n\n  def test_car_alert_off_valet_off\n    user_message = UserMessage.create! raw_user_data: 'valet off', phone_number: 7867631059, user_id: @user.id,\n                                       inquiry_type: 'valet_off', status: 'inquiry_received_from_user'\n\n    subject = UserMessageProcessor.new(user_message.id)\n\n    assert_difference -> { CarAlert.count }, 1 do\n      subject.process\n    end\n    car_alert = CarAlert.last\n    assert_equal \"Valet Mode has been turned off.\", car_alert.message\n    assert_equal 'valet', car_alert.alert_type\n    assert_equal ['driver'], car_alert.user_types\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[21,23],[21,23]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":586,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/test/models/user_message_processor_test.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"7a2d6db0f643d8d845627a3a814ccfe6dce0583e","deserializer":"TextBuffer"},{"text":"Autobrain::Application.routes.draw do\n\n  resources :smartphones\n\n  devise_for :users, controllers: {\n                                    confirmations: 'users/confirmations',\n                                    invitations:   'users/invitations',\n                                    registrations: 'users/registrations',\n                                    passwords:     'users/passwords'\n                                  }\n\n  devise_scope :user do\n    get 'password/edit',   to: 'users/registrations#edit_password'\n    put 'password/update', to: 'users/registrations#update_password'\n  end\n\n  root to: 'home#index', as: :root\n\n  get \"/delayed_job\"  => DelayedJobWeb,  :anchor => false\n  put \"/delayed_job\"  => DelayedJobWeb,  :anchor => false\n  post \"/delayed_job\" => DelayedJobWeb,  :anchor => false\n\n  constraints(host: /^myautobrain.com/) do\n    root to: redirect('http://www.myautobrain.com'), as: 'redirect_to_www_root'\n    get '/*path', to: redirect { |params| \"http://www.myautobrain.com/#{params[:path]}\" }\n  end\n\n  post '/handle_udp_obd_message' => \"incoming_obd_messages#handle_udp_obd_message\"\n  post '/handle_sms_obd_message' => \"incoming_obd_messages#handle_sms_obd_message\"\n\n  post '/handle_sms_user_message' => \"incoming_user_messages#handle_sms_user_message\"\n  post '/handle_acceleration' => \"incoming_violated_thresholds#handle_acceleration\"\n\n  get '/geo_fence_violation_on_fake_server' => \"fake_server#geo_fence_violation\"\n\n  devise_scope :user do\n    get '/confirmation_email_sent' => 'users/confirmations#email_sent'\n  end\n\n  authenticated :user do\n    resource :profile do\n      resources :contacts\n    end\n  end\n\n  resources :users, except: [:edit] do\n    resources :devices\n  end\n\n  resources :cars do\n    collection do\n      get :add\n    end\n\n    member do\n      get :diagnostics\n      get :family_services\n      get :select_plan\n      post :add_role\n      post :remove_role\n    end\n\n    resources :car_alerts, only: [:index, :destroy] do\n      collection do\n        delete :clear_all\n      end\n    end\n    resources :drivers do\n      member do\n        post :make_primary\n        post :remove_primary\n      end\n    end\n\n    resources :convenience_modes do\n      collection do\n        post :update_status\n      end\n    end\n\n    resources :trip_reports, only: [:index]\n\n    namespace :preferences do\n      resource :family_safety\n      resource :teenage_safety\n      resources :school_attendances\n      resources :emergency_contacts\n      resources :safety_modes, only: [] do\n        resources :safety_addresses\n      end\n    end\n  end\n\n  resources :plans do\n    collection do\n      get :select\n    end\n  end\n\n  resources :payments do\n    collection do\n      get :card_info\n      get :save_card\n      get :add\n    end\n  end\n\n  namespace :superadmin do\n    root to: 'users#index'\n    resources :device_obd_messages\n    resources :device_messages, only: [:index]\n    resources :activities do\n      collection do\n        post :delete_all\n      end\n    end\n\n    resources :devices do\n      member do\n        get :ping_7001\n        get :ping_1010\n      end\n    end\n\n    resources :users do\n      member do\n        post :impersonate\n      end\n\n      resources :cars do\n      end\n    end\n  end\n\n  namespace :api, defaults: {format: :json} do\n    namespace :v1 do\n      resource :users do #, only: [:add_apple_push_token] do\n        devise_scope :user do\n          post 'login' => 'sessions#create', as: 'login'\n          delete 'logout' => 'sessions#destroy', as: 'logout'\n        end\n        member do\n          post 'add_apple_push_token'\n        end\n      end\n\n      # namespace :preferences do\n      #   get  'show_safety_mode_status'        => 'preferences/safeties#show_status'\n      #   post 'update_safety_mode_status'      => 'preferences/safeties#update_status'\n\n      # end\n\n      post 'update_valet_mode' => 'cars#update_valet_mode'\n\n      resources :cars do\n        collection do\n          get  'show_convenience_mode_status'   => 'convenience_modes#show_status'\n          post 'update_convenience_mode_status' => 'convenience_modes#update_status'\n          get  'show_family_mode_status'        => 'family_modes#show_status'\n          post 'update_family_mode_status'      => 'family_modes#update_status'\n        end\n        member do\n          get  'details'                        => 'cars#details'\n          get  'current_trip_report'            => 'cars#current_trip_report'\n          post 'reset_odometer'                 => 'cars#reset_odometer'\n          post 'update_notifications_status'    => 'cars#update_notifications_status'\n        end\n        resources :car_alerts, only: [:index, :update, :destroy] do\n          collection do\n            delete :clear_all\n          end\n        end\n        namespace :preferences do\n          resource :safeties, only: [] do\n            member do\n              get  'show_status'   #  => 'safeties#show_status'\n              post 'update_status' #  => 'safeties#update_status'\n            end\n          end\n          resources :school_attendances\n        end\n    end\n        resources :operators, only: [:show, :create, :update, :destroy], constraints: { id: /.*/ }\n        namespace :ccs do\n            resources :incoming_accident_events, :only => [:new, :show, :create]\n        end\n      resources :roadside_assistances, only: [] do\n        collection do\n          get 'assistance_categories'\n          get 'request_assistance'\n          get 'customer_service_number'\n          get 'emergency_responder_number'\n        end\n      end\n    end\n  end\n\n  ActiveAdmin.routes(self)\n\ndevise_for :operators\n\nget \"ccs/operators/index\", as: \"ccs_root\"\nget \"ccs/accidents/index\", as: \"ccs_accidents\"\n\n  namespace :ccs do\n    resources :accidents, only: [:show, :index, :destroy]\n    get \"pages/index\" => \"pages#index\", as: \"index\"\n    get \"pages/contact_us\" => \"pages#contact_us\", as: \"contact_us\"\n    get \"pages/about\" => \"pages#about\", as: \"about\"\n  end\n#, constraints: { id: /.*/ }\n\nget \"/ccs/accident/:id/complete\" => 'ccs/accidents#complete', as: \"accident_complete\"\n\nresources :pages\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[84,16],[84,23]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":728,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/config/routes.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"cb00f73a60d909105d8edff719dd0b6a0442d0a1","deserializer":"TextBuffer"},{"text":"# == Schema Information\n#\n# Table name: cars\n#\n#  id                                        :integer          not null, primary key\n#  uid                                       :integer\n#  ev                                        :integer\n#  d                                         :string(255)\n#  t                                         :string(255)\n#  lt                                        :decimal(15, 10)\n#  ln                                        :decimal(15, 10)\n#  al                                        :decimal(15, 10)\n#  sp                                        :decimal(15, 10)\n#  ac                                        :decimal(15, 10)\n#  dc                                        :decimal(15, 10)\n#  rp                                        :integer\n#  hd                                        :decimal(15, 10)\n#  sv                                        :integer\n#  hp                                        :decimal(15, 10)\n#  mi                                        :decimal(15, 10)\n#  mg                                        :decimal(15, 10)\n#  bv                                        :decimal(15, 10)\n#  cq                                        :decimal(15, 10)\n#  gs                                        :integer\n#  gt                                        :decimal(15, 10)\n#  fl                                        :decimal(15, 10)\n#  seq                                       :decimal(15, 10)\n#  ip                                        :string(255)\n#  port                                      :string(255)\n#  xy                                        :string(255)\n#  acc_thresh                                :decimal(15, 10)\n#  dec_thresh                                :decimal(15, 10)\n#  spd_thresh                                :decimal(15, 10)\n#  rpm_thresh                                :decimal(15, 10)\n#  location_date                             :datetime\n#  valeted                                   :boolean          default(FALSE)\n#  created_at                                :datetime\n#  updated_at                                :datetime\n#  ig                                        :integer\n#  ax                                        :decimal(15, 10)\n#  ay                                        :decimal(15, 10)\n#  az                                        :decimal(15, 10)\n#  staging_violation_state                   :boolean          default(FALSE)\n#  xl                                        :decimal(15, 10)\n#  yl                                        :decimal(15, 10)\n#  zl                                        :decimal(15, 10)\n#  xh                                        :decimal(15, 10)\n#  yh                                        :decimal(15, 10)\n#  zh                                        :decimal(15, 10)\n#  model                                     :text\n#  phone_number                              :string(255)\n#  fwm                                       :string(255)\n#  fwo                                       :string(255)\n#  pf                                        :string(255)\n#  vn                                        :string(255)\n#  device_number                             :string(255)      not null\n#  status                                    :string(255)      default(\"prepped\")\n#  speed_at_speeding_alert                   :integer          default(0)\n#  speeding_alert_sent_at                    :datetime\n#  accelerating_alert_sent_at                :datetime\n#  breaking_alert_sent_at                    :datetime\n#  status_for_7001                           :string(255)      default(\"processed\")\n#  requests_count_for_7001                   :integer\n#  name                                      :string(255)\n#  pic                                       :string(255)\n#  side_impact_notification                  :boolean          default(FALSE)\n#  front_impact_notification                 :boolean          default(FALSE)\n#  rear_impact_notification                  :boolean          default(FALSE)\n#  towing_detection_service_on               :boolean          default(FALSE)\n#  act                                       :decimal(15, 10)\n#  rpt                                       :decimal(15, 10)\n#  spt                                       :decimal(15, 10)\n#  dct                                       :decimal(15, 10)\n#  picture_id                                :integer\n#  remote_diagnostics                        :boolean          default(FALSE)\n#  maintenance_notifications                 :boolean          default(FALSE)\n#  battery_level_alerts                      :boolean          default(FALSE)\n#  tow_alerts                                :boolean          default(FALSE)\n#  fuel_level_alerts                         :boolean          default(FALSE)\n#  ob                                        :text\n#  dtc_enabled                               :boolean          default(FALSE)\n#  last_dtc_code                             :datetime\n#  milstatus                                 :text\n#  remote_diagnostics_mobile_notifications   :boolean          default(FALSE)\n#  maintenance_mobile_notifications          :boolean          default(FALSE)\n#  battery_level_alerts_mobile_notifications :boolean          default(FALSE)\n#  tow_alerts_mobile_notifications           :boolean          default(FALSE)\n#  fuel_level_alerts_mobile_notifications    :boolean          default(FALSE)\n#  mgt                                       :integer\n#  ds                                        :integer\n#  mgc                                       :integer\n#  vin_sup                                   :integer\n#  fl_sup                                    :integer\n#  ft_sup                                    :integer\n#  maf_sup                                   :integer\n#  efr_sup                                   :integer\n#  drm                                       :integer\n#  calibration_complete                      :boolean          default(FALSE)\n#  battery_voltage_alert_on                  :boolean          default(FALSE)\n#  pp                                        :integer\n#  usn                                       :text\n#  pwd                                       :text\n#  sm                                        :integer\n#  tu                                        :integer\n#  dce                                       :integer\n#  pr                                        :integer\n#  pdpt                                      :integer\n#  gv                                        :integer\n#  nat_status                                :text\n#  last_time_app_accessed                    :datetime\n#  heartbeat_interval                        :integer\n#  pricing_plan_id                           :integer          default(1), not null\n#\n\nclass Car < ActiveRecord::Base\n\n  STANDARD            = \"XT-2000-G-X001\"\n  ACCELEROMETER       = \"XT-2000-G-X081\"\n\n  has_many :car_user_roles, dependent: :destroy\n  has_many :users, -> { uniq }, through: :car_user_roles\n\n  has_many :acceleration_thresholds\n  has_many :speed_thresholds\n  has_many :emergency_contacts, dependent: :destroy\n  has_many :school_attendances, dependent: :destroy, inverse_of: :car\n  has_many :safety_modes, dependent: :destroy\n  has_many :trip_reports, dependent: :destroy\n  has_many :car_alerts\n  has_many :odometers\n  has_many :obds\n  has_one :family_safety_mode\n  has_one :teenage_safety_mode\n  belongs_to :pricing_plan\n\n  before_create :set_device_number\n  before_save :check_if_device_should_start_onboarding_process\n  after_create :add_owner_as_driver\n  after_create :add_family_safety_mode\n  after_create :add_teenage_safety_mode\n\n  MODEL_TYPES = [Car::STANDARD, Car::ACCELEROMETER]\n  validates_inclusion_of :model, in: MODEL_TYPES, allow_blank: false\n\n  validate :fl_is_between_0_and_100\n  validates :phone_number, presence: true\n  validates :phone_number, uniqueness: true\n  attr_writer :need_validate_name\n  validates :name, presence: true, if: -> { @need_validate_name }\n  validates :uid, uniqueness: true, allow_blank: true\n\n  mount_uploader :pic, IconUploader\n\n  def device\n    Device.find self.id\n  end\n\n  def valet_mode?\n    valeted?\n  end\n\n  def bootstrap_device\n    BootstrapDeviceWorker.new(id).delay.perform\n  end\n\n  def latitude\n    lt\n  end\n\n  def longitude\n    ln\n  end\n\n  def geo_fences\n    GeoFence.where uid: uid\n  end\n\n  def add_as_driver(added_user)\n    CarUserRole.create!(car_id: id, user_id: added_user.id, role: 'driver') if added_user\n  end\n\n  def add_as_monitor(added_user)\n    CarUserRole.create!(car_id: id, user_id: added_user.id, role: 'monitor') if added_user\n  end\n\n  def available_for_drive\n    user_ids = car_user_roles.where(role: 'driver').pluck(:user_id).uniq\n    self.owner.invited_users.where { { id.not_in => user_ids } }\n  end\n\n  def set_owner(new_owner)\n    old_owner = car_user_roles.where(role: 'owner').first\n    return if old_owner\n\n    Car.transaction do\n      self.status = 'onboarding_started'\n      CarUserRole.create!(car_id: id, user_id: new_owner.id, role: 'owner')\n      self.save!\n      car_user_roles.where(role: 'driver').destroy_all\n      add_as_driver(new_owner)\n      add_as_monitor(new_owner)\n    end\n  end\n\n  def to_s\n    name\n  end\n\n  def obds\n    Obd.where(uid: self.uid)\n  end\n\n  def display_fl\n    self.fl.blank? ? '' : fl\n  end\n\n  def default_picture_url\n    car_picture = CarPicture.find_by_id(picture_id).presence\n    car_picture ? car_picture.url : ''\n  end\n\n  def unseen_notifications_count\n    car_alerts.unseen.count\n  end\n\n  def owner\n    car_owner = car_user_roles.where(role: 'owner').first\n    User.find car_owner.user_id if car_owner\n  end\n\n  def drivers\n    User.where(id: car_user_roles.where(role: 'driver').pluck(:user_id).uniq)\n  end\n\n  def primary_drivers\n    drivers.joins(:car_user_roles).where(car_user_roles: { primary: true })\n  end\n\n  def secondary_drivers\n    drivers.joins(:car_user_roles).where(car_user_roles: { primary: false })\n  end\n\n  def monitors\n    User.find car_user_roles.where(role: 'monitor').pluck(:user_id).uniq\n  end\n\n  def role?(role, user)\n    car_user_roles.where(role: role).pluck(:user_id).include? user.id\n  end\n\n  private\n\n  def fl_is_between_0_and_100\n    if !(self.fl.blank? || self.fl.nil?) && (self.fl<0 || self.fl>100)\n      errors.add(:fl, \"must be between 0 and 100\")\n    end\n  end\n\n\n  def set_device_number\n    number = SecureRandom.hex(15)\n    while self.class.exists?(device_number: number) do\n      number = SecureRandom.hex(15)\n    end\n    self.device_number = number\n  end\n\n  def check_if_device_should_start_onboarding_process\n    if self.status_changed? && self.status == 'onboarding_started'\n      self.bootstrap_device\n    end\n  end\n\n  def add_owner_as_driver\n    add_as_driver(owner)\n  end\n\n  def add_family_safety_mode\n    self.family_safety_mode = FamilySafetyMode.create! car_id: id\n  end\n\n  def add_teenage_safety_mode\n    self.teenage_safety_mode = TeenageSafetyMode.create! car_id: id\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[217,54],[217,54]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":732,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/models/car.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"7094cf0182ec1eaaf1d82e90bb383f11d30d4e12","deserializer":"TextBuffer"},{"text":"# == Schema Information\n#\n# Table name: smartphones\n#\n#  id                     :integer          not null, primary key\n#  user_id                :integer          not null\n#  name                   :text\n#  enabled_at             :datetime\n#  apple_push_token       :text\n#  last_notification_sent :datetime\n#  created_at             :datetime\n#  updated_at             :datetime\n#\n\nclass Smartphone < ActiveRecord::Base\n  belongs_to :user\n  validates :apple_push_token, uniqueness: true\n  before_save :enable_device\n\n  scope :enabled, lambda { where('enabled_at < ?', Time.zone.now) }\n\n  def send_push_notification(message, count = nil)\n    alert_count = count #|| self.user.\n    apns = ApplePushNotificationService.new(self.apple_push_token)\n    self.last_notification_sent = Time.zone.now\n    self.save\n    apns.delay(queue: 'push_notifications').send_alert_and_update_badge_count(message, alert_count)\n  end\n  private\n\n  def enable_device\n    self.enabled_at = Time.zone.now\n  end\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[23,11],[23,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":745,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/models/smartphone.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ee626107996220fdff563a74e2fcbdc2f1827401","deserializer":"TextBuffer"},{"text":"class ApplePushNotificationService\n  attr_reader :notification\n  attr_accessor :user_token\n\n  def initialize user_push_notification_token = nil\n    if Rails.env.production?\n      @user_token = user_push_notification_token\n      @apn = Houston::Client.production\n      @apn.certificate =  File.read(Rails.root.join('./lib/push_notifications/aps_prod.pem'))\n    elsif Rails.env.staging?\n      @user_token = user_push_notification_token\n      @apn = Houston::Client.production\n      @apn.certificate =  File.read(Rails.root.join('./lib/push_notifications/aps_prod.pem'))\n    else\n      @user_token = user_push_notification_token || 'b526362838d8aada99da56cbb314857e1db948fe0f74411adb743aea98ab8abc'\n      @apn = Houston::Client.development\n      @apn.certificate = File.read(Rails.root.join('./lib/push_notifications/aps_dev_cert.pem'))\n    end\n    @notification = Houston::Notification.new(device: @user_token)\n  end\n\n  def user_token=(user_token)\n    @user_token = user_token\n    @notification = Houston::Notification.new(device: @user_token)\n    @user_token\n  end\n\n  def send_alert_and_update_badge_count(text, count, silent=false)\n    @notification.alert = text\n    @notification.badge = count\n    if silent\n      @notification.sound = nil\n    else\n      @notification.sound = \"sosumi.aiff\"\n    end\n    # not needed yet, but this is how custom data is sent to the device\n    # @notification.custom_data = {foo: \"bar\"}\n\n    @apn.push(@notification)\n  end\n\n  # making badge updates alone silent by default\n  def update_badge_count(count, silent=true)\n    @notification.alert = nil\n    @notification.badge = count\n    if silent\n      @notification.sound = nil\n    else\n      @notification.sound = \"sosumi.aiff\"\n    end\n    @apn.push(@notification)\n  end\n\n  def send_alert(text, silent=false)\n    @notification.alert = text\n    if silent\n      @notification.sound = nil\n    else\n      @notification.sound = \"sosumi.aiff\"\n    end\n    @apn.push(@notification)\n  end\n\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,6],[0,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":750,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/services/apple_push_notification_service.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2e9a5442b53434261ea67a17de9cccc61f600e9a","deserializer":"TextBuffer"},{"text":"class Api::V1::ConvenienceModesController < Api::V1::BaseController\n  before_filter :load_car\n  before_filter :verify_mode, only: [:update_status]\n  MODES = [\n    'remote_diagnostics_mobile_notifications',\n    'maintenance_mobile_notifications',\n    'battery_level_alerts_mobile_notifications',\n    'tow_alerts_mobile_notifications',\n    'fuel_level_alerts_mobile_notifications'\n  ]\n\n  def show_status\n    @all_cars_modes_status = Hash.new\n    @user.cars.each do |car|\n      @car_modes_status = Hash.new\n      MODES.each do |mode|\n        value = car.public_send(mode)\n        @car_modes_status.merge!(mode.to_sym => value)\n      end\n      @all_cars_modes_status = boolean_and_entire_hashes(@all_cars_modes_status, @car_modes_status)\n    end\n    render json: {modes: @all_cars_modes_status, status: :ok}\n  end\n\n  #This is ugly but only necessary because of the entire settings being a kludge\n  def boolean_and_entire_hashes(hash_a, hash_b)\n    hash_a.merge(hash_b){|k, v1, v2| (v1 || v2) }\n  end\n\n  def update_status\n    errors = Hash.new\n    @user.cars.each do |car|\n      errors.merge!(car.errors) if car.update(\"#{params[:mode]}\" => params[:status])\n    end\n    if errors.empty?\n      render json: { success: true }, status: :ok\n    else\n      render json: { success: false, errors: errors },\n             status: :unprocessable_entity\n    end\n  end\n\n  private\n\n  def load_car\n    @car = Car.find_by_id(params[:id])\n    if @car.blank?\n      render json: { success: false,\n                     errors: [\"No record was found for the uid #{params[:id]}.\"] },\n             status: :not_found\n    end\n  end\n\n  def verify_mode\n    unless @car.respond_to?(params[:mode])\n      render json: { success: false,\n                     errors: [\"Convenience mode #{params[:mode]} does not exist.\"] },\n             status: :not_found\n    end\n  end\n\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":754},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/controllers/api/v1/convenience_modes_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"52d1997428b170a6140d31f642e0e029358c861e","deserializer":"TextBuffer"},{"text":"class Api::V1::CarsController < Api::V1::BaseController\n  before_filter :verify_car_exists, only: [:update_valet_mode, :update_notifications_status]\n\n  before_filter :load_car, only: [:details, :current_trip_report]\n\n  def index\n    @cars = current_user.cars\n  end\n\n  def details\n    if @car\n      #@mpgs = CurrentTripReportsService.new @car.uid\n      alert = @car.car_alerts.unseen.latest.first\n      alert_latitude = alert.try :latitude\n      alert_longitude = alert.try :longitude\n\n      car_params = {\n        id:                           @car.id,\n        fuel_level:                   @car.display_fl,\n        battery_level:                @car.bv,\n        valet_mode_status:            @car.valeted,\n        unseen_notifications_count:   @car.unseen_notifications_count,\n        car_picture:                  @car.default_picture_url,\n        latitude:                     @car.lt,\n        longitude:                    @car.ln,\n        alert_latitude:               alert_latitude,\n        alert_longitude:              alert_longitude\n      }\n      \n      render json: { success: true, car: car_params }, status: :ok\n      ensure_device_is_streaming\n    else\n      render json: { success: false,\n                     errors: [\"There is no car associated with the current user.\"]},\n             status: :not_found\n    end\n    \n  end\n\n  def current_trip_report\n    if @car\n      @trip_service = CurrentTripReportsService.new @car.uid\n      trip_default_response = { mpg: 0,\n                                miles_driven: 0,\n                                gallons_of_gas_consumed: 0,\n                                hard_accels_and_breaks: 0,\n                                driving_score: 0}\n      if Rails.env.development?\n        trip_default_response = { mpg:                     (rand(35)/100.0),\n                                  miles_driven:            (rand(1000)/100.0),\n                                  gallons_of_gas_consumed: (rand(150)/100.0),\n                                  hard_accels_and_breaks:  rand(5),\n                                  driving_score:           rand(100)}\n      end\n\n      # hard accels/brakes are not currently in the jbuilder template as they're not currently being displayed in the app\n      @current_mpg = @trip_service.current_trip || trip_default_response\n      @refuel_mpg  = @trip_service.since_last_fill_up || trip_default_response\n      @odom1_mpg   = @trip_service.since_odometer_reset(odometers_ago: 1) || trip_default_response\n      @odom2_mpg   = @trip_service.since_odometer_reset(odometers_ago: 2) || trip_default_response\n      @odom3_mpg   = @trip_service.since_odometer_reset(odometers_ago: 3) || trip_default_response\n    else\n      render json: { success: false,\n                     errors: [\"There is no car associated with the current user.\"]},\n             status: :not_found\n    end\n  end\n\n  def update_notifications_status\n    if MarkAllUnseenNotificationsAsSeenService.new(@car).process\n      render json: { success: true }, status: :ok\n    else\n      render json: { success: false,\n                    errors: [\"Notification status update was rejected.\"]},\n             status: :unprocessable_entity\n    end\n  end\n\n  def update_valet_mode\n    @car = Car.find_by_id(params[:id])\n    params = request.params.merge(uid: @car.uid)\n    if ValetMode.toggle_status(params)\n      render json: { success: true }, status: :ok\n    else\n      render json: { success: false,\n                     errors: [\"Valet mode update was rejected for status #{params[:status]}\"]},\n             status: :unprocessable_entity\n    end\n  end\n\n  def reset_odometer\n    car = Car.find_by_id params[:id]\n    if car.blank?\n      render json: { errors: [\"Car can't be found with id #{params[:id]}\"] },\n             status: :unprocessable_entity\n    elsif raw_user_data.blank?\n      render json: { errors: [\"Raw user data can't be blank\"] },\n             status: :unprocessable_entity\n    else\n      inquiry_type = UserMessageInquiryType.new(raw_user_data).type\n\n      user_message = UserMessage.create! raw_user_data: raw_user_data,\n#        user_id: current_user.id,\n        uid: car.uid,\n#        guid: params[:guid],\n        inquiry_type: inquiry_type,\n        status: 'inquiry_received_from_user'\n\n      UserMessageProcessorWorker.new(user_message.id).delay.perform\n      render json: :ok\n    end\n  end\n\n  private\n\n    def ensure_device_is_streaming\n      @car.last_time_app_accessed = Time.now\n      if @car.nat_status != \"hold_open\" || @car.heartbeat_interval.to_f > 30\n        options = {nat_status: \"hold_open\", heartbeat_interval: 30, uid: @car.uid}\n        HeartbeatIntervalWorker.new(options).delay.adjust_this_and_nat_window\n        options.delete(:uid)\n        options.delete(:operation)\n        @car.nat_status = options[:nat_status]\n        @car.heartbeat_interval = options[:heartbeat_interval]\n      end\n      @car.update_record_without_timestamping  \n    end\n\n    def verify_car_exists\n      @car = Car.find_by_id(params[:id])\n\n      unless @car\n        render json: { success: false,\n                       errors: [\"No record was found for car id #{params[:id]}\"]},\n               status: :not_found\n      end\n    end\n\n    def load_car\n      if params[:id].nil?\n        @car = current_user.cars.first\n      else\n        @car = current_user.cars.where(id: params[:id]).first\n      end\n    end\n\n    def raw_user_data\n      params[:raw_user_data].to_s.strip.downcase\n    end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[32,6],[34,31]],"tailed":true,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":758,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/controllers/api/v1/cars_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"867c96a8846dbfbeb03f56e8fbf6136b7448b7a0","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":463,"softTabs":true,"displayBuffer":{"id":464,"softWrap":false,"editorWidthInChars":84,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/controllers/api/v1/users_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":586,"softTabs":true,"displayBuffer":{"id":587,"softWrap":false,"editorWidthInChars":114,"scrollTop":247,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/test/models/user_message_processor_test.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":728,"softTabs":true,"displayBuffer":{"id":729,"softWrap":false,"editorWidthInChars":58,"scrollTop":1291,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/config/routes.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":732,"softTabs":true,"displayBuffer":{"id":733,"softWrap":false,"editorWidthInChars":58,"scrollTop":3753,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/models/car.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":745,"softTabs":true,"displayBuffer":{"id":746,"softWrap":false,"editorWidthInChars":58,"scrollTop":55,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/models/smartphone.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":750,"softTabs":true,"displayBuffer":{"id":751,"softWrap":false,"editorWidthInChars":58,"scrollTop":625,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/services/apple_push_notification_service.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":754,"softTabs":true,"displayBuffer":{"id":755,"softWrap":false,"editorWidthInChars":118,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/controllers/api/v1/convenience_modes_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":758,"softTabs":true,"displayBuffer":{"id":759,"softWrap":false,"editorWidthInChars":118,"scrollTop":204,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/controllers/api/v1/cars_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/controllers/api/v1/cars_controller.rb","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"command-palette:toggle":{"count":2,"name":"command-palette:toggle","lastRun":1397663243355},"pane:split-up":{"count":1,"name":"pane:split-up","lastRun":1395760391798},"settings-view:open":{"count":1,"name":"settings-view:open","lastRun":1395760405097},"application:new-file":{"count":1,"name":"application:new-file","lastRun":1395760462382},"settings-view:change-themes":{"count":1,"name":"settings-view:change-themes","lastRun":1395760468035},"project-find:show":{"count":5,"name":"project-find:show","lastRun":1403278009484},"atom-rails:switch-to-model":{"count":2,"name":"atom-rails:switch-to-model","lastRun":1395765666764},"atom-rails:related":{"count":1,"name":"atom-rails:related","lastRun":1395765671542},"tree-view:add-file":{"count":1,"name":"tree-view:add-file","lastRun":1396037630885},"grammar-selector:show":{"count":1,"name":"grammar-selector:show","lastRun":1397663237648},"test-status:run-tests":{"count":2,"name":"test-status:run-tests","lastRun":1397663264065},"core:backspace":{"count":4,"name":"core:backspace","lastRun":1403277956828},"core:confirm":{"count":4,"name":"core:confirm","lastRun":1403278010726},"find-and-replace:show":{"count":1,"name":"find-and-replace:show","lastRun":1403277956068},"core:copy":{"count":2,"name":"core:copy","lastRun":1403296657063},"core:paste":{"count":1,"name":"core:paste","lastRun":1403278009866},"application:hide":{"count":1,"name":"application:hide","lastRun":1403296736258},"application:quit":{"count":1,"name":"application:quit","lastRun":1403394639905}}},"find-and-replace":{"viewState":{"findHistory":["12abc","12abc45","apple"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["binding.pry","12abc45","teenage","apple","ApplePushNotificationService"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}},"fuzzy-finder":{"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/controllers/api/v1/users_controller.rb":1400530648852,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/test/models/user_message_processor_test.rb":1403271934147,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/config/routes.rb":1403271952113,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/models/car.rb":1403272302689,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/models/smartphone.rb":1403277966582,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/services/apple_push_notification_service.rb":1403278012917,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/controllers/api/v1/convenience_modes_controller.rb":1403296645360,"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/controllers/api/v1/cars_controller.rb":1403296646348},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":122709307},"tree-view":{"directoryExpansionStates":{"app":{"controllers":{"api":{"v1":{}}},"services":{}},"lib":{"assets":{},"tasks":{},"templates":{}}},"selectedPath":"/Users/mattgarrison/Projects/swjg-ventures/myautobrain/app/controllers/api/v1/cars_controller.rb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":346}}}