{"mode":"editor","version":"0.69.0","windowDimensions":{"x":0,"y":22,"width":1411,"height":878},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/mattgarrison/Projects/web/teamweb/test","buffers":[{"text":"Minitest Cheatsheet\n===================\n\n## Table of Contents\n\n* [Empty](#empty)\n* [Equal](#equal)\n* [Delta](#delta)\n  * [Close to](#close-to-alternate-delta-syntax)\n* [Epsilon](#epsilon)\n* [Includes](#includes)\n* [Instance Of](#instance-of)\n* [Kind Of](#kind-of)\n* [Match](#match)\n* [Nil](#nil)\n* [Operator](#operator)\n* [Output](#output)\n* [Raises](#raises)\n* [Respond To](#respond-to)\n* [Same](#same)\n* [Silent](#silent)\n* [Throws](#throws)\n\n### Setup\n\n* [Test Setup](#test-setup)\n* [Test Teardown](#test-teardown)\n\n### Helpers\n\n* [Let](#let)\n* [Subject](#subject)\n* [Specify](#specify)\n* [Skip](#skip)\n\n### Mocks\n\n* [Mocks](#mocks)\n\n#### Notes:\n\nOfficial Docs for [Minitest](http://www.ruby-doc.org/stdlib-2.0/libdoc/minitest/spec/rdoc/), [Minitest Spec](http://www.ruby-doc.org/stdlib-2.0/libdoc/minitest/rdoc/MiniTest.html) and [Minitest Mocks](http://www.ruby-doc.org/stdlib-1.9.3/libdoc/minitest/mock/rdoc/MiniTest/Mock.html)\n\n[Minitest Github Repo](https://github.com/seattlerb/minitest)\n\n[Minimalicious Testing](http://blog.arvidandersson.se/2012/03/28/minimalicous-testing-in-ruby-1-9)\n\n[Minitest Quick Reference](http://mattsears.com/articles/2011/12/10/minitest-quick-reference)\n\n[Minitest Cheat Sheet, Unit and Spec reference](http://danwin.com/2013/03/ruby-minitest-cheat-sheet/)\n\n\n## Empty\n\n\nUnit: `assert_empty`, `refute_empty`\n\nSpec: `must_be_empty`, `wont_be_empty`\n\nArguments: `obj, msg=nil`\n\nExamples:\n\n    assert_empty []\n    refute_empty [1,2,3]\n    [].must_be_empty\n    [1,2,3].wont_be_empty\n\n\n## Equal\n\nUnit: `assert_equal`, `refute_equal`\n\nSpec: `must_equal`, `wont_equal`\n\nArguments: `exp, act, msg=nil`\n\nExamples:\n\n    assert_equal 2, 2\n    refute_equal 2,1\n    2.must_equal 2\n    2.wont_equal 1\n\n## Delta\n\nUnit: `assert_in_delta`, `refute_in_delta`\n\nSpec: `must_be_within_delta`, `wont_be_within_delta`\n\nArguments: `exp, act, dlt=0.001, msg=nil`\n\nExamples:\n\n    assert_in_delta 2012, 2010, 2\n    refute_in_delta 2012, 3012, 2\n    2012.must_be_within_delta 2010, 2\n    2012.wont_be_within_delta 3012, 2\n\n### Close to (alternate Delta syntax)\n\nSpec: `must_be_close_to`, `wont_be_close_to`\n\nArguments: `act, dlt=0.001, msg=nil`\n\nExamples:\n\n    2012.must_be_close_to 2010, 2\n    2012.wont_be_close_to 3012, 2\n\n## Epsilon\n\nUnit: `assert_in_epsilon`, `refute_in_epsilon`\n\nSpec: `must_be_within_epsilon`, `wont_be_within_epsilon`\n\nArguments: `a, b, eps=0.001, msg=nil`\n\nExamples:\n\n    assert_in_epsilon 1.0, 1.02, 0.05\n    refute_in_epsilon 1.0, 1.06, 0.05\n    1.0.must_be_within_epsilon 1.02, 0.05\n    1.0.wont_be_within_epsilon 1.06, 0.05\n\n## Includes\n\nUnit: `assert_includes`, `refute_includes`\n\nSpec: `must_include`, `wont_include`\n\nArguments: `collection, obj, msg=nil`\n\nExamples:\n\n    assert_includes [1, 2], 2\n    refute_includes [1, 2], 3\n    [1, 2].must_include 2\n    [1, 2].wont_include 3\n\n## Instance Of\n\nUnit: `assert_instance_of`, `refute_instance_of`\n\nSpec: `must_be_instance_of`, `wont_be_instance_of`\n\nArguments: `klass, obj, msg=nil`\n\nExamples:\n\n    assert_instance_of String, \"bar\"\n    refute_instance_of String, 100\n    \"bar\".must_be_instance_of String\n    100.wont_be_instance_of String\n\n## Kind Of\n\nUnit: `assert_kind_of`, `refute_kind_of`\n\nSpec: `must_be_kind_of`, `wont_be_kind_of`\n\nArguments: `klass, obj, msg=nil`\n\nExamples:\n\n    assert_kind_of Numeric, 100\n    refute_kind_of Numeric, \"bar\"\n    100.must_be_kind_of Numeric\n    \"bar\".wont_be_kind_of Numeric\n\n## Match\n\nUnit: `assert_match`, `refute_match`\n\nSpec: `must_match`, `wont_match`\n\nArguments: `exp, act, msg=nil`\n\nExamples:\n\n    assert_match /\\d/, \"42\"\n    refute_match /\\d/, \"foo\"\n    \"42\".must_match /\\d/\n    \"foo\".wont_match /\\d/\n\n## Nil\n\nUnit: `assert_nil`, `refute_nil`\n\nSpec: `must_be_nil`, `wont_be_nil`\n\nArguments: `obj, msg=nil`\n\nExamples:\n\n    assert_nil [].first\n    refute_nil [1].first\n    [].first.must_be_nil\n    [1].first.wont_be_nil\n\n## Operator\n\nUnit: `assert_operator`, `refute_operator`\n\nSpec: `must_be`, `wont_be`\n\nArguments: `o1, op, o2, msg=nil`\n\nExamples:\n\n   assert_operator 1, :<, 2\n   refute_operator 1, :>, 2\n   1.must_be :<, 2\n   1.wont_be :>, 2\n\n## Output\n\nUnit: `assert_output`\n\nSpec: `must_output`\n\nArguments: `stdout = nil, stderr = nil`\n\nExamples:\n\n    assert_output(\"hi\\n\"){ puts \"hi\" }\n    Proc.new{puts \"hi\"}.must_output \"hi\\n\"\n\n## Raises\n\nUnit: `assert_raises`\n\nSpec: `must_raise`\n\nArguments `*exp`\n\nExamples:\n\n    assert_raises(NoMethodError){ nil! }\n    Proc.new{nil!}.must_raise NoMethodError\n\n## Respond To\n\nUnit: `assert_respond_to`, `refute_respond_to`\n\nSpec: `must_respond_to`, `wont_respond_to`\n\nArguments: `obj, meth, msg=nil`\n\nExamples:\n\n    assert_respond_to \"foo\",:empty?\n    refute_respond_to 100, :empty?\n    \"foo\".must_respond_to :empty?\n    100.wont_respond_to :empty?\n\n## Same\n\nUnit: `assert_same`, `refute_same`\n\nSpec: `must_be_same_as`, `wont_be_same_as`\n\nArguments: `exp, act, msg=nil`\n\nExamples:\n\n    assert_same :foo, :foo\n    refute_same ['foo'], ['foo']\n    :foo.must_be_same_as :foo\n    ['foo'].wont_be_same_as ['foo']\n\n## Silent\n\nUnit: `assert_silent`\n\nSpec: `must_be_silent`\n\nArguments: none\n\nExamples:\n\n    assert_silent{ 1 + 1 }\n    Proc.new{ 1 + 1}.must_be_silent\n\n## Throws\n\nUnit: `assert_throws`\n\nSpec: `must_throw`\n\nArguments: `sym, msg=nil`\n\nExamples:\n\n    assert_throws(:up){ throw :up}\n    Proc.new{throw :up}.must_throw :up\n\n\nTest Setup\n-----------\n\nUnit: `setup()`\n\nSpec: `before(type = nil, &block)`\n\nTest Teardown\n-------------\n\nUnit: `teardown()`\n\nSpec: `after(type = nil, &block)`\n\nHelpers\n-------\n\n\n## Let\n\n`let` is like simplified version of the before hook that you use to setup predefined accessors and the values they return:\n\n\t\tdescribe Person do\n\n\t\t  let(:person) { Person.new(\"Yukihiro\", \"Matsumoto\") }\n\n\t\t  it \"has a full name\" do\n\t\t    person.full_name.must_equal \"Yukihiro Matsumoto\"\n\t\t  end\n\n\t\tend\n\n## Subject\n\n`subject` works similar to let but you can only use it to set a accessor called subject. This is used to specify the object who's behavior is being described:\n\n\t\tdescribe Person do\n\n\t\t  subject { Person.new(\"Yukihiro\", \"Matsumoto\") }\n\n\t\t  it \"has a full name\" do\n\t\t    subject.full_name.must_equal \"Yukihiro Matsumoto\"\n\t\t  end\n\n\t\tend\n\n## Specify\n\n`specify` is a alias for `it`, it is usually used where it doesn't make sense to describe the example with a string:\n\n\t\tdescribe Person do\n\n\t\t  subject { Person.new }\n\n\t\t  specify { subject.posts.must_be_empty }\n\n\t\tend\n\n## Skip\n\n`skip` provides a way to skip examples from being run, the method takes a string as optional argument that can be used to provide a explanation to why that example is skipped:\n\n\t\tdescribe Ticket do\n\n\t\t  it \"expires after one year\" do\n\t\t    skip \"Vending machine clock is broken\"\n\t\t    t = Ticket.new(:created_at => 1.year_ago)\n\t\t    t.expired?.must_be true\n\t\t  end\n\n\t\tend\n\nThe code after skip is not run in the example and is reported as “Skipped” (a S instead of a .) in the output when running the tests:\n\n\t\t$ ruby spec/ticket_spec.rb\n\t\tRun options: --seed 48730\n\n\t\t# Running tests:\n\n\t\tS\n\n\t\tFinished tests in 0.000633s, 1579.7788 tests/s, 0.0000 assertions/s.\n\n\t\t1 tests, 0 assertions, 0 failures, 0 errors, 1 skips\n\nThis can be handy if you want to hide error messages while doing refactorings or to describe a bug that you are not going to fix this very minute.\n\nAnother way of doing skips is using the it method without a block. This can be used to keep a list of tests that you plan to write. As skipped tests gets marked in the output you will get reminded that there are examples left to write.\n\n\t\tdescribe Ticket do\n\n\t\t  it \"expires after one year\"\n\t\t  it \"has a description\"\n\t\t  it \"belongs to a venue\"\n\n\t\tend\n\n## Mocks\n\nTodo.\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":13},"deserializer":"Marker"},"74":{"id":74,"range":[[0,9],[0,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"75":{"id":75,"range":[[45,1],[45,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"},"76":{"id":76,"range":[[383,65],[383,77]],"tailed":true,"reversed":false,"valid":true,"invalidate":"inside","persistent":true,"properties":{"replicate":false},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/web/teamweb/test/minitest_cheatsheet.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"5c4fdc0e7b06e3ee9aa60f078068649bc7169d42","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"children":[{"items":[{"id":13,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":14,"softWrap":false,"editorWidthInChars":39,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/web/teamweb/test/minitest_cheatsheet.md","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/mattgarrison/Projects/web/teamweb/test/minitest_cheatsheet.md","focused":false,"active":true,"deserializer":"Pane"},{"items":[{"deserializer":"MarkdownPreviewView","filePath":"/Users/mattgarrison/Projects/web/teamweb/test/minitest_cheatsheet.md","editorId":"13"}],"activeItemUri":"markdown-preview://editor/13","focused":false,"active":false,"deserializer":"Pane"}],"orientation":"horizontal","deserializer":"PaneAxis"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"command-palette:toggle":{"count":2,"name":"command-palette:toggle","lastRun":1394821975552},"markdown-preview:show":{"count":1,"name":"markdown-preview:show","lastRun":1394821979988}}},"fuzzy-finder":{"/Users/mattgarrison/Projects/web/teamweb/test/minitest_cheatsheet.md":1394821965788},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":856341310},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/mattgarrison/Projects/web/teamweb/test/minitest_cheatsheet.md","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}