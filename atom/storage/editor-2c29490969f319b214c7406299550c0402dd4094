{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1280,"height":774},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/mattgarrison/Projects/pairin/pairin/spec/models/organizations","buffers":[{"text":"require 'spec_helper'\nrequire 'closure_tree/test/matcher'\n\nmodule Organizations\n  describe HierarchicalOrganizationNode do\n    #it { should be_a_closure_tree }\n    it { should have_many :policies }\n    it { should have_many :users }\n    it { should have_many :assessment_sets }\n    it { should belong_to :organization }\n\n    let(:org_node) { FactoryGirl.create(:org_node) }\n\n    describe :add_user do\n      it \"should create user policy associated with passed in user\" do\n        user = FactoryGirl.create(:user)\n        lambda {\n          org_node.add_user(user)\n        }.should change(org_node.policies, :count).by(1)\n        org_node.users.should include(user)\n      end\n    end\n\n    context 'when organization is educational' do\n      # The educational_org_node factory will create a complex organizational\n      # structure for you which contains an admin, schools, and classes.\n      # Classes will contain teachers and students.\n      let!(:district){FactoryGirl.create(:educational_org_node, :district)}\n\n      it \"should be the root organization\" do\n        district.root?.should == true\n      end\n\n      it \"should have an administrator\" do\n        admins = district.policies.where(user_type: 'Manager')\n        admins.should_not be_nil\n      end\n\n      it \"should let an admin see content of child nodes\" do\n        admin = district.policies.where(user_type: 'Manager').first.user\n        school = district.children.first\n        school.has_management_access?(admin).should be_true\n      end\n\n      it \"should not let a higher level observer manage lower nodes\" do\n        user = FactoryGirl.create(:user)\n        district_observer = district.add_user(user, 'Observer')\n        school = district.children.first\n        school.has_management_access?(user).should be_false\n      end\n\n      it \"can have many schools associated\" do\n        schools = district.children\n        schools.should_not be_nil\n      end\n\n      it \"should have classes in the school\" do\n        schools = district.children\n        classes = schools.first.children\n        classes.should_not be_nil\n      end\n\n      it \"it should have teachers assigned to classes\" do\n        schools = district.children\n        classes = schools.first.children\n        teachers = classes.first.policies.where(user_type: 'Manager')\n        teachers.should_not be_nil\n      end\n\n      it \"it should have students assigned to classes\" do\n        schools = district.children\n        classes = schools.first.children\n        students = classes.first.policies.where(user_type: 'User')\n        students.should_not be_nil\n      end\n\n      # it \"can see all of the assessments for the users associated with it\" do\n      #   schools = district.children\n      #   classes = schools.first.children\n      #   some_class = classes.first\n      #   students = some_class.policies.where(user_type: 'User')\n      #   assessments = Assessments::EmployeeAssessment.where(assessable_id: students.pluck(:id))\n      #   some_class.assessments.should == assessments\n      # end\n\n      it \"should have sets of assessments associated with it\" do\n        schools = district.children\n        some_class = schools.first.children.first\n        some_class.assessment_sets.size.should > 0\n      end\n\n      it \"should be able to find students within an assessment_set\" do\n        schools = district.children\n        some_class = schools.first.children.first\n        some_class.assessment_sets[1].assessments.should_not be_nil\n      end\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[64,10],[64,10]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":13,"goalBufferRange":null},"deserializer":"Marker"},"130":{"id":130,"range":[[24,0],[24,77]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"131":{"id":131,"range":[[28,0],[28,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"132":{"id":132,"range":[[47,0],[48,59]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"133":{"id":133,"range":[[51,0],[51,46]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"134":{"id":134,"range":[[59,0],[59,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"135":{"id":135,"range":[[76,0],[84,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"136":{"id":136,"range":[[90,0],[90,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"137":{"id":137,"range":[[94,0],[94,67]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"138":{"id":138,"range":[[95,0],[95,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[48,59],[48,67]],"newRange":[[48,59],[48,59]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[47,40],[47,45]],"newRange":[[47,40],[47,40]],"oldText":"     ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[24,77],[24,78]],"newRange":[[24,77],[24,77]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[29,0],[29,0]],"newRange":[[29,0],[32,0]],"oldText":"","newText":"      # it \"should be the root organization\" do\n      #   district.root?.should == true\n      # end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,0],[35,0]],"newRange":[[32,0],[32,0]],"oldText":"      it \"should be the root organization\" do\n        district.root?.should == true\n      end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,0],[33,0]],"newRange":[[33,0],[37,0]],"oldText":"","newText":"      # it \"should have an administrator\" do\n      #   admins = district.policies.where(user_type: 'Manager')\n      #   admins.should_not be_nil\n      # end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[37,0],[41,0]],"newRange":[[37,0],[37,0]],"oldText":"      it \"should have an administrator\" do\n        admins = district.policies.where(user_type: 'Manager')\n        admins.should_not be_nil\n      end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[38,0],[38,0]],"newRange":[[38,0],[43,0]],"oldText":"","newText":"      # it \"should let an admin see content of child nodes\" do\n      #   admin = district.policies.where(user_type: 'Manager').first.user\n      #   school = district.children.first\n      #   school.has_management_access?(admin).should be_true\n      # end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[43,0],[48,0]],"newRange":[[43,0],[43,0]],"oldText":"      it \"should let an admin see content of child nodes\" do\n        admin = district.policies.where(user_type: 'Manager').first.user\n        school = district.children.first\n        school.has_management_access?(admin).should be_true\n      end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[44,0],[44,0]],"newRange":[[44,0],[50,0]],"oldText":"","newText":"      # it \"should not let a higher level observer manage lower nodes\" do\n      #   user = FactoryGirl.create(:user)\n      #   district_observer = district.add_user(user, 'Observer')\n      #   school = district.children.first\n      #   school.has_management_access?(user).should be_false\n      # end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[50,0],[56,0]],"newRange":[[50,0],[50,0]],"oldText":"      it \"should not let a higher level observer manage lower nodes\" do\n        user = FactoryGirl.create(:user)\n        district_observer = district.add_user(user, 'Observer')\n        school = district.children.first\n        school.has_management_access?(user).should be_false\n      end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[51,0],[51,0]],"newRange":[[51,0],[55,0]],"oldText":"","newText":"      # it \"can have many schools associated\" do\n      #   schools = district.children\n      #   schools.should_not be_nil\n      # end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[55,0],[59,0]],"newRange":[[55,0],[55,0]],"oldText":"      it \"can have many schools associated\" do\n        schools = district.children\n        schools.should_not be_nil\n      end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[56,0],[56,0]],"newRange":[[56,0],[61,0]],"oldText":"","newText":"      # it \"should have classes in the school\" do\n      #   schools = district.children\n      #   classes = schools.first.children\n      #   classes.should_not be_nil\n      # end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[61,0],[66,0]],"newRange":[[61,0],[61,0]],"oldText":"      it \"should have classes in the school\" do\n        schools = district.children\n        classes = schools.first.children\n        classes.should_not be_nil\n      end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[29,0],[29,0]],"newRange":[[29,0],[32,0]],"oldText":"","newText":"      it \"should be the root organization\" do\n        district.root?.should == true\n      end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[32,0],[35,0]],"newRange":[[32,0],[32,0]],"oldText":"      # it \"should be the root organization\" do\n      #   district.root?.should == true\n      # end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[33,0],[33,0]],"newRange":[[33,0],[37,0]],"oldText":"","newText":"      it \"should have an administrator\" do\n        admins = district.policies.where(user_type: 'Manager')\n        admins.should_not be_nil\n      end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[37,0],[41,0]],"newRange":[[37,0],[37,0]],"oldText":"      # it \"should have an administrator\" do\n      #   admins = district.policies.where(user_type: 'Manager')\n      #   admins.should_not be_nil\n      # end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[38,0],[38,0]],"newRange":[[38,0],[43,0]],"oldText":"","newText":"      it \"should let an admin see content of child nodes\" do\n        admin = district.policies.where(user_type: 'Manager').first.user\n        school = district.children.first\n        school.has_management_access?(admin).should be_true\n      end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[43,0],[48,0]],"newRange":[[43,0],[43,0]],"oldText":"      # it \"should let an admin see content of child nodes\" do\n      #   admin = district.policies.where(user_type: 'Manager').first.user\n      #   school = district.children.first\n      #   school.has_management_access?(admin).should be_true\n      # end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[44,0],[44,0]],"newRange":[[44,0],[50,0]],"oldText":"","newText":"      it \"should not let a higher level observer manage lower nodes\" do\n        user = FactoryGirl.create(:user)\n        district_observer = district.add_user(user, 'Observer')\n        school = district.children.first\n        school.has_management_access?(user).should be_false\n      end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[50,0],[56,0]],"newRange":[[50,0],[50,0]],"oldText":"      # it \"should not let a higher level observer manage lower nodes\" do\n      #   user = FactoryGirl.create(:user)\n      #   district_observer = district.add_user(user, 'Observer')\n      #   school = district.children.first\n      #   school.has_management_access?(user).should be_false\n      # end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[51,0],[51,0]],"newRange":[[51,0],[55,0]],"oldText":"","newText":"      it \"can have many schools associated\" do\n        schools = district.children\n        schools.should_not be_nil\n      end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[55,0],[59,0]],"newRange":[[55,0],[55,0]],"oldText":"      # it \"can have many schools associated\" do\n      #   schools = district.children\n      #   schools.should_not be_nil\n      # end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[56,0],[56,0]],"newRange":[[56,0],[61,0]],"oldText":"","newText":"      it \"should have classes in the school\" do\n        schools = district.children\n        classes = schools.first.children\n        classes.should_not be_nil\n      end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[61,0],[66,0]],"newRange":[[61,0],[61,0]],"oldText":"      # it \"should have classes in the school\" do\n      #   schools = district.children\n      #   classes = schools.first.children\n      #   classes.should_not be_nil\n      # end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[76,0],[76,0]],"newRange":[[76,0],[82,0]],"oldText":"","newText":"      it \"can see all of the assessments for the users associated with it\" do\n        schools = district.children\n        classes = schools.first.children\n        some_class = classes.first\n      end\n\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[80,0],[80,0]],"newRange":[[80,0],[81,0]],"oldText":"","newText":"        binding.pry\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[80,0],[80,0]],"newRange":[[80,0],[82,0]],"oldText":"","newText":"        students = some_class.policies.where(user_type: 'User')\n        some_class.assessments.should ==\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[82,0],[83,0]],"newRange":[[82,0],[82,0]],"oldText":"        binding.pry\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[81,0],[81,0]],"newRange":[[81,0],[82,0]],"oldText":"","newText":"        Assessments::EmployeeAssessment.where(assessable_id: students.pluck(:id))\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[81,0],[81,0]],"newRange":[[81,0],[82,0]],"oldText":"","newText":"        assessments = Assessments::EmployeeAssessment.where(assessable_id: students.pluck(:id))\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[82,0],[83,0]],"newRange":[[82,0],[82,0]],"oldText":"        Assessments::EmployeeAssessment.where(assessable_id: students.pluck(:id))\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[82,0],[82,0]],"newRange":[[82,0],[83,0]],"oldText":"","newText":"        some_class.assessments.should == assessments\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[83,0],[84,0]],"newRange":[[83,0],[83,0]],"oldText":"        some_class.assessments.should ==\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[76,0],[76,0]],"newRange":[[76,0],[84,0]],"oldText":"","newText":"      # it \"can see all of the assessments for the users associated with it\" do\n      #   schools = district.children\n      #   classes = schools.first.children\n      #   some_class = classes.first\n      #   students = some_class.policies.where(user_type: 'User')\n      #   assessments = Assessments::EmployeeAssessment.where(assessable_id: students.pluck(:id))\n      #   some_class.assessments.should == assessments\n      # end\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[84,0],[92,0]],"newRange":[[84,0],[84,0]],"oldText":"      it \"can see all of the assessments for the users associated with it\" do\n        schools = district.children\n        classes = schools.first.children\n        some_class = classes.first\n        students = some_class.policies.where(user_type: 'User')\n        assessments = Assessments::EmployeeAssessment.where(assessable_id: students.pluck(:id))\n        some_class.assessments.should == assessments\n      end\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/pairin/pairin/spec/models/organizations/hierarchical_organization_node_spec.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f0531314bdbaf548f725e581b6d9e44b3fd36fa0","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":13,"softTabs":true,"displayBuffer":{"id":14,"softWrap":false,"editorWidthInChars":null,"scrollTop":770,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/pairin/pairin/spec/models/organizations/hierarchical_organization_node_spec.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/mattgarrison/Projects/pairin/pairin/spec/models/organizations/hierarchical_organization_node_spec.rb","focused":false,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-ruby"],"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"core:undo":{"count":3,"name":"core:undo","lastRun":1406821548367},"core:save":{"count":1,"name":"core:save","lastRun":1406821548896},"command-palette:toggle":{"count":2,"name":"command-palette:toggle","lastRun":1406821555134},"core:backspace":{"count":3,"name":"core:backspace","lastRun":1406821558503},"core:cancel":{"count":1,"name":"core:cancel","lastRun":1406821558881}}},"fuzzy-finder":{"/Users/mattgarrison/Projects/pairin/pairin/spec/models/organizations/hierarchical_organization_node_spec.rb":1406821544617},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":15124608},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/mattgarrison/Projects/pairin/pairin/spec/models/organizations/hierarchical_organization_node_spec.rb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}