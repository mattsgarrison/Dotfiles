{"mode":"editor","version":"0.69.0","windowDimensions":{"x":768,"y":22,"width":1024,"height":1414},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/mattgarrison/Projects/web/teamweb","buffers":[{"text":"ENV[\"RAILS_ENV\"] = \"test\"\nrequire 'simplecov'\nSimpleCov.use_merging true\nSimpleCov.start 'rails' do\n  #add_filter \"lib\"\n  #add_group \"UserControllers\", \"app/controllers/users\"\nend\nSimpleCov.command_name 'Unit Tests'\nSimpleCov.command_name 'Specs'\nrequire File.expand_path('../../config/environment', __FILE__)\nrequire 'rails/test_help'\nrequire 'capybara/poltergeist'\nrequire 'capybara/rails'\nrequire 'database_cleaner'\nrequire 'turn'\nrequire 'rack/test'\n\nclass ActiveSupport::TestCase\n  include Rack::Test::Methods\n  # Setup all fixtures in test/fixtures/*.(yml|csv) for all tests in alphabetical order.\n  #\n  # Note: You'll currently still have to declare fixtures explicitly in integration tests\n  # -- they do not yet inherit this setting\n  fixtures :all\n\n  # Add more helper methods to be used by all tests here...\nend\n\n# So that :webkit can login via capybara\nclass ActionDispatch::IntegrationTest\n  self.use_transactional_fixtures = false\nend\n# Clean DB because of the above capybara config code. it's also the faster option\nDatabaseCleaner.strategy = :transaction\n\nclass MiniTest::Spec\n  before :each do\n    DatabaseCleaner.start\n  end\n\n  after :each do\n    DatabaseCleaner.clean\n  end\nend\n\n\nTurn.config do |c|\n#  # use one of output formats:\n#  # :outline  - turn's original case/test outline mode [default]\n#  # :progress - indicates progress with progress bar\n#  # :dotted   - test/unit's traditional dot-progress mode\n#  # :pretty   - new pretty reporter\n#  # :marshal  - dump output as YAML (normal run mode only)\n#  # :cue      - interactive testing\n  c.format  = :progress\n#  # turn on invoke/execute tracing, enable full backtrace\n#  c.trace   = true\n#  # use humanized test names (works only with :outline format)\n  c.natural = true\nend\n\ndef capybara_sign_in(user)\n  visit user_session_path\n  fill_in 'Email', with: user.email\n  fill_in 'Password', with: user.password\n  click_link_or_button 'Sign in'\n  user\nend\n\n# Resolutions that fit Bootstrap dynamics\nLARGE_SCREENSIZE = { :width => 1280, :height => 1024 }\nMEDIUM_SCREENSIZE = { :width => 1024, :height => 768 }\nSMALL_SCREENSIZE = { :width => 768, :height => 1024 }\nEXTRA_SMALL_SCREENSIZE = { :width => 320, :height => 480 }\n\ndef capybara_resize(size)\n  # specific to poltergeist - https://github.com/jonleighton/poltergeist#resizing-the-window\n  Capybara.current_session.driver.resize(size[:width], size[:height])\nend\n\ndef omniauth_facebook_sign_in\n  OmniAuth.config.test_mode = true\n  # Doesn't really work yet\n  OmniAuth.config.mock_auth[:facebook] = {\n    'uid'       => \"999999\",\n    'provider'  => \"facebook\",\n    'extra'     => {\n      'user_hash' => {\n        'email'   => 'test1@test.com',\n        'first_name'  => 'First',\n        'last_name'   => 'Last',\n        'gender'  => 'Male'\n      }\n    },\n    'credentials' => {\n      'token' => \"token1234qwert\"\n    }\n  }\nend\n\ndef capybara_facebook_sign_in\n  OmniAuth.config.test_mode = true\n  # Doesn't really work yet\n  OmniAuth.config.mock_auth[:facebook] = {\n    'uid'       => \"999999\",\n    'provider'  => \"facebook\",\n    'extra'     => {\n      'user_hash' => {\n        'email'   => 'test1@test.com',\n        'first_name'  => 'First',\n        'last_name'   => 'Last',\n        'gender'  => 'Male'\n      }\n    },\n    'credentials' => {\n      'token' => \"token1234qwert\"\n    }\n  }\n  visit user_session_path\n  click_link_or_button 'Facebook'\nend\n","markers":{"markers":{"1":{"id":1,"range":[[43,3],[43,3]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":38,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/mattgarrison/Projects/web/teamweb/test/test_helper.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0c8c979e838a4802928b8bc26d590ba49232c14e","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":38,"softTabs":true,"scrollTop":393,"scrollLeft":0,"displayBuffer":{"id":39,"softWrap":false,"editorWidthInChars":67,"tokenizedBuffer":{"bufferPath":"/Users/mattgarrison/Projects/web/teamweb/test/test_helper.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/mattgarrison/Projects/web/teamweb/test/test_helper.rb","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"core:copy":{"count":1,"name":"core:copy","lastRun":1394734855900}}},"fuzzy-finder":{"/Users/mattgarrison/Projects/web/teamweb/test/test_helper.rb":1394734851834},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":4381666},"tree-view":{"directoryExpansionStates":{"lib":{"tasks":{},"templates":{"haml":{"scaffold":{}}}},"test":{}},"selectedPath":"/Users/mattgarrison/Projects/web/teamweb/lib/templates/haml/scaffold","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}